$date
	Tue Apr  7 18:35:21 2020
$end
$version
	ModelSim Version 10.7c
$end
$timescale
	1ns
$end

$scope module proc_hier_pbench $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemDataIn [15] $end
$var wire 1 h MemDataIn [14] $end
$var wire 1 i MemDataIn [13] $end
$var wire 1 j MemDataIn [12] $end
$var wire 1 k MemDataIn [11] $end
$var wire 1 l MemDataIn [10] $end
$var wire 1 m MemDataIn [9] $end
$var wire 1 n MemDataIn [8] $end
$var wire 1 o MemDataIn [7] $end
$var wire 1 p MemDataIn [6] $end
$var wire 1 q MemDataIn [5] $end
$var wire 1 r MemDataIn [4] $end
$var wire 1 s MemDataIn [3] $end
$var wire 1 t MemDataIn [2] $end
$var wire 1 u MemDataIn [1] $end
$var wire 1 v MemDataIn [0] $end
$var wire 1 w MemDataOut [15] $end
$var wire 1 x MemDataOut [14] $end
$var wire 1 y MemDataOut [13] $end
$var wire 1 z MemDataOut [12] $end
$var wire 1 { MemDataOut [11] $end
$var wire 1 | MemDataOut [10] $end
$var wire 1 } MemDataOut [9] $end
$var wire 1 ~ MemDataOut [8] $end
$var wire 1 !! MemDataOut [7] $end
$var wire 1 "! MemDataOut [6] $end
$var wire 1 #! MemDataOut [5] $end
$var wire 1 $! MemDataOut [4] $end
$var wire 1 %! MemDataOut [3] $end
$var wire 1 &! MemDataOut [2] $end
$var wire 1 '! MemDataOut [1] $end
$var wire 1 (! MemDataOut [0] $end
$var wire 1 )! DCacheHit $end
$var wire 1 *! ICacheHit $end
$var wire 1 +! DCacheReq $end
$var wire 1 ,! ICacheReq $end
$var wire 1 -! Halt $end
$var integer 32 .! inst_count $end
$var integer 32 /! trace_file $end
$var integer 32 0! sim_log_file $end
$var integer 32 1! DCacheHit_count $end
$var integer 32 2! ICacheHit_count $end
$var integer 32 3! DCacheReq_count $end
$var integer 32 4! ICacheReq_count $end

$scope module DUT $end
$var wire 1 5! clk $end
$var wire 1 6! err $end
$var wire 1 7! rst $end

$scope module c0 $end
$var reg 1 8! clk $end
$var reg 1 9! rst $end
$var wire 1 6! err $end
$var integer 32 :! cycle_count $end
$upscope $end

$scope module p0 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6! err $end
$var wire 1 ;! stall $end
$var wire 1 <! HALT $end
$var wire 1 =! NOP $end
$var wire 1 >! writeR7 $end
$var wire 1 ?! jumpReg $end
$var wire 1 @! jump $end
$var wire 1 A! branch $end
$var wire 1 B! memToReg $end
$var wire 1 C! memRead $end
$var wire 1 D! ALUop [3] $end
$var wire 1 E! ALUop [2] $end
$var wire 1 F! ALUop [1] $end
$var wire 1 G! ALUop [0] $end
$var wire 1 H! memWrite $end
$var wire 1 I! ALUsrc $end
$var wire 1 J! regWrite $end
$var wire 1 K! num_reg_reads [1] $end
$var wire 1 L! num_reg_reads [0] $end
$var wire 1 M! flush $end
$var wire 1 N! readData1 [15] $end
$var wire 1 O! readData1 [14] $end
$var wire 1 P! readData1 [13] $end
$var wire 1 Q! readData1 [12] $end
$var wire 1 R! readData1 [11] $end
$var wire 1 S! readData1 [10] $end
$var wire 1 T! readData1 [9] $end
$var wire 1 U! readData1 [8] $end
$var wire 1 V! readData1 [7] $end
$var wire 1 W! readData1 [6] $end
$var wire 1 X! readData1 [5] $end
$var wire 1 Y! readData1 [4] $end
$var wire 1 Z! readData1 [3] $end
$var wire 1 [! readData1 [2] $end
$var wire 1 \! readData1 [1] $end
$var wire 1 ]! readData1 [0] $end
$var wire 1 ^! readData2 [15] $end
$var wire 1 _! readData2 [14] $end
$var wire 1 `! readData2 [13] $end
$var wire 1 a! readData2 [12] $end
$var wire 1 b! readData2 [11] $end
$var wire 1 c! readData2 [10] $end
$var wire 1 d! readData2 [9] $end
$var wire 1 e! readData2 [8] $end
$var wire 1 f! readData2 [7] $end
$var wire 1 g! readData2 [6] $end
$var wire 1 h! readData2 [5] $end
$var wire 1 i! readData2 [4] $end
$var wire 1 j! readData2 [3] $end
$var wire 1 k! readData2 [2] $end
$var wire 1 l! readData2 [1] $end
$var wire 1 m! readData2 [0] $end
$var wire 1 n! immediate [15] $end
$var wire 1 o! immediate [14] $end
$var wire 1 p! immediate [13] $end
$var wire 1 q! immediate [12] $end
$var wire 1 r! immediate [11] $end
$var wire 1 s! immediate [10] $end
$var wire 1 t! immediate [9] $end
$var wire 1 u! immediate [8] $end
$var wire 1 v! immediate [7] $end
$var wire 1 w! immediate [6] $end
$var wire 1 x! immediate [5] $end
$var wire 1 y! immediate [4] $end
$var wire 1 z! immediate [3] $end
$var wire 1 {! immediate [2] $end
$var wire 1 |! immediate [1] $end
$var wire 1 }! immediate [0] $end
$var wire 1 ~! currPC [15] $end
$var wire 1 !" currPC [14] $end
$var wire 1 "" currPC [13] $end
$var wire 1 #" currPC [12] $end
$var wire 1 $" currPC [11] $end
$var wire 1 %" currPC [10] $end
$var wire 1 &" currPC [9] $end
$var wire 1 '" currPC [8] $end
$var wire 1 (" currPC [7] $end
$var wire 1 )" currPC [6] $end
$var wire 1 *" currPC [5] $end
$var wire 1 +" currPC [4] $end
$var wire 1 ," currPC [3] $end
$var wire 1 -" currPC [2] $end
$var wire 1 ." currPC [1] $end
$var wire 1 /" currPC [0] $end
$var wire 1 0" nextPC [15] $end
$var wire 1 1" nextPC [14] $end
$var wire 1 2" nextPC [13] $end
$var wire 1 3" nextPC [12] $end
$var wire 1 4" nextPC [11] $end
$var wire 1 5" nextPC [10] $end
$var wire 1 6" nextPC [9] $end
$var wire 1 7" nextPC [8] $end
$var wire 1 8" nextPC [7] $end
$var wire 1 9" nextPC [6] $end
$var wire 1 :" nextPC [5] $end
$var wire 1 ;" nextPC [4] $end
$var wire 1 <" nextPC [3] $end
$var wire 1 =" nextPC [2] $end
$var wire 1 >" nextPC [1] $end
$var wire 1 ?" nextPC [0] $end
$var wire 1 @" pc_plus_2 [15] $end
$var wire 1 A" pc_plus_2 [14] $end
$var wire 1 B" pc_plus_2 [13] $end
$var wire 1 C" pc_plus_2 [12] $end
$var wire 1 D" pc_plus_2 [11] $end
$var wire 1 E" pc_plus_2 [10] $end
$var wire 1 F" pc_plus_2 [9] $end
$var wire 1 G" pc_plus_2 [8] $end
$var wire 1 H" pc_plus_2 [7] $end
$var wire 1 I" pc_plus_2 [6] $end
$var wire 1 J" pc_plus_2 [5] $end
$var wire 1 K" pc_plus_2 [4] $end
$var wire 1 L" pc_plus_2 [3] $end
$var wire 1 M" pc_plus_2 [2] $end
$var wire 1 N" pc_plus_2 [1] $end
$var wire 1 O" pc_plus_2 [0] $end
$var wire 1 P" instruction [15] $end
$var wire 1 Q" instruction [14] $end
$var wire 1 R" instruction [13] $end
$var wire 1 S" instruction [12] $end
$var wire 1 T" instruction [11] $end
$var wire 1 U" instruction [10] $end
$var wire 1 V" instruction [9] $end
$var wire 1 W" instruction [8] $end
$var wire 1 X" instruction [7] $end
$var wire 1 Y" instruction [6] $end
$var wire 1 Z" instruction [5] $end
$var wire 1 [" instruction [4] $end
$var wire 1 \" instruction [3] $end
$var wire 1 ]" instruction [2] $end
$var wire 1 ^" instruction [1] $end
$var wire 1 _" instruction [0] $end
$var wire 1 `" writeData [15] $end
$var wire 1 a" writeData [14] $end
$var wire 1 b" writeData [13] $end
$var wire 1 c" writeData [12] $end
$var wire 1 d" writeData [11] $end
$var wire 1 e" writeData [10] $end
$var wire 1 f" writeData [9] $end
$var wire 1 g" writeData [8] $end
$var wire 1 h" writeData [7] $end
$var wire 1 i" writeData [6] $end
$var wire 1 j" writeData [5] $end
$var wire 1 k" writeData [4] $end
$var wire 1 l" writeData [3] $end
$var wire 1 m" writeData [2] $end
$var wire 1 n" writeData [1] $end
$var wire 1 o" writeData [0] $end
$var wire 1 p" aluResult [15] $end
$var wire 1 q" aluResult [14] $end
$var wire 1 r" aluResult [13] $end
$var wire 1 s" aluResult [12] $end
$var wire 1 t" aluResult [11] $end
$var wire 1 u" aluResult [10] $end
$var wire 1 v" aluResult [9] $end
$var wire 1 w" aluResult [8] $end
$var wire 1 x" aluResult [7] $end
$var wire 1 y" aluResult [6] $end
$var wire 1 z" aluResult [5] $end
$var wire 1 {" aluResult [4] $end
$var wire 1 |" aluResult [3] $end
$var wire 1 }" aluResult [2] $end
$var wire 1 ~" aluResult [1] $end
$var wire 1 !# aluResult [0] $end
$var wire 1 "# readFromMem [15] $end
$var wire 1 ## readFromMem [14] $end
$var wire 1 $# readFromMem [13] $end
$var wire 1 %# readFromMem [12] $end
$var wire 1 &# readFromMem [11] $end
$var wire 1 '# readFromMem [10] $end
$var wire 1 (# readFromMem [9] $end
$var wire 1 )# readFromMem [8] $end
$var wire 1 *# readFromMem [7] $end
$var wire 1 +# readFromMem [6] $end
$var wire 1 ,# readFromMem [5] $end
$var wire 1 -# readFromMem [4] $end
$var wire 1 .# readFromMem [3] $end
$var wire 1 /# readFromMem [2] $end
$var wire 1 0# readFromMem [1] $end
$var wire 1 1# readFromMem [0] $end
$var wire 1 2# instruction_FD [15] $end
$var wire 1 3# instruction_FD [14] $end
$var wire 1 4# instruction_FD [13] $end
$var wire 1 5# instruction_FD [12] $end
$var wire 1 6# instruction_FD [11] $end
$var wire 1 7# instruction_FD [10] $end
$var wire 1 8# instruction_FD [9] $end
$var wire 1 9# instruction_FD [8] $end
$var wire 1 :# instruction_FD [7] $end
$var wire 1 ;# instruction_FD [6] $end
$var wire 1 <# instruction_FD [5] $end
$var wire 1 =# instruction_FD [4] $end
$var wire 1 ># instruction_FD [3] $end
$var wire 1 ?# instruction_FD [2] $end
$var wire 1 @# instruction_FD [1] $end
$var wire 1 A# instruction_FD [0] $end
$var wire 1 B# pc_plus_2_FD [15] $end
$var wire 1 C# pc_plus_2_FD [14] $end
$var wire 1 D# pc_plus_2_FD [13] $end
$var wire 1 E# pc_plus_2_FD [12] $end
$var wire 1 F# pc_plus_2_FD [11] $end
$var wire 1 G# pc_plus_2_FD [10] $end
$var wire 1 H# pc_plus_2_FD [9] $end
$var wire 1 I# pc_plus_2_FD [8] $end
$var wire 1 J# pc_plus_2_FD [7] $end
$var wire 1 K# pc_plus_2_FD [6] $end
$var wire 1 L# pc_plus_2_FD [5] $end
$var wire 1 M# pc_plus_2_FD [4] $end
$var wire 1 N# pc_plus_2_FD [3] $end
$var wire 1 O# pc_plus_2_FD [2] $end
$var wire 1 P# pc_plus_2_FD [1] $end
$var wire 1 Q# pc_plus_2_FD [0] $end
$var wire 1 R# currPC_FD [15] $end
$var wire 1 S# currPC_FD [14] $end
$var wire 1 T# currPC_FD [13] $end
$var wire 1 U# currPC_FD [12] $end
$var wire 1 V# currPC_FD [11] $end
$var wire 1 W# currPC_FD [10] $end
$var wire 1 X# currPC_FD [9] $end
$var wire 1 Y# currPC_FD [8] $end
$var wire 1 Z# currPC_FD [7] $end
$var wire 1 [# currPC_FD [6] $end
$var wire 1 \# currPC_FD [5] $end
$var wire 1 ]# currPC_FD [4] $end
$var wire 1 ^# currPC_FD [3] $end
$var wire 1 _# currPC_FD [2] $end
$var wire 1 `# currPC_FD [1] $end
$var wire 1 a# currPC_FD [0] $end
$var wire 1 b# flush_instruction [15] $end
$var wire 1 c# flush_instruction [14] $end
$var wire 1 d# flush_instruction [13] $end
$var wire 1 e# flush_instruction [12] $end
$var wire 1 f# flush_instruction [11] $end
$var wire 1 g# flush_instruction [10] $end
$var wire 1 h# flush_instruction [9] $end
$var wire 1 i# flush_instruction [8] $end
$var wire 1 j# flush_instruction [7] $end
$var wire 1 k# flush_instruction [6] $end
$var wire 1 l# flush_instruction [5] $end
$var wire 1 m# flush_instruction [4] $end
$var wire 1 n# flush_instruction [3] $end
$var wire 1 o# flush_instruction [2] $end
$var wire 1 p# flush_instruction [1] $end
$var wire 1 q# flush_instruction [0] $end
$var wire 1 r# writeRegSel [2] $end
$var wire 1 s# writeRegSel [1] $end
$var wire 1 t# writeRegSel [0] $end
$var wire 1 u# readRegSel1 [2] $end
$var wire 1 v# readRegSel1 [1] $end
$var wire 1 w# readRegSel1 [0] $end
$var wire 1 x# readRegSel2 [2] $end
$var wire 1 y# readRegSel2 [1] $end
$var wire 1 z# readRegSel2 [0] $end
$var wire 1 {# writeReg [2] $end
$var wire 1 |# writeReg [1] $end
$var wire 1 }# writeReg [0] $end
$var wire 1 ~# pc_plus_2_DX [15] $end
$var wire 1 !$ pc_plus_2_DX [14] $end
$var wire 1 "$ pc_plus_2_DX [13] $end
$var wire 1 #$ pc_plus_2_DX [12] $end
$var wire 1 $$ pc_plus_2_DX [11] $end
$var wire 1 %$ pc_plus_2_DX [10] $end
$var wire 1 &$ pc_plus_2_DX [9] $end
$var wire 1 '$ pc_plus_2_DX [8] $end
$var wire 1 ($ pc_plus_2_DX [7] $end
$var wire 1 )$ pc_plus_2_DX [6] $end
$var wire 1 *$ pc_plus_2_DX [5] $end
$var wire 1 +$ pc_plus_2_DX [4] $end
$var wire 1 ,$ pc_plus_2_DX [3] $end
$var wire 1 -$ pc_plus_2_DX [2] $end
$var wire 1 .$ pc_plus_2_DX [1] $end
$var wire 1 /$ pc_plus_2_DX [0] $end
$var wire 1 0$ immediate_DX [15] $end
$var wire 1 1$ immediate_DX [14] $end
$var wire 1 2$ immediate_DX [13] $end
$var wire 1 3$ immediate_DX [12] $end
$var wire 1 4$ immediate_DX [11] $end
$var wire 1 5$ immediate_DX [10] $end
$var wire 1 6$ immediate_DX [9] $end
$var wire 1 7$ immediate_DX [8] $end
$var wire 1 8$ immediate_DX [7] $end
$var wire 1 9$ immediate_DX [6] $end
$var wire 1 :$ immediate_DX [5] $end
$var wire 1 ;$ immediate_DX [4] $end
$var wire 1 <$ immediate_DX [3] $end
$var wire 1 =$ immediate_DX [2] $end
$var wire 1 >$ immediate_DX [1] $end
$var wire 1 ?$ immediate_DX [0] $end
$var wire 1 @$ readData1_DX [15] $end
$var wire 1 A$ readData1_DX [14] $end
$var wire 1 B$ readData1_DX [13] $end
$var wire 1 C$ readData1_DX [12] $end
$var wire 1 D$ readData1_DX [11] $end
$var wire 1 E$ readData1_DX [10] $end
$var wire 1 F$ readData1_DX [9] $end
$var wire 1 G$ readData1_DX [8] $end
$var wire 1 H$ readData1_DX [7] $end
$var wire 1 I$ readData1_DX [6] $end
$var wire 1 J$ readData1_DX [5] $end
$var wire 1 K$ readData1_DX [4] $end
$var wire 1 L$ readData1_DX [3] $end
$var wire 1 M$ readData1_DX [2] $end
$var wire 1 N$ readData1_DX [1] $end
$var wire 1 O$ readData1_DX [0] $end
$var wire 1 P$ readData2_DX [15] $end
$var wire 1 Q$ readData2_DX [14] $end
$var wire 1 R$ readData2_DX [13] $end
$var wire 1 S$ readData2_DX [12] $end
$var wire 1 T$ readData2_DX [11] $end
$var wire 1 U$ readData2_DX [10] $end
$var wire 1 V$ readData2_DX [9] $end
$var wire 1 W$ readData2_DX [8] $end
$var wire 1 X$ readData2_DX [7] $end
$var wire 1 Y$ readData2_DX [6] $end
$var wire 1 Z$ readData2_DX [5] $end
$var wire 1 [$ readData2_DX [4] $end
$var wire 1 \$ readData2_DX [3] $end
$var wire 1 ]$ readData2_DX [2] $end
$var wire 1 ^$ readData2_DX [1] $end
$var wire 1 _$ readData2_DX [0] $end
$var wire 1 `$ writeRegSel_DX [2] $end
$var wire 1 a$ writeRegSel_DX [1] $end
$var wire 1 b$ writeRegSel_DX [0] $end
$var wire 1 c$ ALUop_DX [3] $end
$var wire 1 d$ ALUop_DX [2] $end
$var wire 1 e$ ALUop_DX [1] $end
$var wire 1 f$ ALUop_DX [0] $end
$var wire 1 g$ HALT_DX $end
$var wire 1 h$ writeR7_DX $end
$var wire 1 i$ memToReg_DX $end
$var wire 1 j$ memRead_DX $end
$var wire 1 k$ memWrite_DX $end
$var wire 1 l$ ALUsrc_DX $end
$var wire 1 m$ regWrite_DX $end
$var wire 1 n$ aluResult_XM [15] $end
$var wire 1 o$ aluResult_XM [14] $end
$var wire 1 p$ aluResult_XM [13] $end
$var wire 1 q$ aluResult_XM [12] $end
$var wire 1 r$ aluResult_XM [11] $end
$var wire 1 s$ aluResult_XM [10] $end
$var wire 1 t$ aluResult_XM [9] $end
$var wire 1 u$ aluResult_XM [8] $end
$var wire 1 v$ aluResult_XM [7] $end
$var wire 1 w$ aluResult_XM [6] $end
$var wire 1 x$ aluResult_XM [5] $end
$var wire 1 y$ aluResult_XM [4] $end
$var wire 1 z$ aluResult_XM [3] $end
$var wire 1 {$ aluResult_XM [2] $end
$var wire 1 |$ aluResult_XM [1] $end
$var wire 1 }$ aluResult_XM [0] $end
$var wire 1 ~$ pc_plus_2_XM [15] $end
$var wire 1 !% pc_plus_2_XM [14] $end
$var wire 1 "% pc_plus_2_XM [13] $end
$var wire 1 #% pc_plus_2_XM [12] $end
$var wire 1 $% pc_plus_2_XM [11] $end
$var wire 1 %% pc_plus_2_XM [10] $end
$var wire 1 &% pc_plus_2_XM [9] $end
$var wire 1 '% pc_plus_2_XM [8] $end
$var wire 1 (% pc_plus_2_XM [7] $end
$var wire 1 )% pc_plus_2_XM [6] $end
$var wire 1 *% pc_plus_2_XM [5] $end
$var wire 1 +% pc_plus_2_XM [4] $end
$var wire 1 ,% pc_plus_2_XM [3] $end
$var wire 1 -% pc_plus_2_XM [2] $end
$var wire 1 .% pc_plus_2_XM [1] $end
$var wire 1 /% pc_plus_2_XM [0] $end
$var wire 1 0% readData2_XM [15] $end
$var wire 1 1% readData2_XM [14] $end
$var wire 1 2% readData2_XM [13] $end
$var wire 1 3% readData2_XM [12] $end
$var wire 1 4% readData2_XM [11] $end
$var wire 1 5% readData2_XM [10] $end
$var wire 1 6% readData2_XM [9] $end
$var wire 1 7% readData2_XM [8] $end
$var wire 1 8% readData2_XM [7] $end
$var wire 1 9% readData2_XM [6] $end
$var wire 1 :% readData2_XM [5] $end
$var wire 1 ;% readData2_XM [4] $end
$var wire 1 <% readData2_XM [3] $end
$var wire 1 =% readData2_XM [2] $end
$var wire 1 >% readData2_XM [1] $end
$var wire 1 ?% readData2_XM [0] $end
$var wire 1 @% writeRegSel_XM [2] $end
$var wire 1 A% writeRegSel_XM [1] $end
$var wire 1 B% writeRegSel_XM [0] $end
$var wire 1 C% HALT_XM $end
$var wire 1 D% writeR7_XM $end
$var wire 1 E% memToReg_XM $end
$var wire 1 F% memRead_XM $end
$var wire 1 G% memWrite_XM $end
$var wire 1 H% regWrite_XM $end
$var wire 1 I% readFromMem_MWB [15] $end
$var wire 1 J% readFromMem_MWB [14] $end
$var wire 1 K% readFromMem_MWB [13] $end
$var wire 1 L% readFromMem_MWB [12] $end
$var wire 1 M% readFromMem_MWB [11] $end
$var wire 1 N% readFromMem_MWB [10] $end
$var wire 1 O% readFromMem_MWB [9] $end
$var wire 1 P% readFromMem_MWB [8] $end
$var wire 1 Q% readFromMem_MWB [7] $end
$var wire 1 R% readFromMem_MWB [6] $end
$var wire 1 S% readFromMem_MWB [5] $end
$var wire 1 T% readFromMem_MWB [4] $end
$var wire 1 U% readFromMem_MWB [3] $end
$var wire 1 V% readFromMem_MWB [2] $end
$var wire 1 W% readFromMem_MWB [1] $end
$var wire 1 X% readFromMem_MWB [0] $end
$var wire 1 Y% aluResult_MWB [15] $end
$var wire 1 Z% aluResult_MWB [14] $end
$var wire 1 [% aluResult_MWB [13] $end
$var wire 1 \% aluResult_MWB [12] $end
$var wire 1 ]% aluResult_MWB [11] $end
$var wire 1 ^% aluResult_MWB [10] $end
$var wire 1 _% aluResult_MWB [9] $end
$var wire 1 `% aluResult_MWB [8] $end
$var wire 1 a% aluResult_MWB [7] $end
$var wire 1 b% aluResult_MWB [6] $end
$var wire 1 c% aluResult_MWB [5] $end
$var wire 1 d% aluResult_MWB [4] $end
$var wire 1 e% aluResult_MWB [3] $end
$var wire 1 f% aluResult_MWB [2] $end
$var wire 1 g% aluResult_MWB [1] $end
$var wire 1 h% aluResult_MWB [0] $end
$var wire 1 i% pc_plus_2_MWB [15] $end
$var wire 1 j% pc_plus_2_MWB [14] $end
$var wire 1 k% pc_plus_2_MWB [13] $end
$var wire 1 l% pc_plus_2_MWB [12] $end
$var wire 1 m% pc_plus_2_MWB [11] $end
$var wire 1 n% pc_plus_2_MWB [10] $end
$var wire 1 o% pc_plus_2_MWB [9] $end
$var wire 1 p% pc_plus_2_MWB [8] $end
$var wire 1 q% pc_plus_2_MWB [7] $end
$var wire 1 r% pc_plus_2_MWB [6] $end
$var wire 1 s% pc_plus_2_MWB [5] $end
$var wire 1 t% pc_plus_2_MWB [4] $end
$var wire 1 u% pc_plus_2_MWB [3] $end
$var wire 1 v% pc_plus_2_MWB [2] $end
$var wire 1 w% pc_plus_2_MWB [1] $end
$var wire 1 x% pc_plus_2_MWB [0] $end
$var wire 1 y% writeRegSel_MWB [2] $end
$var wire 1 z% writeRegSel_MWB [1] $end
$var wire 1 {% writeRegSel_MWB [0] $end
$var wire 1 |% writeR7_MWB $end
$var wire 1 }% memToReg_MWB $end
$var wire 1 ~% regWrite_MWB $end
$var wire 1 !& HALT_MWB $end
$var wire 1 "& testPC [15] $end
$var wire 1 #& testPC [14] $end
$var wire 1 $& testPC [13] $end
$var wire 1 %& testPC [12] $end
$var wire 1 && testPC [11] $end
$var wire 1 '& testPC [10] $end
$var wire 1 (& testPC [9] $end
$var wire 1 )& testPC [8] $end
$var wire 1 *& testPC [7] $end
$var wire 1 +& testPC [6] $end
$var wire 1 ,& testPC [5] $end
$var wire 1 -& testPC [4] $end
$var wire 1 .& testPC [3] $end
$var wire 1 /& testPC [2] $end
$var wire 1 0& testPC [1] $end
$var wire 1 1& testPC [0] $end
$var wire 1 2& instruction_input [15] $end
$var wire 1 3& instruction_input [14] $end
$var wire 1 4& instruction_input [13] $end
$var wire 1 5& instruction_input [12] $end
$var wire 1 6& instruction_input [11] $end
$var wire 1 7& instruction_input [10] $end
$var wire 1 8& instruction_input [9] $end
$var wire 1 9& instruction_input [8] $end
$var wire 1 :& instruction_input [7] $end
$var wire 1 ;& instruction_input [6] $end
$var wire 1 <& instruction_input [5] $end
$var wire 1 =& instruction_input [4] $end
$var wire 1 >& instruction_input [3] $end
$var wire 1 ?& instruction_input [2] $end
$var wire 1 @& instruction_input [1] $end
$var wire 1 A& instruction_input [0] $end

$scope module PC_REG $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 B& en $end
$var wire 1 "& data_in [15] $end
$var wire 1 #& data_in [14] $end
$var wire 1 $& data_in [13] $end
$var wire 1 %& data_in [12] $end
$var wire 1 && data_in [11] $end
$var wire 1 '& data_in [10] $end
$var wire 1 (& data_in [9] $end
$var wire 1 )& data_in [8] $end
$var wire 1 *& data_in [7] $end
$var wire 1 +& data_in [6] $end
$var wire 1 ,& data_in [5] $end
$var wire 1 -& data_in [4] $end
$var wire 1 .& data_in [3] $end
$var wire 1 /& data_in [2] $end
$var wire 1 0& data_in [1] $end
$var wire 1 1& data_in [0] $end
$var wire 1 ~! state [15] $end
$var wire 1 !" state [14] $end
$var wire 1 "" state [13] $end
$var wire 1 #" state [12] $end
$var wire 1 $" state [11] $end
$var wire 1 %" state [10] $end
$var wire 1 &" state [9] $end
$var wire 1 '" state [8] $end
$var wire 1 (" state [7] $end
$var wire 1 )" state [6] $end
$var wire 1 *" state [5] $end
$var wire 1 +" state [4] $end
$var wire 1 ," state [3] $end
$var wire 1 -" state [2] $end
$var wire 1 ." state [1] $end
$var wire 1 /" state [0] $end

$scope module dff0 $end
$var wire 1 B& en $end
$var wire 1 1& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 /" q $end
$var wire 1 C& data $end

$scope module DFF $end
$var wire 1 /" q $end
$var wire 1 C& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 D& state $end
$upscope $end
$upscope $end

$scope module dff1 $end
$var wire 1 B& en $end
$var wire 1 0& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ." q $end
$var wire 1 E& data $end

$scope module DFF $end
$var wire 1 ." q $end
$var wire 1 E& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F& state $end
$upscope $end
$upscope $end

$scope module dff2 $end
$var wire 1 B& en $end
$var wire 1 /& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 -" q $end
$var wire 1 G& data $end

$scope module DFF $end
$var wire 1 -" q $end
$var wire 1 G& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H& state $end
$upscope $end
$upscope $end

$scope module dff3 $end
$var wire 1 B& en $end
$var wire 1 .& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ," q $end
$var wire 1 I& data $end

$scope module DFF $end
$var wire 1 ," q $end
$var wire 1 I& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 J& state $end
$upscope $end
$upscope $end

$scope module dff4 $end
$var wire 1 B& en $end
$var wire 1 -& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 +" q $end
$var wire 1 K& data $end

$scope module DFF $end
$var wire 1 +" q $end
$var wire 1 K& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 L& state $end
$upscope $end
$upscope $end

$scope module dff5 $end
$var wire 1 B& en $end
$var wire 1 ,& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 *" q $end
$var wire 1 M& data $end

$scope module DFF $end
$var wire 1 *" q $end
$var wire 1 M& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N& state $end
$upscope $end
$upscope $end

$scope module dff6 $end
$var wire 1 B& en $end
$var wire 1 +& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 )" q $end
$var wire 1 O& data $end

$scope module DFF $end
$var wire 1 )" q $end
$var wire 1 O& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 P& state $end
$upscope $end
$upscope $end

$scope module dff7 $end
$var wire 1 B& en $end
$var wire 1 *& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 (" q $end
$var wire 1 Q& data $end

$scope module DFF $end
$var wire 1 (" q $end
$var wire 1 Q& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 R& state $end
$upscope $end
$upscope $end

$scope module dff8 $end
$var wire 1 B& en $end
$var wire 1 )& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 '" q $end
$var wire 1 S& data $end

$scope module DFF $end
$var wire 1 '" q $end
$var wire 1 S& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 T& state $end
$upscope $end
$upscope $end

$scope module dff9 $end
$var wire 1 B& en $end
$var wire 1 (& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 &" q $end
$var wire 1 U& data $end

$scope module DFF $end
$var wire 1 &" q $end
$var wire 1 U& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V& state $end
$upscope $end
$upscope $end

$scope module dff10 $end
$var wire 1 B& en $end
$var wire 1 '& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 %" q $end
$var wire 1 W& data $end

$scope module DFF $end
$var wire 1 %" q $end
$var wire 1 W& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 X& state $end
$upscope $end
$upscope $end

$scope module dff11 $end
$var wire 1 B& en $end
$var wire 1 && d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 $" q $end
$var wire 1 Y& data $end

$scope module DFF $end
$var wire 1 $" q $end
$var wire 1 Y& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Z& state $end
$upscope $end
$upscope $end

$scope module dff12 $end
$var wire 1 B& en $end
$var wire 1 %& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 #" q $end
$var wire 1 [& data $end

$scope module DFF $end
$var wire 1 #" q $end
$var wire 1 [& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \& state $end
$upscope $end
$upscope $end

$scope module dff13 $end
$var wire 1 B& en $end
$var wire 1 $& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 "" q $end
$var wire 1 ]& data $end

$scope module DFF $end
$var wire 1 "" q $end
$var wire 1 ]& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^& state $end
$upscope $end
$upscope $end

$scope module dff14 $end
$var wire 1 B& en $end
$var wire 1 #& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 !" q $end
$var wire 1 _& data $end

$scope module DFF $end
$var wire 1 !" q $end
$var wire 1 _& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `& state $end
$upscope $end
$upscope $end

$scope module dff15 $end
$var wire 1 B& en $end
$var wire 1 "& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~! q $end
$var wire 1 a& data $end

$scope module DFF $end
$var wire 1 ~! q $end
$var wire 1 a& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 b& state $end
$upscope $end
$upscope $end
$upscope $end

$scope module fetch0 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~! currPC [15] $end
$var wire 1 !" currPC [14] $end
$var wire 1 "" currPC [13] $end
$var wire 1 #" currPC [12] $end
$var wire 1 $" currPC [11] $end
$var wire 1 %" currPC [10] $end
$var wire 1 &" currPC [9] $end
$var wire 1 '" currPC [8] $end
$var wire 1 (" currPC [7] $end
$var wire 1 )" currPC [6] $end
$var wire 1 *" currPC [5] $end
$var wire 1 +" currPC [4] $end
$var wire 1 ," currPC [3] $end
$var wire 1 -" currPC [2] $end
$var wire 1 ." currPC [1] $end
$var wire 1 /" currPC [0] $end
$var wire 1 @" nextPC [15] $end
$var wire 1 A" nextPC [14] $end
$var wire 1 B" nextPC [13] $end
$var wire 1 C" nextPC [12] $end
$var wire 1 D" nextPC [11] $end
$var wire 1 E" nextPC [10] $end
$var wire 1 F" nextPC [9] $end
$var wire 1 G" nextPC [8] $end
$var wire 1 H" nextPC [7] $end
$var wire 1 I" nextPC [6] $end
$var wire 1 J" nextPC [5] $end
$var wire 1 K" nextPC [4] $end
$var wire 1 L" nextPC [3] $end
$var wire 1 M" nextPC [2] $end
$var wire 1 N" nextPC [1] $end
$var wire 1 O" nextPC [0] $end
$var wire 1 P" instruction [15] $end
$var wire 1 Q" instruction [14] $end
$var wire 1 R" instruction [13] $end
$var wire 1 S" instruction [12] $end
$var wire 1 T" instruction [11] $end
$var wire 1 U" instruction [10] $end
$var wire 1 V" instruction [9] $end
$var wire 1 W" instruction [8] $end
$var wire 1 X" instruction [7] $end
$var wire 1 Y" instruction [6] $end
$var wire 1 Z" instruction [5] $end
$var wire 1 [" instruction [4] $end
$var wire 1 \" instruction [3] $end
$var wire 1 ]" instruction [2] $end
$var wire 1 ^" instruction [1] $end
$var wire 1 _" instruction [0] $end
$var wire 1 c& pc_plus_2 [15] $end
$var wire 1 d& pc_plus_2 [14] $end
$var wire 1 e& pc_plus_2 [13] $end
$var wire 1 f& pc_plus_2 [12] $end
$var wire 1 g& pc_plus_2 [11] $end
$var wire 1 h& pc_plus_2 [10] $end
$var wire 1 i& pc_plus_2 [9] $end
$var wire 1 j& pc_plus_2 [8] $end
$var wire 1 k& pc_plus_2 [7] $end
$var wire 1 l& pc_plus_2 [6] $end
$var wire 1 m& pc_plus_2 [5] $end
$var wire 1 n& pc_plus_2 [4] $end
$var wire 1 o& pc_plus_2 [3] $end
$var wire 1 p& pc_plus_2 [2] $end
$var wire 1 q& pc_plus_2 [1] $end
$var wire 1 r& pc_plus_2 [0] $end
$var wire 1 s& new_instr [15] $end
$var wire 1 t& new_instr [14] $end
$var wire 1 u& new_instr [13] $end
$var wire 1 v& new_instr [12] $end
$var wire 1 w& new_instr [11] $end
$var wire 1 x& new_instr [10] $end
$var wire 1 y& new_instr [9] $end
$var wire 1 z& new_instr [8] $end
$var wire 1 {& new_instr [7] $end
$var wire 1 |& new_instr [6] $end
$var wire 1 }& new_instr [5] $end
$var wire 1 ~& new_instr [4] $end
$var wire 1 !' new_instr [3] $end
$var wire 1 "' new_instr [2] $end
$var wire 1 #' new_instr [1] $end
$var wire 1 $' new_instr [0] $end

$scope module INSTR_MEM $end
$var wire 1 s& data_out [15] $end
$var wire 1 t& data_out [14] $end
$var wire 1 u& data_out [13] $end
$var wire 1 v& data_out [12] $end
$var wire 1 w& data_out [11] $end
$var wire 1 x& data_out [10] $end
$var wire 1 y& data_out [9] $end
$var wire 1 z& data_out [8] $end
$var wire 1 {& data_out [7] $end
$var wire 1 |& data_out [6] $end
$var wire 1 }& data_out [5] $end
$var wire 1 ~& data_out [4] $end
$var wire 1 !' data_out [3] $end
$var wire 1 "' data_out [2] $end
$var wire 1 #' data_out [1] $end
$var wire 1 $' data_out [0] $end
$var wire 1 %' data_in [15] $end
$var wire 1 &' data_in [14] $end
$var wire 1 '' data_in [13] $end
$var wire 1 (' data_in [12] $end
$var wire 1 )' data_in [11] $end
$var wire 1 *' data_in [10] $end
$var wire 1 +' data_in [9] $end
$var wire 1 ,' data_in [8] $end
$var wire 1 -' data_in [7] $end
$var wire 1 .' data_in [6] $end
$var wire 1 /' data_in [5] $end
$var wire 1 0' data_in [4] $end
$var wire 1 1' data_in [3] $end
$var wire 1 2' data_in [2] $end
$var wire 1 3' data_in [1] $end
$var wire 1 4' data_in [0] $end
$var wire 1 ~! addr [15] $end
$var wire 1 !" addr [14] $end
$var wire 1 "" addr [13] $end
$var wire 1 #" addr [12] $end
$var wire 1 $" addr [11] $end
$var wire 1 %" addr [10] $end
$var wire 1 &" addr [9] $end
$var wire 1 '" addr [8] $end
$var wire 1 (" addr [7] $end
$var wire 1 )" addr [6] $end
$var wire 1 *" addr [5] $end
$var wire 1 +" addr [4] $end
$var wire 1 ," addr [3] $end
$var wire 1 -" addr [2] $end
$var wire 1 ." addr [1] $end
$var wire 1 /" addr [0] $end
$var wire 1 5' enable $end
$var wire 1 6' wr $end
$var wire 1 7' createdump $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 8' loaded $end
$var reg 17 9' largest [16:0] $end
$var integer 32 :' mcd $end
$var integer 32 ;' i $end
$upscope $end

$scope module ADDER $end
$var parameter 32 <' N $end
$var wire 1 ~! A [15] $end
$var wire 1 !" A [14] $end
$var wire 1 "" A [13] $end
$var wire 1 #" A [12] $end
$var wire 1 $" A [11] $end
$var wire 1 %" A [10] $end
$var wire 1 &" A [9] $end
$var wire 1 '" A [8] $end
$var wire 1 (" A [7] $end
$var wire 1 )" A [6] $end
$var wire 1 *" A [5] $end
$var wire 1 +" A [4] $end
$var wire 1 ," A [3] $end
$var wire 1 -" A [2] $end
$var wire 1 ." A [1] $end
$var wire 1 /" A [0] $end
$var wire 1 =' B [15] $end
$var wire 1 >' B [14] $end
$var wire 1 ?' B [13] $end
$var wire 1 @' B [12] $end
$var wire 1 A' B [11] $end
$var wire 1 B' B [10] $end
$var wire 1 C' B [9] $end
$var wire 1 D' B [8] $end
$var wire 1 E' B [7] $end
$var wire 1 F' B [6] $end
$var wire 1 G' B [5] $end
$var wire 1 H' B [4] $end
$var wire 1 I' B [3] $end
$var wire 1 J' B [2] $end
$var wire 1 K' B [1] $end
$var wire 1 L' B [0] $end
$var wire 1 M' C_in $end
$var wire 1 c& S [15] $end
$var wire 1 d& S [14] $end
$var wire 1 e& S [13] $end
$var wire 1 f& S [12] $end
$var wire 1 g& S [11] $end
$var wire 1 h& S [10] $end
$var wire 1 i& S [9] $end
$var wire 1 j& S [8] $end
$var wire 1 k& S [7] $end
$var wire 1 l& S [6] $end
$var wire 1 m& S [5] $end
$var wire 1 n& S [4] $end
$var wire 1 o& S [3] $end
$var wire 1 p& S [2] $end
$var wire 1 q& S [1] $end
$var wire 1 r& S [0] $end
$var wire 1 N' C_out $end
$var wire 1 O' C_out0 $end
$var wire 1 P' C_out1 $end
$var wire 1 Q' C_out2 $end
$var wire 1 R' G0 $end
$var wire 1 S' P0 $end
$var wire 1 T' G1 $end
$var wire 1 U' P1 $end
$var wire 1 V' G2 $end
$var wire 1 W' P2 $end
$var wire 1 X' G3 $end
$var wire 1 Y' P3 $end
$var wire 1 Z' C_in1 $end
$var wire 1 [' C_in2 $end
$var wire 1 \' C_in3 $end

$scope module cla_4_1 $end
$var parameter 32 ]' N $end
$var wire 1 ," A [3] $end
$var wire 1 -" A [2] $end
$var wire 1 ." A [1] $end
$var wire 1 /" A [0] $end
$var wire 1 I' B [3] $end
$var wire 1 J' B [2] $end
$var wire 1 K' B [1] $end
$var wire 1 L' B [0] $end
$var wire 1 M' C_in $end
$var wire 1 o& S [3] $end
$var wire 1 p& S [2] $end
$var wire 1 q& S [1] $end
$var wire 1 r& S [0] $end
$var wire 1 O' C_out $end
$var wire 1 R' G $end
$var wire 1 S' P $end
$var wire 1 ^' C_out0 $end
$var wire 1 _' C_out1 $end
$var wire 1 `' C_out2 $end

$scope module carryLogic0 $end
$var wire 1 /" A $end
$var wire 1 L' B $end
$var wire 1 M' Cin $end
$var wire 1 ^' C_out $end
$var wire 1 a' P $end
$var wire 1 b' G $end
$var wire 1 c' G_inv $end
$var wire 1 d' P_nor $end
$var wire 1 e' C_out_1 $end

$scope module nand_G $end
$var wire 1 /" in1 $end
$var wire 1 L' in2 $end
$var wire 1 c' out $end
$upscope $end

$scope module not_1 $end
$var wire 1 c' in1 $end
$var wire 1 b' out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 /" in1 $end
$var wire 1 L' in2 $end
$var wire 1 d' out $end
$upscope $end

$scope module not_2 $end
$var wire 1 d' in1 $end
$var wire 1 a' out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 a' in1 $end
$var wire 1 M' in2 $end
$var wire 1 e' out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 c' in1 $end
$var wire 1 e' in2 $end
$var wire 1 ^' out $end
$upscope $end
$upscope $end

$scope module fullAdder0 $end
$var wire 1 /" A $end
$var wire 1 L' B $end
$var wire 1 M' C_in $end
$var wire 1 r& S $end
$var wire 1 f' C_out $end
$var wire 1 g' nand1_out $end
$var wire 1 h' nand2_out $end
$var wire 1 i' nand3_out $end

$scope module nand1 $end
$var wire 1 /" in1 $end
$var wire 1 L' in2 $end
$var wire 1 g' out $end
$upscope $end

$scope module nand2 $end
$var wire 1 L' in1 $end
$var wire 1 M' in2 $end
$var wire 1 h' out $end
$upscope $end

$scope module nand3 $end
$var wire 1 /" in1 $end
$var wire 1 M' in2 $end
$var wire 1 i' out $end
$upscope $end

$scope module nand_out $end
$var wire 1 g' in1 $end
$var wire 1 h' in2 $end
$var wire 1 i' in3 $end
$var wire 1 f' out $end
$upscope $end

$scope module xor1 $end
$var wire 1 /" in1 $end
$var wire 1 L' in2 $end
$var wire 1 M' in3 $end
$var wire 1 r& out $end
$upscope $end
$upscope $end

$scope module carryLogic1 $end
$var wire 1 ." A $end
$var wire 1 K' B $end
$var wire 1 ^' Cin $end
$var wire 1 _' C_out $end
$var wire 1 j' P $end
$var wire 1 k' G $end
$var wire 1 l' G_inv $end
$var wire 1 m' P_nor $end
$var wire 1 n' C_out_1 $end

$scope module nand_G $end
$var wire 1 ." in1 $end
$var wire 1 K' in2 $end
$var wire 1 l' out $end
$upscope $end

$scope module not_1 $end
$var wire 1 l' in1 $end
$var wire 1 k' out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 ." in1 $end
$var wire 1 K' in2 $end
$var wire 1 m' out $end
$upscope $end

$scope module not_2 $end
$var wire 1 m' in1 $end
$var wire 1 j' out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 j' in1 $end
$var wire 1 ^' in2 $end
$var wire 1 n' out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 l' in1 $end
$var wire 1 n' in2 $end
$var wire 1 _' out $end
$upscope $end
$upscope $end

$scope module fullAdder1 $end
$var wire 1 ." A $end
$var wire 1 K' B $end
$var wire 1 ^' C_in $end
$var wire 1 q& S $end
$var wire 1 o' C_out $end
$var wire 1 p' nand1_out $end
$var wire 1 q' nand2_out $end
$var wire 1 r' nand3_out $end

$scope module nand1 $end
$var wire 1 ." in1 $end
$var wire 1 K' in2 $end
$var wire 1 p' out $end
$upscope $end

$scope module nand2 $end
$var wire 1 K' in1 $end
$var wire 1 ^' in2 $end
$var wire 1 q' out $end
$upscope $end

$scope module nand3 $end
$var wire 1 ." in1 $end
$var wire 1 ^' in2 $end
$var wire 1 r' out $end
$upscope $end

$scope module nand_out $end
$var wire 1 p' in1 $end
$var wire 1 q' in2 $end
$var wire 1 r' in3 $end
$var wire 1 o' out $end
$upscope $end

$scope module xor1 $end
$var wire 1 ." in1 $end
$var wire 1 K' in2 $end
$var wire 1 ^' in3 $end
$var wire 1 q& out $end
$upscope $end
$upscope $end

$scope module carryLogic2 $end
$var wire 1 -" A $end
$var wire 1 J' B $end
$var wire 1 _' Cin $end
$var wire 1 `' C_out $end
$var wire 1 s' P $end
$var wire 1 t' G $end
$var wire 1 u' G_inv $end
$var wire 1 v' P_nor $end
$var wire 1 w' C_out_1 $end

$scope module nand_G $end
$var wire 1 -" in1 $end
$var wire 1 J' in2 $end
$var wire 1 u' out $end
$upscope $end

$scope module not_1 $end
$var wire 1 u' in1 $end
$var wire 1 t' out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 -" in1 $end
$var wire 1 J' in2 $end
$var wire 1 v' out $end
$upscope $end

$scope module not_2 $end
$var wire 1 v' in1 $end
$var wire 1 s' out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 s' in1 $end
$var wire 1 _' in2 $end
$var wire 1 w' out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 u' in1 $end
$var wire 1 w' in2 $end
$var wire 1 `' out $end
$upscope $end
$upscope $end

$scope module fullAdder2 $end
$var wire 1 -" A $end
$var wire 1 J' B $end
$var wire 1 _' C_in $end
$var wire 1 p& S $end
$var wire 1 x' C_out $end
$var wire 1 y' nand1_out $end
$var wire 1 z' nand2_out $end
$var wire 1 {' nand3_out $end

$scope module nand1 $end
$var wire 1 -" in1 $end
$var wire 1 J' in2 $end
$var wire 1 y' out $end
$upscope $end

$scope module nand2 $end
$var wire 1 J' in1 $end
$var wire 1 _' in2 $end
$var wire 1 z' out $end
$upscope $end

$scope module nand3 $end
$var wire 1 -" in1 $end
$var wire 1 _' in2 $end
$var wire 1 {' out $end
$upscope $end

$scope module nand_out $end
$var wire 1 y' in1 $end
$var wire 1 z' in2 $end
$var wire 1 {' in3 $end
$var wire 1 x' out $end
$upscope $end

$scope module xor1 $end
$var wire 1 -" in1 $end
$var wire 1 J' in2 $end
$var wire 1 _' in3 $end
$var wire 1 p& out $end
$upscope $end
$upscope $end

$scope module carryLogic3 $end
$var wire 1 ," A $end
$var wire 1 I' B $end
$var wire 1 `' Cin $end
$var wire 1 O' C_out $end
$var wire 1 S' P $end
$var wire 1 R' G $end
$var wire 1 |' G_inv $end
$var wire 1 }' P_nor $end
$var wire 1 ~' C_out_1 $end

$scope module nand_G $end
$var wire 1 ," in1 $end
$var wire 1 I' in2 $end
$var wire 1 |' out $end
$upscope $end

$scope module not_1 $end
$var wire 1 |' in1 $end
$var wire 1 R' out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 ," in1 $end
$var wire 1 I' in2 $end
$var wire 1 }' out $end
$upscope $end

$scope module not_2 $end
$var wire 1 }' in1 $end
$var wire 1 S' out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 S' in1 $end
$var wire 1 `' in2 $end
$var wire 1 ~' out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 |' in1 $end
$var wire 1 ~' in2 $end
$var wire 1 O' out $end
$upscope $end
$upscope $end

$scope module fullAdder3 $end
$var wire 1 ," A $end
$var wire 1 I' B $end
$var wire 1 `' C_in $end
$var wire 1 o& S $end
$var wire 1 !( C_out $end
$var wire 1 "( nand1_out $end
$var wire 1 #( nand2_out $end
$var wire 1 $( nand3_out $end

$scope module nand1 $end
$var wire 1 ," in1 $end
$var wire 1 I' in2 $end
$var wire 1 "( out $end
$upscope $end

$scope module nand2 $end
$var wire 1 I' in1 $end
$var wire 1 `' in2 $end
$var wire 1 #( out $end
$upscope $end

$scope module nand3 $end
$var wire 1 ," in1 $end
$var wire 1 `' in2 $end
$var wire 1 $( out $end
$upscope $end

$scope module nand_out $end
$var wire 1 "( in1 $end
$var wire 1 #( in2 $end
$var wire 1 $( in3 $end
$var wire 1 !( out $end
$upscope $end

$scope module xor1 $end
$var wire 1 ," in1 $end
$var wire 1 I' in2 $end
$var wire 1 `' in3 $end
$var wire 1 o& out $end
$upscope $end
$upscope $end
$upscope $end

$scope module compute1 $end
$var wire 1 S' P $end
$var wire 1 R' G $end
$var wire 1 O' C_in_prev $end
$var wire 1 Z' C_in $end
$var wire 1 %( G_in $end
$var wire 1 &( C_out_1 $end
$var wire 1 '( G_inv $end

$scope module not1 $end
$var wire 1 R' in1 $end
$var wire 1 '( out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 S' in1 $end
$var wire 1 O' in2 $end
$var wire 1 &( out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 '( in1 $end
$var wire 1 &( in2 $end
$var wire 1 Z' out $end
$upscope $end
$upscope $end

$scope module cla_4_2 $end
$var parameter 32 (( N $end
$var wire 1 (" A [3] $end
$var wire 1 )" A [2] $end
$var wire 1 *" A [1] $end
$var wire 1 +" A [0] $end
$var wire 1 E' B [3] $end
$var wire 1 F' B [2] $end
$var wire 1 G' B [1] $end
$var wire 1 H' B [0] $end
$var wire 1 Z' C_in $end
$var wire 1 k& S [3] $end
$var wire 1 l& S [2] $end
$var wire 1 m& S [1] $end
$var wire 1 n& S [0] $end
$var wire 1 P' C_out $end
$var wire 1 T' G $end
$var wire 1 U' P $end
$var wire 1 )( C_out0 $end
$var wire 1 *( C_out1 $end
$var wire 1 +( C_out2 $end

$scope module carryLogic0 $end
$var wire 1 +" A $end
$var wire 1 H' B $end
$var wire 1 Z' Cin $end
$var wire 1 )( C_out $end
$var wire 1 ,( P $end
$var wire 1 -( G $end
$var wire 1 .( G_inv $end
$var wire 1 /( P_nor $end
$var wire 1 0( C_out_1 $end

$scope module nand_G $end
$var wire 1 +" in1 $end
$var wire 1 H' in2 $end
$var wire 1 .( out $end
$upscope $end

$scope module not_1 $end
$var wire 1 .( in1 $end
$var wire 1 -( out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 +" in1 $end
$var wire 1 H' in2 $end
$var wire 1 /( out $end
$upscope $end

$scope module not_2 $end
$var wire 1 /( in1 $end
$var wire 1 ,( out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 ,( in1 $end
$var wire 1 Z' in2 $end
$var wire 1 0( out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 .( in1 $end
$var wire 1 0( in2 $end
$var wire 1 )( out $end
$upscope $end
$upscope $end

$scope module fullAdder0 $end
$var wire 1 +" A $end
$var wire 1 H' B $end
$var wire 1 Z' C_in $end
$var wire 1 n& S $end
$var wire 1 1( C_out $end
$var wire 1 2( nand1_out $end
$var wire 1 3( nand2_out $end
$var wire 1 4( nand3_out $end

$scope module nand1 $end
$var wire 1 +" in1 $end
$var wire 1 H' in2 $end
$var wire 1 2( out $end
$upscope $end

$scope module nand2 $end
$var wire 1 H' in1 $end
$var wire 1 Z' in2 $end
$var wire 1 3( out $end
$upscope $end

$scope module nand3 $end
$var wire 1 +" in1 $end
$var wire 1 Z' in2 $end
$var wire 1 4( out $end
$upscope $end

$scope module nand_out $end
$var wire 1 2( in1 $end
$var wire 1 3( in2 $end
$var wire 1 4( in3 $end
$var wire 1 1( out $end
$upscope $end

$scope module xor1 $end
$var wire 1 +" in1 $end
$var wire 1 H' in2 $end
$var wire 1 Z' in3 $end
$var wire 1 n& out $end
$upscope $end
$upscope $end

$scope module carryLogic1 $end
$var wire 1 *" A $end
$var wire 1 G' B $end
$var wire 1 )( Cin $end
$var wire 1 *( C_out $end
$var wire 1 5( P $end
$var wire 1 6( G $end
$var wire 1 7( G_inv $end
$var wire 1 8( P_nor $end
$var wire 1 9( C_out_1 $end

$scope module nand_G $end
$var wire 1 *" in1 $end
$var wire 1 G' in2 $end
$var wire 1 7( out $end
$upscope $end

$scope module not_1 $end
$var wire 1 7( in1 $end
$var wire 1 6( out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 *" in1 $end
$var wire 1 G' in2 $end
$var wire 1 8( out $end
$upscope $end

$scope module not_2 $end
$var wire 1 8( in1 $end
$var wire 1 5( out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 5( in1 $end
$var wire 1 )( in2 $end
$var wire 1 9( out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 7( in1 $end
$var wire 1 9( in2 $end
$var wire 1 *( out $end
$upscope $end
$upscope $end

$scope module fullAdder1 $end
$var wire 1 *" A $end
$var wire 1 G' B $end
$var wire 1 )( C_in $end
$var wire 1 m& S $end
$var wire 1 :( C_out $end
$var wire 1 ;( nand1_out $end
$var wire 1 <( nand2_out $end
$var wire 1 =( nand3_out $end

$scope module nand1 $end
$var wire 1 *" in1 $end
$var wire 1 G' in2 $end
$var wire 1 ;( out $end
$upscope $end

$scope module nand2 $end
$var wire 1 G' in1 $end
$var wire 1 )( in2 $end
$var wire 1 <( out $end
$upscope $end

$scope module nand3 $end
$var wire 1 *" in1 $end
$var wire 1 )( in2 $end
$var wire 1 =( out $end
$upscope $end

$scope module nand_out $end
$var wire 1 ;( in1 $end
$var wire 1 <( in2 $end
$var wire 1 =( in3 $end
$var wire 1 :( out $end
$upscope $end

$scope module xor1 $end
$var wire 1 *" in1 $end
$var wire 1 G' in2 $end
$var wire 1 )( in3 $end
$var wire 1 m& out $end
$upscope $end
$upscope $end

$scope module carryLogic2 $end
$var wire 1 )" A $end
$var wire 1 F' B $end
$var wire 1 *( Cin $end
$var wire 1 +( C_out $end
$var wire 1 >( P $end
$var wire 1 ?( G $end
$var wire 1 @( G_inv $end
$var wire 1 A( P_nor $end
$var wire 1 B( C_out_1 $end

$scope module nand_G $end
$var wire 1 )" in1 $end
$var wire 1 F' in2 $end
$var wire 1 @( out $end
$upscope $end

$scope module not_1 $end
$var wire 1 @( in1 $end
$var wire 1 ?( out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 )" in1 $end
$var wire 1 F' in2 $end
$var wire 1 A( out $end
$upscope $end

$scope module not_2 $end
$var wire 1 A( in1 $end
$var wire 1 >( out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 >( in1 $end
$var wire 1 *( in2 $end
$var wire 1 B( out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 @( in1 $end
$var wire 1 B( in2 $end
$var wire 1 +( out $end
$upscope $end
$upscope $end

$scope module fullAdder2 $end
$var wire 1 )" A $end
$var wire 1 F' B $end
$var wire 1 *( C_in $end
$var wire 1 l& S $end
$var wire 1 C( C_out $end
$var wire 1 D( nand1_out $end
$var wire 1 E( nand2_out $end
$var wire 1 F( nand3_out $end

$scope module nand1 $end
$var wire 1 )" in1 $end
$var wire 1 F' in2 $end
$var wire 1 D( out $end
$upscope $end

$scope module nand2 $end
$var wire 1 F' in1 $end
$var wire 1 *( in2 $end
$var wire 1 E( out $end
$upscope $end

$scope module nand3 $end
$var wire 1 )" in1 $end
$var wire 1 *( in2 $end
$var wire 1 F( out $end
$upscope $end

$scope module nand_out $end
$var wire 1 D( in1 $end
$var wire 1 E( in2 $end
$var wire 1 F( in3 $end
$var wire 1 C( out $end
$upscope $end

$scope module xor1 $end
$var wire 1 )" in1 $end
$var wire 1 F' in2 $end
$var wire 1 *( in3 $end
$var wire 1 l& out $end
$upscope $end
$upscope $end

$scope module carryLogic3 $end
$var wire 1 (" A $end
$var wire 1 E' B $end
$var wire 1 +( Cin $end
$var wire 1 P' C_out $end
$var wire 1 U' P $end
$var wire 1 T' G $end
$var wire 1 G( G_inv $end
$var wire 1 H( P_nor $end
$var wire 1 I( C_out_1 $end

$scope module nand_G $end
$var wire 1 (" in1 $end
$var wire 1 E' in2 $end
$var wire 1 G( out $end
$upscope $end

$scope module not_1 $end
$var wire 1 G( in1 $end
$var wire 1 T' out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 (" in1 $end
$var wire 1 E' in2 $end
$var wire 1 H( out $end
$upscope $end

$scope module not_2 $end
$var wire 1 H( in1 $end
$var wire 1 U' out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 U' in1 $end
$var wire 1 +( in2 $end
$var wire 1 I( out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 G( in1 $end
$var wire 1 I( in2 $end
$var wire 1 P' out $end
$upscope $end
$upscope $end

$scope module fullAdder3 $end
$var wire 1 (" A $end
$var wire 1 E' B $end
$var wire 1 +( C_in $end
$var wire 1 k& S $end
$var wire 1 J( C_out $end
$var wire 1 K( nand1_out $end
$var wire 1 L( nand2_out $end
$var wire 1 M( nand3_out $end

$scope module nand1 $end
$var wire 1 (" in1 $end
$var wire 1 E' in2 $end
$var wire 1 K( out $end
$upscope $end

$scope module nand2 $end
$var wire 1 E' in1 $end
$var wire 1 +( in2 $end
$var wire 1 L( out $end
$upscope $end

$scope module nand3 $end
$var wire 1 (" in1 $end
$var wire 1 +( in2 $end
$var wire 1 M( out $end
$upscope $end

$scope module nand_out $end
$var wire 1 K( in1 $end
$var wire 1 L( in2 $end
$var wire 1 M( in3 $end
$var wire 1 J( out $end
$upscope $end

$scope module xor1 $end
$var wire 1 (" in1 $end
$var wire 1 E' in2 $end
$var wire 1 +( in3 $end
$var wire 1 k& out $end
$upscope $end
$upscope $end
$upscope $end

$scope module compute2 $end
$var wire 1 U' P $end
$var wire 1 T' G $end
$var wire 1 P' C_in_prev $end
$var wire 1 [' C_in $end
$var wire 1 N( G_in $end
$var wire 1 O( C_out_1 $end
$var wire 1 P( G_inv $end

$scope module not1 $end
$var wire 1 T' in1 $end
$var wire 1 P( out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 U' in1 $end
$var wire 1 P' in2 $end
$var wire 1 O( out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 P( in1 $end
$var wire 1 O( in2 $end
$var wire 1 [' out $end
$upscope $end
$upscope $end

$scope module cla_4_3 $end
$var parameter 32 Q( N $end
$var wire 1 $" A [3] $end
$var wire 1 %" A [2] $end
$var wire 1 &" A [1] $end
$var wire 1 '" A [0] $end
$var wire 1 A' B [3] $end
$var wire 1 B' B [2] $end
$var wire 1 C' B [1] $end
$var wire 1 D' B [0] $end
$var wire 1 [' C_in $end
$var wire 1 g& S [3] $end
$var wire 1 h& S [2] $end
$var wire 1 i& S [1] $end
$var wire 1 j& S [0] $end
$var wire 1 Q' C_out $end
$var wire 1 V' G $end
$var wire 1 W' P $end
$var wire 1 R( C_out0 $end
$var wire 1 S( C_out1 $end
$var wire 1 T( C_out2 $end

$scope module carryLogic0 $end
$var wire 1 '" A $end
$var wire 1 D' B $end
$var wire 1 [' Cin $end
$var wire 1 R( C_out $end
$var wire 1 U( P $end
$var wire 1 V( G $end
$var wire 1 W( G_inv $end
$var wire 1 X( P_nor $end
$var wire 1 Y( C_out_1 $end

$scope module nand_G $end
$var wire 1 '" in1 $end
$var wire 1 D' in2 $end
$var wire 1 W( out $end
$upscope $end

$scope module not_1 $end
$var wire 1 W( in1 $end
$var wire 1 V( out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 '" in1 $end
$var wire 1 D' in2 $end
$var wire 1 X( out $end
$upscope $end

$scope module not_2 $end
$var wire 1 X( in1 $end
$var wire 1 U( out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 U( in1 $end
$var wire 1 [' in2 $end
$var wire 1 Y( out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 W( in1 $end
$var wire 1 Y( in2 $end
$var wire 1 R( out $end
$upscope $end
$upscope $end

$scope module fullAdder0 $end
$var wire 1 '" A $end
$var wire 1 D' B $end
$var wire 1 [' C_in $end
$var wire 1 j& S $end
$var wire 1 Z( C_out $end
$var wire 1 [( nand1_out $end
$var wire 1 \( nand2_out $end
$var wire 1 ]( nand3_out $end

$scope module nand1 $end
$var wire 1 '" in1 $end
$var wire 1 D' in2 $end
$var wire 1 [( out $end
$upscope $end

$scope module nand2 $end
$var wire 1 D' in1 $end
$var wire 1 [' in2 $end
$var wire 1 \( out $end
$upscope $end

$scope module nand3 $end
$var wire 1 '" in1 $end
$var wire 1 [' in2 $end
$var wire 1 ]( out $end
$upscope $end

$scope module nand_out $end
$var wire 1 [( in1 $end
$var wire 1 \( in2 $end
$var wire 1 ]( in3 $end
$var wire 1 Z( out $end
$upscope $end

$scope module xor1 $end
$var wire 1 '" in1 $end
$var wire 1 D' in2 $end
$var wire 1 [' in3 $end
$var wire 1 j& out $end
$upscope $end
$upscope $end

$scope module carryLogic1 $end
$var wire 1 &" A $end
$var wire 1 C' B $end
$var wire 1 R( Cin $end
$var wire 1 S( C_out $end
$var wire 1 ^( P $end
$var wire 1 _( G $end
$var wire 1 `( G_inv $end
$var wire 1 a( P_nor $end
$var wire 1 b( C_out_1 $end

$scope module nand_G $end
$var wire 1 &" in1 $end
$var wire 1 C' in2 $end
$var wire 1 `( out $end
$upscope $end

$scope module not_1 $end
$var wire 1 `( in1 $end
$var wire 1 _( out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 &" in1 $end
$var wire 1 C' in2 $end
$var wire 1 a( out $end
$upscope $end

$scope module not_2 $end
$var wire 1 a( in1 $end
$var wire 1 ^( out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 ^( in1 $end
$var wire 1 R( in2 $end
$var wire 1 b( out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 `( in1 $end
$var wire 1 b( in2 $end
$var wire 1 S( out $end
$upscope $end
$upscope $end

$scope module fullAdder1 $end
$var wire 1 &" A $end
$var wire 1 C' B $end
$var wire 1 R( C_in $end
$var wire 1 i& S $end
$var wire 1 c( C_out $end
$var wire 1 d( nand1_out $end
$var wire 1 e( nand2_out $end
$var wire 1 f( nand3_out $end

$scope module nand1 $end
$var wire 1 &" in1 $end
$var wire 1 C' in2 $end
$var wire 1 d( out $end
$upscope $end

$scope module nand2 $end
$var wire 1 C' in1 $end
$var wire 1 R( in2 $end
$var wire 1 e( out $end
$upscope $end

$scope module nand3 $end
$var wire 1 &" in1 $end
$var wire 1 R( in2 $end
$var wire 1 f( out $end
$upscope $end

$scope module nand_out $end
$var wire 1 d( in1 $end
$var wire 1 e( in2 $end
$var wire 1 f( in3 $end
$var wire 1 c( out $end
$upscope $end

$scope module xor1 $end
$var wire 1 &" in1 $end
$var wire 1 C' in2 $end
$var wire 1 R( in3 $end
$var wire 1 i& out $end
$upscope $end
$upscope $end

$scope module carryLogic2 $end
$var wire 1 %" A $end
$var wire 1 B' B $end
$var wire 1 S( Cin $end
$var wire 1 T( C_out $end
$var wire 1 g( P $end
$var wire 1 h( G $end
$var wire 1 i( G_inv $end
$var wire 1 j( P_nor $end
$var wire 1 k( C_out_1 $end

$scope module nand_G $end
$var wire 1 %" in1 $end
$var wire 1 B' in2 $end
$var wire 1 i( out $end
$upscope $end

$scope module not_1 $end
$var wire 1 i( in1 $end
$var wire 1 h( out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 %" in1 $end
$var wire 1 B' in2 $end
$var wire 1 j( out $end
$upscope $end

$scope module not_2 $end
$var wire 1 j( in1 $end
$var wire 1 g( out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 g( in1 $end
$var wire 1 S( in2 $end
$var wire 1 k( out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 i( in1 $end
$var wire 1 k( in2 $end
$var wire 1 T( out $end
$upscope $end
$upscope $end

$scope module fullAdder2 $end
$var wire 1 %" A $end
$var wire 1 B' B $end
$var wire 1 S( C_in $end
$var wire 1 h& S $end
$var wire 1 l( C_out $end
$var wire 1 m( nand1_out $end
$var wire 1 n( nand2_out $end
$var wire 1 o( nand3_out $end

$scope module nand1 $end
$var wire 1 %" in1 $end
$var wire 1 B' in2 $end
$var wire 1 m( out $end
$upscope $end

$scope module nand2 $end
$var wire 1 B' in1 $end
$var wire 1 S( in2 $end
$var wire 1 n( out $end
$upscope $end

$scope module nand3 $end
$var wire 1 %" in1 $end
$var wire 1 S( in2 $end
$var wire 1 o( out $end
$upscope $end

$scope module nand_out $end
$var wire 1 m( in1 $end
$var wire 1 n( in2 $end
$var wire 1 o( in3 $end
$var wire 1 l( out $end
$upscope $end

$scope module xor1 $end
$var wire 1 %" in1 $end
$var wire 1 B' in2 $end
$var wire 1 S( in3 $end
$var wire 1 h& out $end
$upscope $end
$upscope $end

$scope module carryLogic3 $end
$var wire 1 $" A $end
$var wire 1 A' B $end
$var wire 1 T( Cin $end
$var wire 1 Q' C_out $end
$var wire 1 W' P $end
$var wire 1 V' G $end
$var wire 1 p( G_inv $end
$var wire 1 q( P_nor $end
$var wire 1 r( C_out_1 $end

$scope module nand_G $end
$var wire 1 $" in1 $end
$var wire 1 A' in2 $end
$var wire 1 p( out $end
$upscope $end

$scope module not_1 $end
$var wire 1 p( in1 $end
$var wire 1 V' out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 $" in1 $end
$var wire 1 A' in2 $end
$var wire 1 q( out $end
$upscope $end

$scope module not_2 $end
$var wire 1 q( in1 $end
$var wire 1 W' out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 W' in1 $end
$var wire 1 T( in2 $end
$var wire 1 r( out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 p( in1 $end
$var wire 1 r( in2 $end
$var wire 1 Q' out $end
$upscope $end
$upscope $end

$scope module fullAdder3 $end
$var wire 1 $" A $end
$var wire 1 A' B $end
$var wire 1 T( C_in $end
$var wire 1 g& S $end
$var wire 1 s( C_out $end
$var wire 1 t( nand1_out $end
$var wire 1 u( nand2_out $end
$var wire 1 v( nand3_out $end

$scope module nand1 $end
$var wire 1 $" in1 $end
$var wire 1 A' in2 $end
$var wire 1 t( out $end
$upscope $end

$scope module nand2 $end
$var wire 1 A' in1 $end
$var wire 1 T( in2 $end
$var wire 1 u( out $end
$upscope $end

$scope module nand3 $end
$var wire 1 $" in1 $end
$var wire 1 T( in2 $end
$var wire 1 v( out $end
$upscope $end

$scope module nand_out $end
$var wire 1 t( in1 $end
$var wire 1 u( in2 $end
$var wire 1 v( in3 $end
$var wire 1 s( out $end
$upscope $end

$scope module xor1 $end
$var wire 1 $" in1 $end
$var wire 1 A' in2 $end
$var wire 1 T( in3 $end
$var wire 1 g& out $end
$upscope $end
$upscope $end
$upscope $end

$scope module compute3 $end
$var wire 1 W' P $end
$var wire 1 V' G $end
$var wire 1 Q' C_in_prev $end
$var wire 1 \' C_in $end
$var wire 1 w( G_in $end
$var wire 1 x( C_out_1 $end
$var wire 1 y( G_inv $end

$scope module not1 $end
$var wire 1 V' in1 $end
$var wire 1 y( out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 W' in1 $end
$var wire 1 Q' in2 $end
$var wire 1 x( out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 y( in1 $end
$var wire 1 x( in2 $end
$var wire 1 \' out $end
$upscope $end
$upscope $end

$scope module cla_4_4 $end
$var parameter 32 z( N $end
$var wire 1 ~! A [3] $end
$var wire 1 !" A [2] $end
$var wire 1 "" A [1] $end
$var wire 1 #" A [0] $end
$var wire 1 =' B [3] $end
$var wire 1 >' B [2] $end
$var wire 1 ?' B [1] $end
$var wire 1 @' B [0] $end
$var wire 1 \' C_in $end
$var wire 1 c& S [3] $end
$var wire 1 d& S [2] $end
$var wire 1 e& S [1] $end
$var wire 1 f& S [0] $end
$var wire 1 N' C_out $end
$var wire 1 X' G $end
$var wire 1 Y' P $end
$var wire 1 {( C_out0 $end
$var wire 1 |( C_out1 $end
$var wire 1 }( C_out2 $end

$scope module carryLogic0 $end
$var wire 1 #" A $end
$var wire 1 @' B $end
$var wire 1 \' Cin $end
$var wire 1 {( C_out $end
$var wire 1 ~( P $end
$var wire 1 !) G $end
$var wire 1 ") G_inv $end
$var wire 1 #) P_nor $end
$var wire 1 $) C_out_1 $end

$scope module nand_G $end
$var wire 1 #" in1 $end
$var wire 1 @' in2 $end
$var wire 1 ") out $end
$upscope $end

$scope module not_1 $end
$var wire 1 ") in1 $end
$var wire 1 !) out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 #" in1 $end
$var wire 1 @' in2 $end
$var wire 1 #) out $end
$upscope $end

$scope module not_2 $end
$var wire 1 #) in1 $end
$var wire 1 ~( out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 ~( in1 $end
$var wire 1 \' in2 $end
$var wire 1 $) out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 ") in1 $end
$var wire 1 $) in2 $end
$var wire 1 {( out $end
$upscope $end
$upscope $end

$scope module fullAdder0 $end
$var wire 1 #" A $end
$var wire 1 @' B $end
$var wire 1 \' C_in $end
$var wire 1 f& S $end
$var wire 1 %) C_out $end
$var wire 1 &) nand1_out $end
$var wire 1 ') nand2_out $end
$var wire 1 () nand3_out $end

$scope module nand1 $end
$var wire 1 #" in1 $end
$var wire 1 @' in2 $end
$var wire 1 &) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 @' in1 $end
$var wire 1 \' in2 $end
$var wire 1 ') out $end
$upscope $end

$scope module nand3 $end
$var wire 1 #" in1 $end
$var wire 1 \' in2 $end
$var wire 1 () out $end
$upscope $end

$scope module nand_out $end
$var wire 1 &) in1 $end
$var wire 1 ') in2 $end
$var wire 1 () in3 $end
$var wire 1 %) out $end
$upscope $end

$scope module xor1 $end
$var wire 1 #" in1 $end
$var wire 1 @' in2 $end
$var wire 1 \' in3 $end
$var wire 1 f& out $end
$upscope $end
$upscope $end

$scope module carryLogic1 $end
$var wire 1 "" A $end
$var wire 1 ?' B $end
$var wire 1 {( Cin $end
$var wire 1 |( C_out $end
$var wire 1 )) P $end
$var wire 1 *) G $end
$var wire 1 +) G_inv $end
$var wire 1 ,) P_nor $end
$var wire 1 -) C_out_1 $end

$scope module nand_G $end
$var wire 1 "" in1 $end
$var wire 1 ?' in2 $end
$var wire 1 +) out $end
$upscope $end

$scope module not_1 $end
$var wire 1 +) in1 $end
$var wire 1 *) out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 "" in1 $end
$var wire 1 ?' in2 $end
$var wire 1 ,) out $end
$upscope $end

$scope module not_2 $end
$var wire 1 ,) in1 $end
$var wire 1 )) out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 )) in1 $end
$var wire 1 {( in2 $end
$var wire 1 -) out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 +) in1 $end
$var wire 1 -) in2 $end
$var wire 1 |( out $end
$upscope $end
$upscope $end

$scope module fullAdder1 $end
$var wire 1 "" A $end
$var wire 1 ?' B $end
$var wire 1 {( C_in $end
$var wire 1 e& S $end
$var wire 1 .) C_out $end
$var wire 1 /) nand1_out $end
$var wire 1 0) nand2_out $end
$var wire 1 1) nand3_out $end

$scope module nand1 $end
$var wire 1 "" in1 $end
$var wire 1 ?' in2 $end
$var wire 1 /) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ?' in1 $end
$var wire 1 {( in2 $end
$var wire 1 0) out $end
$upscope $end

$scope module nand3 $end
$var wire 1 "" in1 $end
$var wire 1 {( in2 $end
$var wire 1 1) out $end
$upscope $end

$scope module nand_out $end
$var wire 1 /) in1 $end
$var wire 1 0) in2 $end
$var wire 1 1) in3 $end
$var wire 1 .) out $end
$upscope $end

$scope module xor1 $end
$var wire 1 "" in1 $end
$var wire 1 ?' in2 $end
$var wire 1 {( in3 $end
$var wire 1 e& out $end
$upscope $end
$upscope $end

$scope module carryLogic2 $end
$var wire 1 !" A $end
$var wire 1 >' B $end
$var wire 1 |( Cin $end
$var wire 1 }( C_out $end
$var wire 1 2) P $end
$var wire 1 3) G $end
$var wire 1 4) G_inv $end
$var wire 1 5) P_nor $end
$var wire 1 6) C_out_1 $end

$scope module nand_G $end
$var wire 1 !" in1 $end
$var wire 1 >' in2 $end
$var wire 1 4) out $end
$upscope $end

$scope module not_1 $end
$var wire 1 4) in1 $end
$var wire 1 3) out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 !" in1 $end
$var wire 1 >' in2 $end
$var wire 1 5) out $end
$upscope $end

$scope module not_2 $end
$var wire 1 5) in1 $end
$var wire 1 2) out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 2) in1 $end
$var wire 1 |( in2 $end
$var wire 1 6) out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 4) in1 $end
$var wire 1 6) in2 $end
$var wire 1 }( out $end
$upscope $end
$upscope $end

$scope module fullAdder2 $end
$var wire 1 !" A $end
$var wire 1 >' B $end
$var wire 1 |( C_in $end
$var wire 1 d& S $end
$var wire 1 7) C_out $end
$var wire 1 8) nand1_out $end
$var wire 1 9) nand2_out $end
$var wire 1 :) nand3_out $end

$scope module nand1 $end
$var wire 1 !" in1 $end
$var wire 1 >' in2 $end
$var wire 1 8) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 >' in1 $end
$var wire 1 |( in2 $end
$var wire 1 9) out $end
$upscope $end

$scope module nand3 $end
$var wire 1 !" in1 $end
$var wire 1 |( in2 $end
$var wire 1 :) out $end
$upscope $end

$scope module nand_out $end
$var wire 1 8) in1 $end
$var wire 1 9) in2 $end
$var wire 1 :) in3 $end
$var wire 1 7) out $end
$upscope $end

$scope module xor1 $end
$var wire 1 !" in1 $end
$var wire 1 >' in2 $end
$var wire 1 |( in3 $end
$var wire 1 d& out $end
$upscope $end
$upscope $end

$scope module carryLogic3 $end
$var wire 1 ~! A $end
$var wire 1 =' B $end
$var wire 1 }( Cin $end
$var wire 1 N' C_out $end
$var wire 1 Y' P $end
$var wire 1 X' G $end
$var wire 1 ;) G_inv $end
$var wire 1 <) P_nor $end
$var wire 1 =) C_out_1 $end

$scope module nand_G $end
$var wire 1 ~! in1 $end
$var wire 1 =' in2 $end
$var wire 1 ;) out $end
$upscope $end

$scope module not_1 $end
$var wire 1 ;) in1 $end
$var wire 1 X' out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 ~! in1 $end
$var wire 1 =' in2 $end
$var wire 1 <) out $end
$upscope $end

$scope module not_2 $end
$var wire 1 <) in1 $end
$var wire 1 Y' out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 Y' in1 $end
$var wire 1 }( in2 $end
$var wire 1 =) out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 ;) in1 $end
$var wire 1 =) in2 $end
$var wire 1 N' out $end
$upscope $end
$upscope $end

$scope module fullAdder3 $end
$var wire 1 ~! A $end
$var wire 1 =' B $end
$var wire 1 }( C_in $end
$var wire 1 c& S $end
$var wire 1 >) C_out $end
$var wire 1 ?) nand1_out $end
$var wire 1 @) nand2_out $end
$var wire 1 A) nand3_out $end

$scope module nand1 $end
$var wire 1 ~! in1 $end
$var wire 1 =' in2 $end
$var wire 1 ?) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 =' in1 $end
$var wire 1 }( in2 $end
$var wire 1 @) out $end
$upscope $end

$scope module nand3 $end
$var wire 1 ~! in1 $end
$var wire 1 }( in2 $end
$var wire 1 A) out $end
$upscope $end

$scope module nand_out $end
$var wire 1 ?) in1 $end
$var wire 1 @) in2 $end
$var wire 1 A) in3 $end
$var wire 1 >) out $end
$upscope $end

$scope module xor1 $end
$var wire 1 ~! in1 $end
$var wire 1 =' in2 $end
$var wire 1 }( in3 $end
$var wire 1 c& out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module if_id $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 B) en $end
$var wire 1 @" pc_plus_2 [15] $end
$var wire 1 A" pc_plus_2 [14] $end
$var wire 1 B" pc_plus_2 [13] $end
$var wire 1 C" pc_plus_2 [12] $end
$var wire 1 D" pc_plus_2 [11] $end
$var wire 1 E" pc_plus_2 [10] $end
$var wire 1 F" pc_plus_2 [9] $end
$var wire 1 G" pc_plus_2 [8] $end
$var wire 1 H" pc_plus_2 [7] $end
$var wire 1 I" pc_plus_2 [6] $end
$var wire 1 J" pc_plus_2 [5] $end
$var wire 1 K" pc_plus_2 [4] $end
$var wire 1 L" pc_plus_2 [3] $end
$var wire 1 M" pc_plus_2 [2] $end
$var wire 1 N" pc_plus_2 [1] $end
$var wire 1 O" pc_plus_2 [0] $end
$var wire 1 2& instruction [15] $end
$var wire 1 3& instruction [14] $end
$var wire 1 4& instruction [13] $end
$var wire 1 5& instruction [12] $end
$var wire 1 6& instruction [11] $end
$var wire 1 7& instruction [10] $end
$var wire 1 8& instruction [9] $end
$var wire 1 9& instruction [8] $end
$var wire 1 :& instruction [7] $end
$var wire 1 ;& instruction [6] $end
$var wire 1 <& instruction [5] $end
$var wire 1 =& instruction [4] $end
$var wire 1 >& instruction [3] $end
$var wire 1 ?& instruction [2] $end
$var wire 1 @& instruction [1] $end
$var wire 1 A& instruction [0] $end
$var wire 1 ~! currPC [15] $end
$var wire 1 !" currPC [14] $end
$var wire 1 "" currPC [13] $end
$var wire 1 #" currPC [12] $end
$var wire 1 $" currPC [11] $end
$var wire 1 %" currPC [10] $end
$var wire 1 &" currPC [9] $end
$var wire 1 '" currPC [8] $end
$var wire 1 (" currPC [7] $end
$var wire 1 )" currPC [6] $end
$var wire 1 *" currPC [5] $end
$var wire 1 +" currPC [4] $end
$var wire 1 ," currPC [3] $end
$var wire 1 -" currPC [2] $end
$var wire 1 ." currPC [1] $end
$var wire 1 /" currPC [0] $end
$var wire 1 2# instruction_FD [15] $end
$var wire 1 3# instruction_FD [14] $end
$var wire 1 4# instruction_FD [13] $end
$var wire 1 5# instruction_FD [12] $end
$var wire 1 6# instruction_FD [11] $end
$var wire 1 7# instruction_FD [10] $end
$var wire 1 8# instruction_FD [9] $end
$var wire 1 9# instruction_FD [8] $end
$var wire 1 :# instruction_FD [7] $end
$var wire 1 ;# instruction_FD [6] $end
$var wire 1 <# instruction_FD [5] $end
$var wire 1 =# instruction_FD [4] $end
$var wire 1 ># instruction_FD [3] $end
$var wire 1 ?# instruction_FD [2] $end
$var wire 1 @# instruction_FD [1] $end
$var wire 1 A# instruction_FD [0] $end
$var wire 1 B# pc_plus_2_FD [15] $end
$var wire 1 C# pc_plus_2_FD [14] $end
$var wire 1 D# pc_plus_2_FD [13] $end
$var wire 1 E# pc_plus_2_FD [12] $end
$var wire 1 F# pc_plus_2_FD [11] $end
$var wire 1 G# pc_plus_2_FD [10] $end
$var wire 1 H# pc_plus_2_FD [9] $end
$var wire 1 I# pc_plus_2_FD [8] $end
$var wire 1 J# pc_plus_2_FD [7] $end
$var wire 1 K# pc_plus_2_FD [6] $end
$var wire 1 L# pc_plus_2_FD [5] $end
$var wire 1 M# pc_plus_2_FD [4] $end
$var wire 1 N# pc_plus_2_FD [3] $end
$var wire 1 O# pc_plus_2_FD [2] $end
$var wire 1 P# pc_plus_2_FD [1] $end
$var wire 1 Q# pc_plus_2_FD [0] $end
$var wire 1 R# currPC_FD [15] $end
$var wire 1 S# currPC_FD [14] $end
$var wire 1 T# currPC_FD [13] $end
$var wire 1 U# currPC_FD [12] $end
$var wire 1 V# currPC_FD [11] $end
$var wire 1 W# currPC_FD [10] $end
$var wire 1 X# currPC_FD [9] $end
$var wire 1 Y# currPC_FD [8] $end
$var wire 1 Z# currPC_FD [7] $end
$var wire 1 [# currPC_FD [6] $end
$var wire 1 \# currPC_FD [5] $end
$var wire 1 ]# currPC_FD [4] $end
$var wire 1 ^# currPC_FD [3] $end
$var wire 1 _# currPC_FD [2] $end
$var wire 1 `# currPC_FD [1] $end
$var wire 1 a# currPC_FD [0] $end
$var wire 1 C) instruction_FD_i [15] $end
$var wire 1 D) instruction_FD_i [14] $end
$var wire 1 E) instruction_FD_i [13] $end
$var wire 1 F) instruction_FD_i [12] $end
$var wire 1 G) instruction_FD_i [11] $end
$var wire 1 H) instruction_FD_i [10] $end
$var wire 1 I) instruction_FD_i [9] $end
$var wire 1 J) instruction_FD_i [8] $end
$var wire 1 K) instruction_FD_i [7] $end
$var wire 1 L) instruction_FD_i [6] $end
$var wire 1 M) instruction_FD_i [5] $end
$var wire 1 N) instruction_FD_i [4] $end
$var wire 1 O) instruction_FD_i [3] $end
$var wire 1 P) instruction_FD_i [2] $end
$var wire 1 Q) instruction_FD_i [1] $end
$var wire 1 R) instruction_FD_i [0] $end

$scope module instruction_REG $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 B) en $end
$var wire 1 2& data_in [15] $end
$var wire 1 3& data_in [14] $end
$var wire 1 4& data_in [13] $end
$var wire 1 5& data_in [12] $end
$var wire 1 6& data_in [11] $end
$var wire 1 7& data_in [10] $end
$var wire 1 8& data_in [9] $end
$var wire 1 9& data_in [8] $end
$var wire 1 :& data_in [7] $end
$var wire 1 ;& data_in [6] $end
$var wire 1 <& data_in [5] $end
$var wire 1 =& data_in [4] $end
$var wire 1 >& data_in [3] $end
$var wire 1 ?& data_in [2] $end
$var wire 1 @& data_in [1] $end
$var wire 1 A& data_in [0] $end
$var wire 1 2# state [15] $end
$var wire 1 3# state [14] $end
$var wire 1 4# state [13] $end
$var wire 1 5# state [12] $end
$var wire 1 6# state [11] $end
$var wire 1 7# state [10] $end
$var wire 1 8# state [9] $end
$var wire 1 9# state [8] $end
$var wire 1 :# state [7] $end
$var wire 1 ;# state [6] $end
$var wire 1 <# state [5] $end
$var wire 1 =# state [4] $end
$var wire 1 ># state [3] $end
$var wire 1 ?# state [2] $end
$var wire 1 @# state [1] $end
$var wire 1 A# state [0] $end
$var wire 1 S) data [15] $end
$var wire 1 T) data [14] $end
$var wire 1 U) data [13] $end
$var wire 1 V) data [12] $end
$var wire 1 W) data [11] $end
$var wire 1 X) data [10] $end
$var wire 1 Y) data [9] $end
$var wire 1 Z) data [8] $end
$var wire 1 [) data [7] $end
$var wire 1 \) data [6] $end
$var wire 1 ]) data [5] $end
$var wire 1 ^) data [4] $end
$var wire 1 _) data [3] $end
$var wire 1 `) data [2] $end
$var wire 1 a) data [1] $end
$var wire 1 b) data [0] $end

$scope module dff0 $end
$var wire 1 B) en $end
$var wire 1 b) d $end
$var wire 1 5! clk $end
$var wire 1 c) rst $end
$var wire 1 A# q $end
$var wire 1 d) data $end

$scope module DFF $end
$var wire 1 A# q $end
$var wire 1 d) d $end
$var wire 1 5! clk $end
$var wire 1 c) rst $end
$var reg 1 e) state $end
$upscope $end
$upscope $end

$scope module dff1 $end
$var wire 1 B) en $end
$var wire 1 a) d $end
$var wire 1 5! clk $end
$var wire 1 f) rst $end
$var wire 1 @# q $end
$var wire 1 g) data $end

$scope module DFF $end
$var wire 1 @# q $end
$var wire 1 g) d $end
$var wire 1 5! clk $end
$var wire 1 f) rst $end
$var reg 1 h) state $end
$upscope $end
$upscope $end

$scope module dff2 $end
$var wire 1 B) en $end
$var wire 1 `) d $end
$var wire 1 5! clk $end
$var wire 1 i) rst $end
$var wire 1 ?# q $end
$var wire 1 j) data $end

$scope module DFF $end
$var wire 1 ?# q $end
$var wire 1 j) d $end
$var wire 1 5! clk $end
$var wire 1 i) rst $end
$var reg 1 k) state $end
$upscope $end
$upscope $end

$scope module dff3 $end
$var wire 1 B) en $end
$var wire 1 _) d $end
$var wire 1 5! clk $end
$var wire 1 l) rst $end
$var wire 1 ># q $end
$var wire 1 m) data $end

$scope module DFF $end
$var wire 1 ># q $end
$var wire 1 m) d $end
$var wire 1 5! clk $end
$var wire 1 l) rst $end
$var reg 1 n) state $end
$upscope $end
$upscope $end

$scope module dff4 $end
$var wire 1 B) en $end
$var wire 1 ^) d $end
$var wire 1 5! clk $end
$var wire 1 o) rst $end
$var wire 1 =# q $end
$var wire 1 p) data $end

$scope module DFF $end
$var wire 1 =# q $end
$var wire 1 p) d $end
$var wire 1 5! clk $end
$var wire 1 o) rst $end
$var reg 1 q) state $end
$upscope $end
$upscope $end

$scope module dff5 $end
$var wire 1 B) en $end
$var wire 1 ]) d $end
$var wire 1 5! clk $end
$var wire 1 r) rst $end
$var wire 1 <# q $end
$var wire 1 s) data $end

$scope module DFF $end
$var wire 1 <# q $end
$var wire 1 s) d $end
$var wire 1 5! clk $end
$var wire 1 r) rst $end
$var reg 1 t) state $end
$upscope $end
$upscope $end

$scope module dff6 $end
$var wire 1 B) en $end
$var wire 1 \) d $end
$var wire 1 5! clk $end
$var wire 1 u) rst $end
$var wire 1 ;# q $end
$var wire 1 v) data $end

$scope module DFF $end
$var wire 1 ;# q $end
$var wire 1 v) d $end
$var wire 1 5! clk $end
$var wire 1 u) rst $end
$var reg 1 w) state $end
$upscope $end
$upscope $end

$scope module dff7 $end
$var wire 1 B) en $end
$var wire 1 [) d $end
$var wire 1 5! clk $end
$var wire 1 x) rst $end
$var wire 1 :# q $end
$var wire 1 y) data $end

$scope module DFF $end
$var wire 1 :# q $end
$var wire 1 y) d $end
$var wire 1 5! clk $end
$var wire 1 x) rst $end
$var reg 1 z) state $end
$upscope $end
$upscope $end

$scope module dff8 $end
$var wire 1 B) en $end
$var wire 1 Z) d $end
$var wire 1 5! clk $end
$var wire 1 {) rst $end
$var wire 1 9# q $end
$var wire 1 |) data $end

$scope module DFF $end
$var wire 1 9# q $end
$var wire 1 |) d $end
$var wire 1 5! clk $end
$var wire 1 {) rst $end
$var reg 1 }) state $end
$upscope $end
$upscope $end

$scope module dff9 $end
$var wire 1 B) en $end
$var wire 1 Y) d $end
$var wire 1 5! clk $end
$var wire 1 ~) rst $end
$var wire 1 8# q $end
$var wire 1 !* data $end

$scope module DFF $end
$var wire 1 8# q $end
$var wire 1 !* d $end
$var wire 1 5! clk $end
$var wire 1 ~) rst $end
$var reg 1 "* state $end
$upscope $end
$upscope $end

$scope module dff10 $end
$var wire 1 B) en $end
$var wire 1 X) d $end
$var wire 1 5! clk $end
$var wire 1 #* rst $end
$var wire 1 7# q $end
$var wire 1 $* data $end

$scope module DFF $end
$var wire 1 7# q $end
$var wire 1 $* d $end
$var wire 1 5! clk $end
$var wire 1 #* rst $end
$var reg 1 %* state $end
$upscope $end
$upscope $end

$scope module dff11 $end
$var wire 1 B) en $end
$var wire 1 W) d $end
$var wire 1 5! clk $end
$var wire 1 &* rst $end
$var wire 1 6# q $end
$var wire 1 '* data $end

$scope module DFF $end
$var wire 1 6# q $end
$var wire 1 '* d $end
$var wire 1 5! clk $end
$var wire 1 &* rst $end
$var reg 1 (* state $end
$upscope $end
$upscope $end

$scope module dff12 $end
$var wire 1 B) en $end
$var wire 1 V) d $end
$var wire 1 5! clk $end
$var wire 1 )* rst $end
$var wire 1 5# q $end
$var wire 1 ** data $end

$scope module DFF $end
$var wire 1 5# q $end
$var wire 1 ** d $end
$var wire 1 5! clk $end
$var wire 1 )* rst $end
$var reg 1 +* state $end
$upscope $end
$upscope $end

$scope module dff13 $end
$var wire 1 B) en $end
$var wire 1 U) d $end
$var wire 1 5! clk $end
$var wire 1 ,* rst $end
$var wire 1 4# q $end
$var wire 1 -* data $end

$scope module DFF $end
$var wire 1 4# q $end
$var wire 1 -* d $end
$var wire 1 5! clk $end
$var wire 1 ,* rst $end
$var reg 1 .* state $end
$upscope $end
$upscope $end

$scope module dff14 $end
$var wire 1 B) en $end
$var wire 1 T) d $end
$var wire 1 5! clk $end
$var wire 1 /* rst $end
$var wire 1 3# q $end
$var wire 1 0* data $end

$scope module DFF $end
$var wire 1 3# q $end
$var wire 1 0* d $end
$var wire 1 5! clk $end
$var wire 1 /* rst $end
$var reg 1 1* state $end
$upscope $end
$upscope $end

$scope module dff15 $end
$var wire 1 B) en $end
$var wire 1 S) d $end
$var wire 1 5! clk $end
$var wire 1 2* rst $end
$var wire 1 2# q $end
$var wire 1 3* data $end

$scope module DFF $end
$var wire 1 2# q $end
$var wire 1 3* d $end
$var wire 1 5! clk $end
$var wire 1 2* rst $end
$var reg 1 4* state $end
$upscope $end
$upscope $end
$upscope $end

$scope module pc_plus_2_REG $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 B) en $end
$var wire 1 @" data_in [15] $end
$var wire 1 A" data_in [14] $end
$var wire 1 B" data_in [13] $end
$var wire 1 C" data_in [12] $end
$var wire 1 D" data_in [11] $end
$var wire 1 E" data_in [10] $end
$var wire 1 F" data_in [9] $end
$var wire 1 G" data_in [8] $end
$var wire 1 H" data_in [7] $end
$var wire 1 I" data_in [6] $end
$var wire 1 J" data_in [5] $end
$var wire 1 K" data_in [4] $end
$var wire 1 L" data_in [3] $end
$var wire 1 M" data_in [2] $end
$var wire 1 N" data_in [1] $end
$var wire 1 O" data_in [0] $end
$var wire 1 B# state [15] $end
$var wire 1 C# state [14] $end
$var wire 1 D# state [13] $end
$var wire 1 E# state [12] $end
$var wire 1 F# state [11] $end
$var wire 1 G# state [10] $end
$var wire 1 H# state [9] $end
$var wire 1 I# state [8] $end
$var wire 1 J# state [7] $end
$var wire 1 K# state [6] $end
$var wire 1 L# state [5] $end
$var wire 1 M# state [4] $end
$var wire 1 N# state [3] $end
$var wire 1 O# state [2] $end
$var wire 1 P# state [1] $end
$var wire 1 Q# state [0] $end

$scope module dff0 $end
$var wire 1 B) en $end
$var wire 1 O" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 Q# q $end
$var wire 1 5* data $end

$scope module DFF $end
$var wire 1 Q# q $end
$var wire 1 5* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 6* state $end
$upscope $end
$upscope $end

$scope module dff1 $end
$var wire 1 B) en $end
$var wire 1 N" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P# q $end
$var wire 1 7* data $end

$scope module DFF $end
$var wire 1 P# q $end
$var wire 1 7* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 8* state $end
$upscope $end
$upscope $end

$scope module dff2 $end
$var wire 1 B) en $end
$var wire 1 M" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 O# q $end
$var wire 1 9* data $end

$scope module DFF $end
$var wire 1 O# q $end
$var wire 1 9* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :* state $end
$upscope $end
$upscope $end

$scope module dff3 $end
$var wire 1 B) en $end
$var wire 1 L" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 N# q $end
$var wire 1 ;* data $end

$scope module DFF $end
$var wire 1 N# q $end
$var wire 1 ;* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 <* state $end
$upscope $end
$upscope $end

$scope module dff4 $end
$var wire 1 B) en $end
$var wire 1 K" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 M# q $end
$var wire 1 =* data $end

$scope module DFF $end
$var wire 1 M# q $end
$var wire 1 =* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >* state $end
$upscope $end
$upscope $end

$scope module dff5 $end
$var wire 1 B) en $end
$var wire 1 J" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 L# q $end
$var wire 1 ?* data $end

$scope module DFF $end
$var wire 1 L# q $end
$var wire 1 ?* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @* state $end
$upscope $end
$upscope $end

$scope module dff6 $end
$var wire 1 B) en $end
$var wire 1 I" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 K# q $end
$var wire 1 A* data $end

$scope module DFF $end
$var wire 1 K# q $end
$var wire 1 A* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 B* state $end
$upscope $end
$upscope $end

$scope module dff7 $end
$var wire 1 B) en $end
$var wire 1 H" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 J# q $end
$var wire 1 C* data $end

$scope module DFF $end
$var wire 1 J# q $end
$var wire 1 C* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 D* state $end
$upscope $end
$upscope $end

$scope module dff8 $end
$var wire 1 B) en $end
$var wire 1 G" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 I# q $end
$var wire 1 E* data $end

$scope module DFF $end
$var wire 1 I# q $end
$var wire 1 E* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F* state $end
$upscope $end
$upscope $end

$scope module dff9 $end
$var wire 1 B) en $end
$var wire 1 F" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 H# q $end
$var wire 1 G* data $end

$scope module DFF $end
$var wire 1 H# q $end
$var wire 1 G* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H* state $end
$upscope $end
$upscope $end

$scope module dff10 $end
$var wire 1 B) en $end
$var wire 1 E" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 G# q $end
$var wire 1 I* data $end

$scope module DFF $end
$var wire 1 G# q $end
$var wire 1 I* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 J* state $end
$upscope $end
$upscope $end

$scope module dff11 $end
$var wire 1 B) en $end
$var wire 1 D" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 F# q $end
$var wire 1 K* data $end

$scope module DFF $end
$var wire 1 F# q $end
$var wire 1 K* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 L* state $end
$upscope $end
$upscope $end

$scope module dff12 $end
$var wire 1 B) en $end
$var wire 1 C" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 E# q $end
$var wire 1 M* data $end

$scope module DFF $end
$var wire 1 E# q $end
$var wire 1 M* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N* state $end
$upscope $end
$upscope $end

$scope module dff13 $end
$var wire 1 B) en $end
$var wire 1 B" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 D# q $end
$var wire 1 O* data $end

$scope module DFF $end
$var wire 1 D# q $end
$var wire 1 O* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 P* state $end
$upscope $end
$upscope $end

$scope module dff14 $end
$var wire 1 B) en $end
$var wire 1 A" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 C# q $end
$var wire 1 Q* data $end

$scope module DFF $end
$var wire 1 C# q $end
$var wire 1 Q* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 R* state $end
$upscope $end
$upscope $end

$scope module dff15 $end
$var wire 1 B) en $end
$var wire 1 @" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 B# q $end
$var wire 1 S* data $end

$scope module DFF $end
$var wire 1 B# q $end
$var wire 1 S* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 T* state $end
$upscope $end
$upscope $end
$upscope $end

$scope module currPC_REG $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 B) en $end
$var wire 1 ~! data_in [15] $end
$var wire 1 !" data_in [14] $end
$var wire 1 "" data_in [13] $end
$var wire 1 #" data_in [12] $end
$var wire 1 $" data_in [11] $end
$var wire 1 %" data_in [10] $end
$var wire 1 &" data_in [9] $end
$var wire 1 '" data_in [8] $end
$var wire 1 (" data_in [7] $end
$var wire 1 )" data_in [6] $end
$var wire 1 *" data_in [5] $end
$var wire 1 +" data_in [4] $end
$var wire 1 ," data_in [3] $end
$var wire 1 -" data_in [2] $end
$var wire 1 ." data_in [1] $end
$var wire 1 /" data_in [0] $end
$var wire 1 R# state [15] $end
$var wire 1 S# state [14] $end
$var wire 1 T# state [13] $end
$var wire 1 U# state [12] $end
$var wire 1 V# state [11] $end
$var wire 1 W# state [10] $end
$var wire 1 X# state [9] $end
$var wire 1 Y# state [8] $end
$var wire 1 Z# state [7] $end
$var wire 1 [# state [6] $end
$var wire 1 \# state [5] $end
$var wire 1 ]# state [4] $end
$var wire 1 ^# state [3] $end
$var wire 1 _# state [2] $end
$var wire 1 `# state [1] $end
$var wire 1 a# state [0] $end

$scope module dff0 $end
$var wire 1 B) en $end
$var wire 1 /" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 a# q $end
$var wire 1 U* data $end

$scope module DFF $end
$var wire 1 a# q $end
$var wire 1 U* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V* state $end
$upscope $end
$upscope $end

$scope module dff1 $end
$var wire 1 B) en $end
$var wire 1 ." d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 `# q $end
$var wire 1 W* data $end

$scope module DFF $end
$var wire 1 `# q $end
$var wire 1 W* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 X* state $end
$upscope $end
$upscope $end

$scope module dff2 $end
$var wire 1 B) en $end
$var wire 1 -" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 _# q $end
$var wire 1 Y* data $end

$scope module DFF $end
$var wire 1 _# q $end
$var wire 1 Y* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Z* state $end
$upscope $end
$upscope $end

$scope module dff3 $end
$var wire 1 B) en $end
$var wire 1 ," d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ^# q $end
$var wire 1 [* data $end

$scope module DFF $end
$var wire 1 ^# q $end
$var wire 1 [* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \* state $end
$upscope $end
$upscope $end

$scope module dff4 $end
$var wire 1 B) en $end
$var wire 1 +" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ]# q $end
$var wire 1 ]* data $end

$scope module DFF $end
$var wire 1 ]# q $end
$var wire 1 ]* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^* state $end
$upscope $end
$upscope $end

$scope module dff5 $end
$var wire 1 B) en $end
$var wire 1 *" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 \# q $end
$var wire 1 _* data $end

$scope module DFF $end
$var wire 1 \# q $end
$var wire 1 _* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `* state $end
$upscope $end
$upscope $end

$scope module dff6 $end
$var wire 1 B) en $end
$var wire 1 )" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 [# q $end
$var wire 1 a* data $end

$scope module DFF $end
$var wire 1 [# q $end
$var wire 1 a* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 b* state $end
$upscope $end
$upscope $end

$scope module dff7 $end
$var wire 1 B) en $end
$var wire 1 (" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 Z# q $end
$var wire 1 c* data $end

$scope module DFF $end
$var wire 1 Z# q $end
$var wire 1 c* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 d* state $end
$upscope $end
$upscope $end

$scope module dff8 $end
$var wire 1 B) en $end
$var wire 1 '" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 Y# q $end
$var wire 1 e* data $end

$scope module DFF $end
$var wire 1 Y# q $end
$var wire 1 e* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 f* state $end
$upscope $end
$upscope $end

$scope module dff9 $end
$var wire 1 B) en $end
$var wire 1 &" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 X# q $end
$var wire 1 g* data $end

$scope module DFF $end
$var wire 1 X# q $end
$var wire 1 g* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 h* state $end
$upscope $end
$upscope $end

$scope module dff10 $end
$var wire 1 B) en $end
$var wire 1 %" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 W# q $end
$var wire 1 i* data $end

$scope module DFF $end
$var wire 1 W# q $end
$var wire 1 i* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 j* state $end
$upscope $end
$upscope $end

$scope module dff11 $end
$var wire 1 B) en $end
$var wire 1 $" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 V# q $end
$var wire 1 k* data $end

$scope module DFF $end
$var wire 1 V# q $end
$var wire 1 k* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 l* state $end
$upscope $end
$upscope $end

$scope module dff12 $end
$var wire 1 B) en $end
$var wire 1 #" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U# q $end
$var wire 1 m* data $end

$scope module DFF $end
$var wire 1 U# q $end
$var wire 1 m* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 n* state $end
$upscope $end
$upscope $end

$scope module dff13 $end
$var wire 1 B) en $end
$var wire 1 "" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 T# q $end
$var wire 1 o* data $end

$scope module DFF $end
$var wire 1 T# q $end
$var wire 1 o* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 p* state $end
$upscope $end
$upscope $end

$scope module dff14 $end
$var wire 1 B) en $end
$var wire 1 !" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 S# q $end
$var wire 1 q* data $end

$scope module DFF $end
$var wire 1 S# q $end
$var wire 1 q* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 r* state $end
$upscope $end
$upscope $end

$scope module dff15 $end
$var wire 1 B) en $end
$var wire 1 ~! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 R# q $end
$var wire 1 s* data $end

$scope module DFF $end
$var wire 1 R# q $end
$var wire 1 s* d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 t* state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module HD_unit $end
$var wire 1 u* num_reg_reads [1] $end
$var wire 1 v* num_reg_reads [0] $end
$var wire 1 2# instruction [15] $end
$var wire 1 3# instruction [14] $end
$var wire 1 4# instruction [13] $end
$var wire 1 5# instruction [12] $end
$var wire 1 6# instruction [11] $end
$var wire 1 7# instruction [10] $end
$var wire 1 8# instruction [9] $end
$var wire 1 9# instruction [8] $end
$var wire 1 :# instruction [7] $end
$var wire 1 ;# instruction [6] $end
$var wire 1 <# instruction [5] $end
$var wire 1 =# instruction [4] $end
$var wire 1 ># instruction [3] $end
$var wire 1 ?# instruction [2] $end
$var wire 1 @# instruction [1] $end
$var wire 1 A# instruction [0] $end
$var wire 1 `$ writeRegSel_DX [2] $end
$var wire 1 a$ writeRegSel_DX [1] $end
$var wire 1 b$ writeRegSel_DX [0] $end
$var wire 1 @% writeRegSel_XM [2] $end
$var wire 1 A% writeRegSel_XM [1] $end
$var wire 1 B% writeRegSel_XM [0] $end
$var wire 1 y% writeRegSel_MWB [2] $end
$var wire 1 z% writeRegSel_MWB [1] $end
$var wire 1 {% writeRegSel_MWB [0] $end
$var wire 1 u# readRegSel1 [2] $end
$var wire 1 v# readRegSel1 [1] $end
$var wire 1 w# readRegSel1 [0] $end
$var wire 1 x# readRegSel2 [2] $end
$var wire 1 y# readRegSel2 [1] $end
$var wire 1 z# readRegSel2 [0] $end
$var wire 1 m$ regWrite_DX $end
$var wire 1 H% regWrite_XM $end
$var wire 1 ~% regWrite_MWB $end
$var wire 1 ;! stall $end
$var reg 1 w* r1 $end
$var reg 1 x* r2 $end

$scope module NUM_READS $end
$var wire 1 2# instruction [15] $end
$var wire 1 3# instruction [14] $end
$var wire 1 4# instruction [13] $end
$var wire 1 5# instruction [12] $end
$var wire 1 6# instruction [11] $end
$var wire 1 7# instruction [10] $end
$var wire 1 8# instruction [9] $end
$var wire 1 9# instruction [8] $end
$var wire 1 :# instruction [7] $end
$var wire 1 ;# instruction [6] $end
$var wire 1 <# instruction [5] $end
$var wire 1 =# instruction [4] $end
$var wire 1 ># instruction [3] $end
$var wire 1 ?# instruction [2] $end
$var wire 1 @# instruction [1] $end
$var wire 1 A# instruction [0] $end
$var wire 1 u* num_reg_reads [1] $end
$var wire 1 v* num_reg_reads [0] $end
$var wire 1 y* opcode [4] $end
$var wire 1 z* opcode [3] $end
$var wire 1 {* opcode [2] $end
$var wire 1 |* opcode [1] $end
$var wire 1 }* opcode [0] $end
$var reg 2 ~* num_reg_reads_i [1:0] $end
$upscope $end
$upscope $end

$scope module decode0 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~% regWrite_MWB $end
$var wire 1 2# instruction [15] $end
$var wire 1 3# instruction [14] $end
$var wire 1 4# instruction [13] $end
$var wire 1 5# instruction [12] $end
$var wire 1 6# instruction [11] $end
$var wire 1 7# instruction [10] $end
$var wire 1 8# instruction [9] $end
$var wire 1 9# instruction [8] $end
$var wire 1 :# instruction [7] $end
$var wire 1 ;# instruction [6] $end
$var wire 1 <# instruction [5] $end
$var wire 1 =# instruction [4] $end
$var wire 1 ># instruction [3] $end
$var wire 1 ?# instruction [2] $end
$var wire 1 @# instruction [1] $end
$var wire 1 A# instruction [0] $end
$var wire 1 B# new_addr [15] $end
$var wire 1 C# new_addr [14] $end
$var wire 1 D# new_addr [13] $end
$var wire 1 E# new_addr [12] $end
$var wire 1 F# new_addr [11] $end
$var wire 1 G# new_addr [10] $end
$var wire 1 H# new_addr [9] $end
$var wire 1 I# new_addr [8] $end
$var wire 1 J# new_addr [7] $end
$var wire 1 K# new_addr [6] $end
$var wire 1 L# new_addr [5] $end
$var wire 1 M# new_addr [4] $end
$var wire 1 N# new_addr [3] $end
$var wire 1 O# new_addr [2] $end
$var wire 1 P# new_addr [1] $end
$var wire 1 Q# new_addr [0] $end
$var wire 1 R# currPC [15] $end
$var wire 1 S# currPC [14] $end
$var wire 1 T# currPC [13] $end
$var wire 1 U# currPC [12] $end
$var wire 1 V# currPC [11] $end
$var wire 1 W# currPC [10] $end
$var wire 1 X# currPC [9] $end
$var wire 1 Y# currPC [8] $end
$var wire 1 Z# currPC [7] $end
$var wire 1 [# currPC [6] $end
$var wire 1 \# currPC [5] $end
$var wire 1 ]# currPC [4] $end
$var wire 1 ^# currPC [3] $end
$var wire 1 _# currPC [2] $end
$var wire 1 `# currPC [1] $end
$var wire 1 a# currPC [0] $end
$var wire 1 `" write_data [15] $end
$var wire 1 a" write_data [14] $end
$var wire 1 b" write_data [13] $end
$var wire 1 c" write_data [12] $end
$var wire 1 d" write_data [11] $end
$var wire 1 e" write_data [10] $end
$var wire 1 f" write_data [9] $end
$var wire 1 g" write_data [8] $end
$var wire 1 h" write_data [7] $end
$var wire 1 i" write_data [6] $end
$var wire 1 j" write_data [5] $end
$var wire 1 k" write_data [4] $end
$var wire 1 l" write_data [3] $end
$var wire 1 m" write_data [2] $end
$var wire 1 n" write_data [1] $end
$var wire 1 o" write_data [0] $end
$var wire 1 {# writeReg [2] $end
$var wire 1 |# writeReg [1] $end
$var wire 1 }# writeReg [0] $end
$var wire 1 ;! stall $end
$var wire 1 <! HALT $end
$var wire 1 =! NOP $end
$var wire 1 >! writeR7 $end
$var wire 1 ?! jumpReg $end
$var wire 1 @! jump $end
$var wire 1 A! branch $end
$var wire 1 B! memToReg $end
$var wire 1 C! memRead $end
$var wire 1 D! ALUop [3] $end
$var wire 1 E! ALUop [2] $end
$var wire 1 F! ALUop [1] $end
$var wire 1 G! ALUop [0] $end
$var wire 1 H! memWrite $end
$var wire 1 I! ALUsrc $end
$var wire 1 J! regWrite $end
$var wire 1 n! immediate [15] $end
$var wire 1 o! immediate [14] $end
$var wire 1 p! immediate [13] $end
$var wire 1 q! immediate [12] $end
$var wire 1 r! immediate [11] $end
$var wire 1 s! immediate [10] $end
$var wire 1 t! immediate [9] $end
$var wire 1 u! immediate [8] $end
$var wire 1 v! immediate [7] $end
$var wire 1 w! immediate [6] $end
$var wire 1 x! immediate [5] $end
$var wire 1 y! immediate [4] $end
$var wire 1 z! immediate [3] $end
$var wire 1 {! immediate [2] $end
$var wire 1 |! immediate [1] $end
$var wire 1 }! immediate [0] $end
$var wire 1 N! read_data_1 [15] $end
$var wire 1 O! read_data_1 [14] $end
$var wire 1 P! read_data_1 [13] $end
$var wire 1 Q! read_data_1 [12] $end
$var wire 1 R! read_data_1 [11] $end
$var wire 1 S! read_data_1 [10] $end
$var wire 1 T! read_data_1 [9] $end
$var wire 1 U! read_data_1 [8] $end
$var wire 1 V! read_data_1 [7] $end
$var wire 1 W! read_data_1 [6] $end
$var wire 1 X! read_data_1 [5] $end
$var wire 1 Y! read_data_1 [4] $end
$var wire 1 Z! read_data_1 [3] $end
$var wire 1 [! read_data_1 [2] $end
$var wire 1 \! read_data_1 [1] $end
$var wire 1 ]! read_data_1 [0] $end
$var wire 1 ^! read_data_2 [15] $end
$var wire 1 _! read_data_2 [14] $end
$var wire 1 `! read_data_2 [13] $end
$var wire 1 a! read_data_2 [12] $end
$var wire 1 b! read_data_2 [11] $end
$var wire 1 c! read_data_2 [10] $end
$var wire 1 d! read_data_2 [9] $end
$var wire 1 e! read_data_2 [8] $end
$var wire 1 f! read_data_2 [7] $end
$var wire 1 g! read_data_2 [6] $end
$var wire 1 h! read_data_2 [5] $end
$var wire 1 i! read_data_2 [4] $end
$var wire 1 j! read_data_2 [3] $end
$var wire 1 k! read_data_2 [2] $end
$var wire 1 l! read_data_2 [1] $end
$var wire 1 m! read_data_2 [0] $end
$var wire 1 r# writeRegSel [2] $end
$var wire 1 s# writeRegSel [1] $end
$var wire 1 t# writeRegSel [0] $end
$var wire 1 M! flush $end
$var wire 1 0" nextPC [15] $end
$var wire 1 1" nextPC [14] $end
$var wire 1 2" nextPC [13] $end
$var wire 1 3" nextPC [12] $end
$var wire 1 4" nextPC [11] $end
$var wire 1 5" nextPC [10] $end
$var wire 1 6" nextPC [9] $end
$var wire 1 7" nextPC [8] $end
$var wire 1 8" nextPC [7] $end
$var wire 1 9" nextPC [6] $end
$var wire 1 :" nextPC [5] $end
$var wire 1 ;" nextPC [4] $end
$var wire 1 <" nextPC [3] $end
$var wire 1 =" nextPC [2] $end
$var wire 1 >" nextPC [1] $end
$var wire 1 ?" nextPC [0] $end
$var wire 1 !+ instr_type [1] $end
$var wire 1 "+ instr_type [0] $end
$var wire 1 u# readReg1 [2] $end
$var wire 1 v# readReg1 [1] $end
$var wire 1 w# readReg1 [0] $end
$var wire 1 x# readReg2 [2] $end
$var wire 1 y# readReg2 [1] $end
$var wire 1 z# readReg2 [0] $end
$var wire 1 #+ zero $end
$var wire 1 $+ next_PC_i [15] $end
$var wire 1 %+ next_PC_i [14] $end
$var wire 1 &+ next_PC_i [13] $end
$var wire 1 '+ next_PC_i [12] $end
$var wire 1 (+ next_PC_i [11] $end
$var wire 1 )+ next_PC_i [10] $end
$var wire 1 *+ next_PC_i [9] $end
$var wire 1 ++ next_PC_i [8] $end
$var wire 1 ,+ next_PC_i [7] $end
$var wire 1 -+ next_PC_i [6] $end
$var wire 1 .+ next_PC_i [5] $end
$var wire 1 /+ next_PC_i [4] $end
$var wire 1 0+ next_PC_i [3] $end
$var wire 1 1+ next_PC_i [2] $end
$var wire 1 2+ next_PC_i [1] $end
$var wire 1 3+ next_PC_i [0] $end
$var wire 1 4+ branchAluResult [15] $end
$var wire 1 5+ branchAluResult [14] $end
$var wire 1 6+ branchAluResult [13] $end
$var wire 1 7+ branchAluResult [12] $end
$var wire 1 8+ branchAluResult [11] $end
$var wire 1 9+ branchAluResult [10] $end
$var wire 1 :+ branchAluResult [9] $end
$var wire 1 ;+ branchAluResult [8] $end
$var wire 1 <+ branchAluResult [7] $end
$var wire 1 =+ branchAluResult [6] $end
$var wire 1 >+ branchAluResult [5] $end
$var wire 1 ?+ branchAluResult [4] $end
$var wire 1 @+ branchAluResult [3] $end
$var wire 1 A+ branchAluResult [2] $end
$var wire 1 B+ branchAluResult [1] $end
$var wire 1 C+ branchAluResult [0] $end
$var wire 1 D+ instruction_control [15] $end
$var wire 1 E+ instruction_control [14] $end
$var wire 1 F+ instruction_control [13] $end
$var wire 1 G+ instruction_control [12] $end
$var wire 1 H+ instruction_control [11] $end
$var wire 1 I+ instruction_control [10] $end
$var wire 1 J+ instruction_control [9] $end
$var wire 1 K+ instruction_control [8] $end
$var wire 1 L+ instruction_control [7] $end
$var wire 1 M+ instruction_control [6] $end
$var wire 1 N+ instruction_control [5] $end
$var wire 1 O+ instruction_control [4] $end
$var wire 1 P+ instruction_control [3] $end
$var wire 1 Q+ instruction_control [2] $end
$var wire 1 R+ instruction_control [1] $end
$var wire 1 S+ instruction_control [0] $end
$var wire 1 T+ branch_or_jump $end
$var wire 1 U+ branch_or_jump_n $end

$scope module NOR_BR_JMP $end
$var wire 1 A! in1 $end
$var wire 1 @! in2 $end
$var wire 1 U+ out $end
$upscope $end

$scope module NOT_BR_JMP $end
$var wire 1 U+ in1 $end
$var wire 1 T+ out $end
$upscope $end

$scope module CONTROL $end
$var wire 1 D+ instruction [15] $end
$var wire 1 E+ instruction [14] $end
$var wire 1 F+ instruction [13] $end
$var wire 1 G+ instruction [12] $end
$var wire 1 H+ instruction [11] $end
$var wire 1 I+ instruction [10] $end
$var wire 1 J+ instruction [9] $end
$var wire 1 K+ instruction [8] $end
$var wire 1 L+ instruction [7] $end
$var wire 1 M+ instruction [6] $end
$var wire 1 N+ instruction [5] $end
$var wire 1 O+ instruction [4] $end
$var wire 1 P+ instruction [3] $end
$var wire 1 Q+ instruction [2] $end
$var wire 1 R+ instruction [1] $end
$var wire 1 S+ instruction [0] $end
$var wire 1 <! HALT $end
$var wire 1 =! NOP $end
$var wire 1 >! writeR7 $end
$var wire 1 ?! jumpReg $end
$var wire 1 @! jump $end
$var wire 1 A! branch $end
$var wire 1 B! memToReg $end
$var wire 1 C! memRead $end
$var wire 1 D! ALUop [3] $end
$var wire 1 E! ALUop [2] $end
$var wire 1 F! ALUop [1] $end
$var wire 1 G! ALUop [0] $end
$var wire 1 H! memWrite $end
$var wire 1 I! ALUsrc $end
$var wire 1 J! regWrite $end
$var reg 1 V+ HALT_i $end
$var reg 1 W+ NOP_i $end
$var reg 1 X+ writeR7_i $end
$var reg 1 Y+ jumpReg_i $end
$var reg 1 Z+ jump_i $end
$var reg 1 [+ branch_i $end
$var reg 1 \+ memToReg_i $end
$var reg 1 ]+ memRead_i $end
$var reg 4 ^+ ALUop_i [3:0] $end
$var reg 1 _+ memWrite_i $end
$var reg 1 `+ ALUsrc_i $end
$var reg 1 a+ regWrite_i $end
$var reg 2 b+ instr_type_i [1:0] $end
$var reg 2 c+ num_reg_reads_i [1:0] $end
$var wire 1 d+ opcode [4] $end
$var wire 1 e+ opcode [3] $end
$var wire 1 f+ opcode [2] $end
$var wire 1 g+ opcode [1] $end
$var wire 1 h+ opcode [0] $end
$var reg 4 i+ alu_op [3:0] $end
$var reg 4 j+ shift_rot_op [3:0] $end
$var wire 1 k+ func [1] $end
$var wire 1 l+ func [0] $end
$upscope $end

$scope module INSTR_TYPE $end
$var wire 1 2# instruction [15] $end
$var wire 1 3# instruction [14] $end
$var wire 1 4# instruction [13] $end
$var wire 1 5# instruction [12] $end
$var wire 1 6# instruction [11] $end
$var wire 1 7# instruction [10] $end
$var wire 1 8# instruction [9] $end
$var wire 1 9# instruction [8] $end
$var wire 1 :# instruction [7] $end
$var wire 1 ;# instruction [6] $end
$var wire 1 <# instruction [5] $end
$var wire 1 =# instruction [4] $end
$var wire 1 ># instruction [3] $end
$var wire 1 ?# instruction [2] $end
$var wire 1 @# instruction [1] $end
$var wire 1 A# instruction [0] $end
$var wire 1 !+ instr_type [1] $end
$var wire 1 "+ instr_type [0] $end
$var wire 1 m+ opcode [4] $end
$var wire 1 n+ opcode [3] $end
$var wire 1 o+ opcode [2] $end
$var wire 1 p+ opcode [1] $end
$var wire 1 q+ opcode [0] $end
$var reg 2 r+ instr_type_i [1:0] $end
$upscope $end

$scope module DECODE_REGS $end
$var wire 1 !+ instr_Type [1] $end
$var wire 1 "+ instr_Type [0] $end
$var wire 1 2# instruction [15] $end
$var wire 1 3# instruction [14] $end
$var wire 1 4# instruction [13] $end
$var wire 1 5# instruction [12] $end
$var wire 1 6# instruction [11] $end
$var wire 1 7# instruction [10] $end
$var wire 1 8# instruction [9] $end
$var wire 1 9# instruction [8] $end
$var wire 1 :# instruction [7] $end
$var wire 1 ;# instruction [6] $end
$var wire 1 <# instruction [5] $end
$var wire 1 =# instruction [4] $end
$var wire 1 ># instruction [3] $end
$var wire 1 ?# instruction [2] $end
$var wire 1 @# instruction [1] $end
$var wire 1 A# instruction [0] $end
$var wire 1 B# incr_PC [15] $end
$var wire 1 C# incr_PC [14] $end
$var wire 1 D# incr_PC [13] $end
$var wire 1 E# incr_PC [12] $end
$var wire 1 F# incr_PC [11] $end
$var wire 1 G# incr_PC [10] $end
$var wire 1 H# incr_PC [9] $end
$var wire 1 I# incr_PC [8] $end
$var wire 1 J# incr_PC [7] $end
$var wire 1 K# incr_PC [6] $end
$var wire 1 L# incr_PC [5] $end
$var wire 1 M# incr_PC [4] $end
$var wire 1 N# incr_PC [3] $end
$var wire 1 O# incr_PC [2] $end
$var wire 1 P# incr_PC [1] $end
$var wire 1 Q# incr_PC [0] $end
$var wire 1 u# readReg1 [2] $end
$var wire 1 v# readReg1 [1] $end
$var wire 1 w# readReg1 [0] $end
$var wire 1 x# readReg2 [2] $end
$var wire 1 y# readReg2 [1] $end
$var wire 1 z# readReg2 [0] $end
$var wire 1 r# writeReg [2] $end
$var wire 1 s# writeReg [1] $end
$var wire 1 t# writeReg [0] $end
$var reg 3 s+ readReg1Wire [2:0] $end
$var reg 3 t+ readReg2Wire [2:0] $end
$var reg 3 u+ writeRegWire [2:0] $end
$var wire 1 v+ opcode [4] $end
$var wire 1 w+ opcode [3] $end
$var wire 1 x+ opcode [2] $end
$var wire 1 y+ opcode [1] $end
$var wire 1 z+ opcode [0] $end
$var wire 1 {+ JALROpcode $end
$var wire 1 |+ JALOpcode $end
$var wire 1 }+ SLBIOpcode $end
$var wire 1 ~+ LBIOpcode $end
$var wire 1 !, STOpcode $end
$var wire 1 ", STUOpcode $end
$upscope $end

$scope module EXTEND_IMM $end
$var wire 1 2# instruction [15] $end
$var wire 1 3# instruction [14] $end
$var wire 1 4# instruction [13] $end
$var wire 1 5# instruction [12] $end
$var wire 1 6# instruction [11] $end
$var wire 1 7# instruction [10] $end
$var wire 1 8# instruction [9] $end
$var wire 1 9# instruction [8] $end
$var wire 1 :# instruction [7] $end
$var wire 1 ;# instruction [6] $end
$var wire 1 <# instruction [5] $end
$var wire 1 =# instruction [4] $end
$var wire 1 ># instruction [3] $end
$var wire 1 ?# instruction [2] $end
$var wire 1 @# instruction [1] $end
$var wire 1 A# instruction [0] $end
$var reg 16 #, immediate [15:0] $end
$var wire 1 $, opcode [4] $end
$var wire 1 %, opcode [3] $end
$var wire 1 &, opcode [2] $end
$var wire 1 ', opcode [1] $end
$var wire 1 (, opcode [0] $end
$upscope $end

$scope module regFile0 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 u# read1RegSel [2] $end
$var wire 1 v# read1RegSel [1] $end
$var wire 1 w# read1RegSel [0] $end
$var wire 1 x# read2RegSel [2] $end
$var wire 1 y# read2RegSel [1] $end
$var wire 1 z# read2RegSel [0] $end
$var wire 1 {# writeRegSel [2] $end
$var wire 1 |# writeRegSel [1] $end
$var wire 1 }# writeRegSel [0] $end
$var wire 1 `" writeData [15] $end
$var wire 1 a" writeData [14] $end
$var wire 1 b" writeData [13] $end
$var wire 1 c" writeData [12] $end
$var wire 1 d" writeData [11] $end
$var wire 1 e" writeData [10] $end
$var wire 1 f" writeData [9] $end
$var wire 1 g" writeData [8] $end
$var wire 1 h" writeData [7] $end
$var wire 1 i" writeData [6] $end
$var wire 1 j" writeData [5] $end
$var wire 1 k" writeData [4] $end
$var wire 1 l" writeData [3] $end
$var wire 1 m" writeData [2] $end
$var wire 1 n" writeData [1] $end
$var wire 1 o" writeData [0] $end
$var wire 1 ~% writeEn $end
$var wire 1 N! read1Data [15] $end
$var wire 1 O! read1Data [14] $end
$var wire 1 P! read1Data [13] $end
$var wire 1 Q! read1Data [12] $end
$var wire 1 R! read1Data [11] $end
$var wire 1 S! read1Data [10] $end
$var wire 1 T! read1Data [9] $end
$var wire 1 U! read1Data [8] $end
$var wire 1 V! read1Data [7] $end
$var wire 1 W! read1Data [6] $end
$var wire 1 X! read1Data [5] $end
$var wire 1 Y! read1Data [4] $end
$var wire 1 Z! read1Data [3] $end
$var wire 1 [! read1Data [2] $end
$var wire 1 \! read1Data [1] $end
$var wire 1 ]! read1Data [0] $end
$var wire 1 ^! read2Data [15] $end
$var wire 1 _! read2Data [14] $end
$var wire 1 `! read2Data [13] $end
$var wire 1 a! read2Data [12] $end
$var wire 1 b! read2Data [11] $end
$var wire 1 c! read2Data [10] $end
$var wire 1 d! read2Data [9] $end
$var wire 1 e! read2Data [8] $end
$var wire 1 f! read2Data [7] $end
$var wire 1 g! read2Data [6] $end
$var wire 1 h! read2Data [5] $end
$var wire 1 i! read2Data [4] $end
$var wire 1 j! read2Data [3] $end
$var wire 1 k! read2Data [2] $end
$var wire 1 l! read2Data [1] $end
$var wire 1 m! read2Data [0] $end
$var wire 1 ), err $end
$var wire 1 *, read1 [15] $end
$var wire 1 +, read1 [14] $end
$var wire 1 ,, read1 [13] $end
$var wire 1 -, read1 [12] $end
$var wire 1 ., read1 [11] $end
$var wire 1 /, read1 [10] $end
$var wire 1 0, read1 [9] $end
$var wire 1 1, read1 [8] $end
$var wire 1 2, read1 [7] $end
$var wire 1 3, read1 [6] $end
$var wire 1 4, read1 [5] $end
$var wire 1 5, read1 [4] $end
$var wire 1 6, read1 [3] $end
$var wire 1 7, read1 [2] $end
$var wire 1 8, read1 [1] $end
$var wire 1 9, read1 [0] $end
$var wire 1 :, read2 [15] $end
$var wire 1 ;, read2 [14] $end
$var wire 1 <, read2 [13] $end
$var wire 1 =, read2 [12] $end
$var wire 1 >, read2 [11] $end
$var wire 1 ?, read2 [10] $end
$var wire 1 @, read2 [9] $end
$var wire 1 A, read2 [8] $end
$var wire 1 B, read2 [7] $end
$var wire 1 C, read2 [6] $end
$var wire 1 D, read2 [5] $end
$var wire 1 E, read2 [4] $end
$var wire 1 F, read2 [3] $end
$var wire 1 G, read2 [2] $end
$var wire 1 H, read2 [1] $end
$var wire 1 I, read2 [0] $end
$var reg 16 J, read1_copy [15:0] $end
$var reg 16 K, read2_copy [15:0] $end
$var wire 1 L, comp1 $end
$var wire 1 M, comp2 $end

$scope module registerFile $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 u# read1RegSel [2] $end
$var wire 1 v# read1RegSel [1] $end
$var wire 1 w# read1RegSel [0] $end
$var wire 1 x# read2RegSel [2] $end
$var wire 1 y# read2RegSel [1] $end
$var wire 1 z# read2RegSel [0] $end
$var wire 1 {# writeRegSel [2] $end
$var wire 1 |# writeRegSel [1] $end
$var wire 1 }# writeRegSel [0] $end
$var wire 1 `" writeData [15] $end
$var wire 1 a" writeData [14] $end
$var wire 1 b" writeData [13] $end
$var wire 1 c" writeData [12] $end
$var wire 1 d" writeData [11] $end
$var wire 1 e" writeData [10] $end
$var wire 1 f" writeData [9] $end
$var wire 1 g" writeData [8] $end
$var wire 1 h" writeData [7] $end
$var wire 1 i" writeData [6] $end
$var wire 1 j" writeData [5] $end
$var wire 1 k" writeData [4] $end
$var wire 1 l" writeData [3] $end
$var wire 1 m" writeData [2] $end
$var wire 1 n" writeData [1] $end
$var wire 1 o" writeData [0] $end
$var wire 1 ~% writeEn $end
$var wire 1 *, read1Data [15] $end
$var wire 1 +, read1Data [14] $end
$var wire 1 ,, read1Data [13] $end
$var wire 1 -, read1Data [12] $end
$var wire 1 ., read1Data [11] $end
$var wire 1 /, read1Data [10] $end
$var wire 1 0, read1Data [9] $end
$var wire 1 1, read1Data [8] $end
$var wire 1 2, read1Data [7] $end
$var wire 1 3, read1Data [6] $end
$var wire 1 4, read1Data [5] $end
$var wire 1 5, read1Data [4] $end
$var wire 1 6, read1Data [3] $end
$var wire 1 7, read1Data [2] $end
$var wire 1 8, read1Data [1] $end
$var wire 1 9, read1Data [0] $end
$var wire 1 :, read2Data [15] $end
$var wire 1 ;, read2Data [14] $end
$var wire 1 <, read2Data [13] $end
$var wire 1 =, read2Data [12] $end
$var wire 1 >, read2Data [11] $end
$var wire 1 ?, read2Data [10] $end
$var wire 1 @, read2Data [9] $end
$var wire 1 A, read2Data [8] $end
$var wire 1 B, read2Data [7] $end
$var wire 1 C, read2Data [6] $end
$var wire 1 D, read2Data [5] $end
$var wire 1 E, read2Data [4] $end
$var wire 1 F, read2Data [3] $end
$var wire 1 G, read2Data [2] $end
$var wire 1 H, read2Data [1] $end
$var wire 1 I, read2Data [0] $end
$var wire 1 ), err $end
$var wire 1 N, state0 [15] $end
$var wire 1 O, state0 [14] $end
$var wire 1 P, state0 [13] $end
$var wire 1 Q, state0 [12] $end
$var wire 1 R, state0 [11] $end
$var wire 1 S, state0 [10] $end
$var wire 1 T, state0 [9] $end
$var wire 1 U, state0 [8] $end
$var wire 1 V, state0 [7] $end
$var wire 1 W, state0 [6] $end
$var wire 1 X, state0 [5] $end
$var wire 1 Y, state0 [4] $end
$var wire 1 Z, state0 [3] $end
$var wire 1 [, state0 [2] $end
$var wire 1 \, state0 [1] $end
$var wire 1 ], state0 [0] $end
$var wire 1 ^, state1 [15] $end
$var wire 1 _, state1 [14] $end
$var wire 1 `, state1 [13] $end
$var wire 1 a, state1 [12] $end
$var wire 1 b, state1 [11] $end
$var wire 1 c, state1 [10] $end
$var wire 1 d, state1 [9] $end
$var wire 1 e, state1 [8] $end
$var wire 1 f, state1 [7] $end
$var wire 1 g, state1 [6] $end
$var wire 1 h, state1 [5] $end
$var wire 1 i, state1 [4] $end
$var wire 1 j, state1 [3] $end
$var wire 1 k, state1 [2] $end
$var wire 1 l, state1 [1] $end
$var wire 1 m, state1 [0] $end
$var wire 1 n, state2 [15] $end
$var wire 1 o, state2 [14] $end
$var wire 1 p, state2 [13] $end
$var wire 1 q, state2 [12] $end
$var wire 1 r, state2 [11] $end
$var wire 1 s, state2 [10] $end
$var wire 1 t, state2 [9] $end
$var wire 1 u, state2 [8] $end
$var wire 1 v, state2 [7] $end
$var wire 1 w, state2 [6] $end
$var wire 1 x, state2 [5] $end
$var wire 1 y, state2 [4] $end
$var wire 1 z, state2 [3] $end
$var wire 1 {, state2 [2] $end
$var wire 1 |, state2 [1] $end
$var wire 1 }, state2 [0] $end
$var wire 1 ~, state3 [15] $end
$var wire 1 !- state3 [14] $end
$var wire 1 "- state3 [13] $end
$var wire 1 #- state3 [12] $end
$var wire 1 $- state3 [11] $end
$var wire 1 %- state3 [10] $end
$var wire 1 &- state3 [9] $end
$var wire 1 '- state3 [8] $end
$var wire 1 (- state3 [7] $end
$var wire 1 )- state3 [6] $end
$var wire 1 *- state3 [5] $end
$var wire 1 +- state3 [4] $end
$var wire 1 ,- state3 [3] $end
$var wire 1 -- state3 [2] $end
$var wire 1 .- state3 [1] $end
$var wire 1 /- state3 [0] $end
$var wire 1 0- state4 [15] $end
$var wire 1 1- state4 [14] $end
$var wire 1 2- state4 [13] $end
$var wire 1 3- state4 [12] $end
$var wire 1 4- state4 [11] $end
$var wire 1 5- state4 [10] $end
$var wire 1 6- state4 [9] $end
$var wire 1 7- state4 [8] $end
$var wire 1 8- state4 [7] $end
$var wire 1 9- state4 [6] $end
$var wire 1 :- state4 [5] $end
$var wire 1 ;- state4 [4] $end
$var wire 1 <- state4 [3] $end
$var wire 1 =- state4 [2] $end
$var wire 1 >- state4 [1] $end
$var wire 1 ?- state4 [0] $end
$var wire 1 @- state5 [15] $end
$var wire 1 A- state5 [14] $end
$var wire 1 B- state5 [13] $end
$var wire 1 C- state5 [12] $end
$var wire 1 D- state5 [11] $end
$var wire 1 E- state5 [10] $end
$var wire 1 F- state5 [9] $end
$var wire 1 G- state5 [8] $end
$var wire 1 H- state5 [7] $end
$var wire 1 I- state5 [6] $end
$var wire 1 J- state5 [5] $end
$var wire 1 K- state5 [4] $end
$var wire 1 L- state5 [3] $end
$var wire 1 M- state5 [2] $end
$var wire 1 N- state5 [1] $end
$var wire 1 O- state5 [0] $end
$var wire 1 P- state6 [15] $end
$var wire 1 Q- state6 [14] $end
$var wire 1 R- state6 [13] $end
$var wire 1 S- state6 [12] $end
$var wire 1 T- state6 [11] $end
$var wire 1 U- state6 [10] $end
$var wire 1 V- state6 [9] $end
$var wire 1 W- state6 [8] $end
$var wire 1 X- state6 [7] $end
$var wire 1 Y- state6 [6] $end
$var wire 1 Z- state6 [5] $end
$var wire 1 [- state6 [4] $end
$var wire 1 \- state6 [3] $end
$var wire 1 ]- state6 [2] $end
$var wire 1 ^- state6 [1] $end
$var wire 1 _- state6 [0] $end
$var wire 1 `- state7 [15] $end
$var wire 1 a- state7 [14] $end
$var wire 1 b- state7 [13] $end
$var wire 1 c- state7 [12] $end
$var wire 1 d- state7 [11] $end
$var wire 1 e- state7 [10] $end
$var wire 1 f- state7 [9] $end
$var wire 1 g- state7 [8] $end
$var wire 1 h- state7 [7] $end
$var wire 1 i- state7 [6] $end
$var wire 1 j- state7 [5] $end
$var wire 1 k- state7 [4] $end
$var wire 1 l- state7 [3] $end
$var wire 1 m- state7 [2] $end
$var wire 1 n- state7 [1] $end
$var wire 1 o- state7 [0] $end
$var wire 1 p- in0 [15] $end
$var wire 1 q- in0 [14] $end
$var wire 1 r- in0 [13] $end
$var wire 1 s- in0 [12] $end
$var wire 1 t- in0 [11] $end
$var wire 1 u- in0 [10] $end
$var wire 1 v- in0 [9] $end
$var wire 1 w- in0 [8] $end
$var wire 1 x- in0 [7] $end
$var wire 1 y- in0 [6] $end
$var wire 1 z- in0 [5] $end
$var wire 1 {- in0 [4] $end
$var wire 1 |- in0 [3] $end
$var wire 1 }- in0 [2] $end
$var wire 1 ~- in0 [1] $end
$var wire 1 !. in0 [0] $end
$var wire 1 ". in1 [15] $end
$var wire 1 #. in1 [14] $end
$var wire 1 $. in1 [13] $end
$var wire 1 %. in1 [12] $end
$var wire 1 &. in1 [11] $end
$var wire 1 '. in1 [10] $end
$var wire 1 (. in1 [9] $end
$var wire 1 ). in1 [8] $end
$var wire 1 *. in1 [7] $end
$var wire 1 +. in1 [6] $end
$var wire 1 ,. in1 [5] $end
$var wire 1 -. in1 [4] $end
$var wire 1 .. in1 [3] $end
$var wire 1 /. in1 [2] $end
$var wire 1 0. in1 [1] $end
$var wire 1 1. in1 [0] $end
$var wire 1 2. in2 [15] $end
$var wire 1 3. in2 [14] $end
$var wire 1 4. in2 [13] $end
$var wire 1 5. in2 [12] $end
$var wire 1 6. in2 [11] $end
$var wire 1 7. in2 [10] $end
$var wire 1 8. in2 [9] $end
$var wire 1 9. in2 [8] $end
$var wire 1 :. in2 [7] $end
$var wire 1 ;. in2 [6] $end
$var wire 1 <. in2 [5] $end
$var wire 1 =. in2 [4] $end
$var wire 1 >. in2 [3] $end
$var wire 1 ?. in2 [2] $end
$var wire 1 @. in2 [1] $end
$var wire 1 A. in2 [0] $end
$var wire 1 B. in3 [15] $end
$var wire 1 C. in3 [14] $end
$var wire 1 D. in3 [13] $end
$var wire 1 E. in3 [12] $end
$var wire 1 F. in3 [11] $end
$var wire 1 G. in3 [10] $end
$var wire 1 H. in3 [9] $end
$var wire 1 I. in3 [8] $end
$var wire 1 J. in3 [7] $end
$var wire 1 K. in3 [6] $end
$var wire 1 L. in3 [5] $end
$var wire 1 M. in3 [4] $end
$var wire 1 N. in3 [3] $end
$var wire 1 O. in3 [2] $end
$var wire 1 P. in3 [1] $end
$var wire 1 Q. in3 [0] $end
$var wire 1 R. in4 [15] $end
$var wire 1 S. in4 [14] $end
$var wire 1 T. in4 [13] $end
$var wire 1 U. in4 [12] $end
$var wire 1 V. in4 [11] $end
$var wire 1 W. in4 [10] $end
$var wire 1 X. in4 [9] $end
$var wire 1 Y. in4 [8] $end
$var wire 1 Z. in4 [7] $end
$var wire 1 [. in4 [6] $end
$var wire 1 \. in4 [5] $end
$var wire 1 ]. in4 [4] $end
$var wire 1 ^. in4 [3] $end
$var wire 1 _. in4 [2] $end
$var wire 1 `. in4 [1] $end
$var wire 1 a. in4 [0] $end
$var wire 1 b. in5 [15] $end
$var wire 1 c. in5 [14] $end
$var wire 1 d. in5 [13] $end
$var wire 1 e. in5 [12] $end
$var wire 1 f. in5 [11] $end
$var wire 1 g. in5 [10] $end
$var wire 1 h. in5 [9] $end
$var wire 1 i. in5 [8] $end
$var wire 1 j. in5 [7] $end
$var wire 1 k. in5 [6] $end
$var wire 1 l. in5 [5] $end
$var wire 1 m. in5 [4] $end
$var wire 1 n. in5 [3] $end
$var wire 1 o. in5 [2] $end
$var wire 1 p. in5 [1] $end
$var wire 1 q. in5 [0] $end
$var wire 1 r. in6 [15] $end
$var wire 1 s. in6 [14] $end
$var wire 1 t. in6 [13] $end
$var wire 1 u. in6 [12] $end
$var wire 1 v. in6 [11] $end
$var wire 1 w. in6 [10] $end
$var wire 1 x. in6 [9] $end
$var wire 1 y. in6 [8] $end
$var wire 1 z. in6 [7] $end
$var wire 1 {. in6 [6] $end
$var wire 1 |. in6 [5] $end
$var wire 1 }. in6 [4] $end
$var wire 1 ~. in6 [3] $end
$var wire 1 !/ in6 [2] $end
$var wire 1 "/ in6 [1] $end
$var wire 1 #/ in6 [0] $end
$var wire 1 $/ in7 [15] $end
$var wire 1 %/ in7 [14] $end
$var wire 1 &/ in7 [13] $end
$var wire 1 '/ in7 [12] $end
$var wire 1 (/ in7 [11] $end
$var wire 1 )/ in7 [10] $end
$var wire 1 */ in7 [9] $end
$var wire 1 +/ in7 [8] $end
$var wire 1 ,/ in7 [7] $end
$var wire 1 -/ in7 [6] $end
$var wire 1 ./ in7 [5] $end
$var wire 1 // in7 [4] $end
$var wire 1 0/ in7 [3] $end
$var wire 1 1/ in7 [2] $end
$var wire 1 2/ in7 [1] $end
$var wire 1 3/ in7 [0] $end
$var reg 16 4/ read1 [15:0] $end
$var reg 16 5/ read2 [15:0] $end
$var reg 1 6/ err_i $end

$scope module reg0 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 p- data_in [15] $end
$var wire 1 q- data_in [14] $end
$var wire 1 r- data_in [13] $end
$var wire 1 s- data_in [12] $end
$var wire 1 t- data_in [11] $end
$var wire 1 u- data_in [10] $end
$var wire 1 v- data_in [9] $end
$var wire 1 w- data_in [8] $end
$var wire 1 x- data_in [7] $end
$var wire 1 y- data_in [6] $end
$var wire 1 z- data_in [5] $end
$var wire 1 {- data_in [4] $end
$var wire 1 |- data_in [3] $end
$var wire 1 }- data_in [2] $end
$var wire 1 ~- data_in [1] $end
$var wire 1 !. data_in [0] $end
$var wire 1 N, state [15] $end
$var wire 1 O, state [14] $end
$var wire 1 P, state [13] $end
$var wire 1 Q, state [12] $end
$var wire 1 R, state [11] $end
$var wire 1 S, state [10] $end
$var wire 1 T, state [9] $end
$var wire 1 U, state [8] $end
$var wire 1 V, state [7] $end
$var wire 1 W, state [6] $end
$var wire 1 X, state [5] $end
$var wire 1 Y, state [4] $end
$var wire 1 Z, state [3] $end
$var wire 1 [, state [2] $end
$var wire 1 \, state [1] $end
$var wire 1 ], state [0] $end

$scope module dff0 $end
$var wire 1 ], q $end
$var wire 1 !. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 7/ state $end
$upscope $end

$scope module dff1 $end
$var wire 1 \, q $end
$var wire 1 ~- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 8/ state $end
$upscope $end

$scope module dff2 $end
$var wire 1 [, q $end
$var wire 1 }- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 9/ state $end
$upscope $end

$scope module dff3 $end
$var wire 1 Z, q $end
$var wire 1 |- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :/ state $end
$upscope $end

$scope module dff4 $end
$var wire 1 Y, q $end
$var wire 1 {- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ;/ state $end
$upscope $end

$scope module dff5 $end
$var wire 1 X, q $end
$var wire 1 z- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 </ state $end
$upscope $end

$scope module dff6 $end
$var wire 1 W, q $end
$var wire 1 y- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 =/ state $end
$upscope $end

$scope module dff7 $end
$var wire 1 V, q $end
$var wire 1 x- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >/ state $end
$upscope $end

$scope module dff8 $end
$var wire 1 U, q $end
$var wire 1 w- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ?/ state $end
$upscope $end

$scope module dff9 $end
$var wire 1 T, q $end
$var wire 1 v- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @/ state $end
$upscope $end

$scope module dff10 $end
$var wire 1 S, q $end
$var wire 1 u- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 A/ state $end
$upscope $end

$scope module dff11 $end
$var wire 1 R, q $end
$var wire 1 t- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 B/ state $end
$upscope $end

$scope module dff12 $end
$var wire 1 Q, q $end
$var wire 1 s- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 C/ state $end
$upscope $end

$scope module dff13 $end
$var wire 1 P, q $end
$var wire 1 r- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 D/ state $end
$upscope $end

$scope module dff14 $end
$var wire 1 O, q $end
$var wire 1 q- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 E/ state $end
$upscope $end

$scope module dff15 $end
$var wire 1 N, q $end
$var wire 1 p- d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F/ state $end
$upscope $end
$upscope $end

$scope module reg1 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ". data_in [15] $end
$var wire 1 #. data_in [14] $end
$var wire 1 $. data_in [13] $end
$var wire 1 %. data_in [12] $end
$var wire 1 &. data_in [11] $end
$var wire 1 '. data_in [10] $end
$var wire 1 (. data_in [9] $end
$var wire 1 ). data_in [8] $end
$var wire 1 *. data_in [7] $end
$var wire 1 +. data_in [6] $end
$var wire 1 ,. data_in [5] $end
$var wire 1 -. data_in [4] $end
$var wire 1 .. data_in [3] $end
$var wire 1 /. data_in [2] $end
$var wire 1 0. data_in [1] $end
$var wire 1 1. data_in [0] $end
$var wire 1 ^, state [15] $end
$var wire 1 _, state [14] $end
$var wire 1 `, state [13] $end
$var wire 1 a, state [12] $end
$var wire 1 b, state [11] $end
$var wire 1 c, state [10] $end
$var wire 1 d, state [9] $end
$var wire 1 e, state [8] $end
$var wire 1 f, state [7] $end
$var wire 1 g, state [6] $end
$var wire 1 h, state [5] $end
$var wire 1 i, state [4] $end
$var wire 1 j, state [3] $end
$var wire 1 k, state [2] $end
$var wire 1 l, state [1] $end
$var wire 1 m, state [0] $end

$scope module dff0 $end
$var wire 1 m, q $end
$var wire 1 1. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 G/ state $end
$upscope $end

$scope module dff1 $end
$var wire 1 l, q $end
$var wire 1 0. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H/ state $end
$upscope $end

$scope module dff2 $end
$var wire 1 k, q $end
$var wire 1 /. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 I/ state $end
$upscope $end

$scope module dff3 $end
$var wire 1 j, q $end
$var wire 1 .. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 J/ state $end
$upscope $end

$scope module dff4 $end
$var wire 1 i, q $end
$var wire 1 -. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 K/ state $end
$upscope $end

$scope module dff5 $end
$var wire 1 h, q $end
$var wire 1 ,. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 L/ state $end
$upscope $end

$scope module dff6 $end
$var wire 1 g, q $end
$var wire 1 +. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 M/ state $end
$upscope $end

$scope module dff7 $end
$var wire 1 f, q $end
$var wire 1 *. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N/ state $end
$upscope $end

$scope module dff8 $end
$var wire 1 e, q $end
$var wire 1 ). d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 O/ state $end
$upscope $end

$scope module dff9 $end
$var wire 1 d, q $end
$var wire 1 (. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 P/ state $end
$upscope $end

$scope module dff10 $end
$var wire 1 c, q $end
$var wire 1 '. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Q/ state $end
$upscope $end

$scope module dff11 $end
$var wire 1 b, q $end
$var wire 1 &. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 R/ state $end
$upscope $end

$scope module dff12 $end
$var wire 1 a, q $end
$var wire 1 %. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 S/ state $end
$upscope $end

$scope module dff13 $end
$var wire 1 `, q $end
$var wire 1 $. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 T/ state $end
$upscope $end

$scope module dff14 $end
$var wire 1 _, q $end
$var wire 1 #. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 U/ state $end
$upscope $end

$scope module dff15 $end
$var wire 1 ^, q $end
$var wire 1 ". d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V/ state $end
$upscope $end
$upscope $end

$scope module reg2 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 2. data_in [15] $end
$var wire 1 3. data_in [14] $end
$var wire 1 4. data_in [13] $end
$var wire 1 5. data_in [12] $end
$var wire 1 6. data_in [11] $end
$var wire 1 7. data_in [10] $end
$var wire 1 8. data_in [9] $end
$var wire 1 9. data_in [8] $end
$var wire 1 :. data_in [7] $end
$var wire 1 ;. data_in [6] $end
$var wire 1 <. data_in [5] $end
$var wire 1 =. data_in [4] $end
$var wire 1 >. data_in [3] $end
$var wire 1 ?. data_in [2] $end
$var wire 1 @. data_in [1] $end
$var wire 1 A. data_in [0] $end
$var wire 1 n, state [15] $end
$var wire 1 o, state [14] $end
$var wire 1 p, state [13] $end
$var wire 1 q, state [12] $end
$var wire 1 r, state [11] $end
$var wire 1 s, state [10] $end
$var wire 1 t, state [9] $end
$var wire 1 u, state [8] $end
$var wire 1 v, state [7] $end
$var wire 1 w, state [6] $end
$var wire 1 x, state [5] $end
$var wire 1 y, state [4] $end
$var wire 1 z, state [3] $end
$var wire 1 {, state [2] $end
$var wire 1 |, state [1] $end
$var wire 1 }, state [0] $end

$scope module dff0 $end
$var wire 1 }, q $end
$var wire 1 A. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 W/ state $end
$upscope $end

$scope module dff1 $end
$var wire 1 |, q $end
$var wire 1 @. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 X/ state $end
$upscope $end

$scope module dff2 $end
$var wire 1 {, q $end
$var wire 1 ?. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Y/ state $end
$upscope $end

$scope module dff3 $end
$var wire 1 z, q $end
$var wire 1 >. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Z/ state $end
$upscope $end

$scope module dff4 $end
$var wire 1 y, q $end
$var wire 1 =. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 [/ state $end
$upscope $end

$scope module dff5 $end
$var wire 1 x, q $end
$var wire 1 <. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \/ state $end
$upscope $end

$scope module dff6 $end
$var wire 1 w, q $end
$var wire 1 ;. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ]/ state $end
$upscope $end

$scope module dff7 $end
$var wire 1 v, q $end
$var wire 1 :. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^/ state $end
$upscope $end

$scope module dff8 $end
$var wire 1 u, q $end
$var wire 1 9. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 _/ state $end
$upscope $end

$scope module dff9 $end
$var wire 1 t, q $end
$var wire 1 8. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `/ state $end
$upscope $end

$scope module dff10 $end
$var wire 1 s, q $end
$var wire 1 7. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 a/ state $end
$upscope $end

$scope module dff11 $end
$var wire 1 r, q $end
$var wire 1 6. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 b/ state $end
$upscope $end

$scope module dff12 $end
$var wire 1 q, q $end
$var wire 1 5. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 c/ state $end
$upscope $end

$scope module dff13 $end
$var wire 1 p, q $end
$var wire 1 4. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 d/ state $end
$upscope $end

$scope module dff14 $end
$var wire 1 o, q $end
$var wire 1 3. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 e/ state $end
$upscope $end

$scope module dff15 $end
$var wire 1 n, q $end
$var wire 1 2. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 f/ state $end
$upscope $end
$upscope $end

$scope module reg3 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 B. data_in [15] $end
$var wire 1 C. data_in [14] $end
$var wire 1 D. data_in [13] $end
$var wire 1 E. data_in [12] $end
$var wire 1 F. data_in [11] $end
$var wire 1 G. data_in [10] $end
$var wire 1 H. data_in [9] $end
$var wire 1 I. data_in [8] $end
$var wire 1 J. data_in [7] $end
$var wire 1 K. data_in [6] $end
$var wire 1 L. data_in [5] $end
$var wire 1 M. data_in [4] $end
$var wire 1 N. data_in [3] $end
$var wire 1 O. data_in [2] $end
$var wire 1 P. data_in [1] $end
$var wire 1 Q. data_in [0] $end
$var wire 1 ~, state [15] $end
$var wire 1 !- state [14] $end
$var wire 1 "- state [13] $end
$var wire 1 #- state [12] $end
$var wire 1 $- state [11] $end
$var wire 1 %- state [10] $end
$var wire 1 &- state [9] $end
$var wire 1 '- state [8] $end
$var wire 1 (- state [7] $end
$var wire 1 )- state [6] $end
$var wire 1 *- state [5] $end
$var wire 1 +- state [4] $end
$var wire 1 ,- state [3] $end
$var wire 1 -- state [2] $end
$var wire 1 .- state [1] $end
$var wire 1 /- state [0] $end

$scope module dff0 $end
$var wire 1 /- q $end
$var wire 1 Q. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 g/ state $end
$upscope $end

$scope module dff1 $end
$var wire 1 .- q $end
$var wire 1 P. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 h/ state $end
$upscope $end

$scope module dff2 $end
$var wire 1 -- q $end
$var wire 1 O. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 i/ state $end
$upscope $end

$scope module dff3 $end
$var wire 1 ,- q $end
$var wire 1 N. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 j/ state $end
$upscope $end

$scope module dff4 $end
$var wire 1 +- q $end
$var wire 1 M. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 k/ state $end
$upscope $end

$scope module dff5 $end
$var wire 1 *- q $end
$var wire 1 L. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 l/ state $end
$upscope $end

$scope module dff6 $end
$var wire 1 )- q $end
$var wire 1 K. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 m/ state $end
$upscope $end

$scope module dff7 $end
$var wire 1 (- q $end
$var wire 1 J. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 n/ state $end
$upscope $end

$scope module dff8 $end
$var wire 1 '- q $end
$var wire 1 I. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 o/ state $end
$upscope $end

$scope module dff9 $end
$var wire 1 &- q $end
$var wire 1 H. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 p/ state $end
$upscope $end

$scope module dff10 $end
$var wire 1 %- q $end
$var wire 1 G. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 q/ state $end
$upscope $end

$scope module dff11 $end
$var wire 1 $- q $end
$var wire 1 F. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 r/ state $end
$upscope $end

$scope module dff12 $end
$var wire 1 #- q $end
$var wire 1 E. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 s/ state $end
$upscope $end

$scope module dff13 $end
$var wire 1 "- q $end
$var wire 1 D. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 t/ state $end
$upscope $end

$scope module dff14 $end
$var wire 1 !- q $end
$var wire 1 C. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 u/ state $end
$upscope $end

$scope module dff15 $end
$var wire 1 ~, q $end
$var wire 1 B. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 v/ state $end
$upscope $end
$upscope $end

$scope module reg4 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 R. data_in [15] $end
$var wire 1 S. data_in [14] $end
$var wire 1 T. data_in [13] $end
$var wire 1 U. data_in [12] $end
$var wire 1 V. data_in [11] $end
$var wire 1 W. data_in [10] $end
$var wire 1 X. data_in [9] $end
$var wire 1 Y. data_in [8] $end
$var wire 1 Z. data_in [7] $end
$var wire 1 [. data_in [6] $end
$var wire 1 \. data_in [5] $end
$var wire 1 ]. data_in [4] $end
$var wire 1 ^. data_in [3] $end
$var wire 1 _. data_in [2] $end
$var wire 1 `. data_in [1] $end
$var wire 1 a. data_in [0] $end
$var wire 1 0- state [15] $end
$var wire 1 1- state [14] $end
$var wire 1 2- state [13] $end
$var wire 1 3- state [12] $end
$var wire 1 4- state [11] $end
$var wire 1 5- state [10] $end
$var wire 1 6- state [9] $end
$var wire 1 7- state [8] $end
$var wire 1 8- state [7] $end
$var wire 1 9- state [6] $end
$var wire 1 :- state [5] $end
$var wire 1 ;- state [4] $end
$var wire 1 <- state [3] $end
$var wire 1 =- state [2] $end
$var wire 1 >- state [1] $end
$var wire 1 ?- state [0] $end

$scope module dff0 $end
$var wire 1 ?- q $end
$var wire 1 a. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 w/ state $end
$upscope $end

$scope module dff1 $end
$var wire 1 >- q $end
$var wire 1 `. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 x/ state $end
$upscope $end

$scope module dff2 $end
$var wire 1 =- q $end
$var wire 1 _. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 y/ state $end
$upscope $end

$scope module dff3 $end
$var wire 1 <- q $end
$var wire 1 ^. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 z/ state $end
$upscope $end

$scope module dff4 $end
$var wire 1 ;- q $end
$var wire 1 ]. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 {/ state $end
$upscope $end

$scope module dff5 $end
$var wire 1 :- q $end
$var wire 1 \. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 |/ state $end
$upscope $end

$scope module dff6 $end
$var wire 1 9- q $end
$var wire 1 [. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 }/ state $end
$upscope $end

$scope module dff7 $end
$var wire 1 8- q $end
$var wire 1 Z. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ~/ state $end
$upscope $end

$scope module dff8 $end
$var wire 1 7- q $end
$var wire 1 Y. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 !0 state $end
$upscope $end

$scope module dff9 $end
$var wire 1 6- q $end
$var wire 1 X. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 "0 state $end
$upscope $end

$scope module dff10 $end
$var wire 1 5- q $end
$var wire 1 W. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 #0 state $end
$upscope $end

$scope module dff11 $end
$var wire 1 4- q $end
$var wire 1 V. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 $0 state $end
$upscope $end

$scope module dff12 $end
$var wire 1 3- q $end
$var wire 1 U. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 %0 state $end
$upscope $end

$scope module dff13 $end
$var wire 1 2- q $end
$var wire 1 T. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 &0 state $end
$upscope $end

$scope module dff14 $end
$var wire 1 1- q $end
$var wire 1 S. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 '0 state $end
$upscope $end

$scope module dff15 $end
$var wire 1 0- q $end
$var wire 1 R. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 (0 state $end
$upscope $end
$upscope $end

$scope module reg5 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 b. data_in [15] $end
$var wire 1 c. data_in [14] $end
$var wire 1 d. data_in [13] $end
$var wire 1 e. data_in [12] $end
$var wire 1 f. data_in [11] $end
$var wire 1 g. data_in [10] $end
$var wire 1 h. data_in [9] $end
$var wire 1 i. data_in [8] $end
$var wire 1 j. data_in [7] $end
$var wire 1 k. data_in [6] $end
$var wire 1 l. data_in [5] $end
$var wire 1 m. data_in [4] $end
$var wire 1 n. data_in [3] $end
$var wire 1 o. data_in [2] $end
$var wire 1 p. data_in [1] $end
$var wire 1 q. data_in [0] $end
$var wire 1 @- state [15] $end
$var wire 1 A- state [14] $end
$var wire 1 B- state [13] $end
$var wire 1 C- state [12] $end
$var wire 1 D- state [11] $end
$var wire 1 E- state [10] $end
$var wire 1 F- state [9] $end
$var wire 1 G- state [8] $end
$var wire 1 H- state [7] $end
$var wire 1 I- state [6] $end
$var wire 1 J- state [5] $end
$var wire 1 K- state [4] $end
$var wire 1 L- state [3] $end
$var wire 1 M- state [2] $end
$var wire 1 N- state [1] $end
$var wire 1 O- state [0] $end

$scope module dff0 $end
$var wire 1 O- q $end
$var wire 1 q. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 )0 state $end
$upscope $end

$scope module dff1 $end
$var wire 1 N- q $end
$var wire 1 p. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *0 state $end
$upscope $end

$scope module dff2 $end
$var wire 1 M- q $end
$var wire 1 o. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 +0 state $end
$upscope $end

$scope module dff3 $end
$var wire 1 L- q $end
$var wire 1 n. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,0 state $end
$upscope $end

$scope module dff4 $end
$var wire 1 K- q $end
$var wire 1 m. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 -0 state $end
$upscope $end

$scope module dff5 $end
$var wire 1 J- q $end
$var wire 1 l. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 .0 state $end
$upscope $end

$scope module dff6 $end
$var wire 1 I- q $end
$var wire 1 k. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 /0 state $end
$upscope $end

$scope module dff7 $end
$var wire 1 H- q $end
$var wire 1 j. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 00 state $end
$upscope $end

$scope module dff8 $end
$var wire 1 G- q $end
$var wire 1 i. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 10 state $end
$upscope $end

$scope module dff9 $end
$var wire 1 F- q $end
$var wire 1 h. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 20 state $end
$upscope $end

$scope module dff10 $end
$var wire 1 E- q $end
$var wire 1 g. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 30 state $end
$upscope $end

$scope module dff11 $end
$var wire 1 D- q $end
$var wire 1 f. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 40 state $end
$upscope $end

$scope module dff12 $end
$var wire 1 C- q $end
$var wire 1 e. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 50 state $end
$upscope $end

$scope module dff13 $end
$var wire 1 B- q $end
$var wire 1 d. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 60 state $end
$upscope $end

$scope module dff14 $end
$var wire 1 A- q $end
$var wire 1 c. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 70 state $end
$upscope $end

$scope module dff15 $end
$var wire 1 @- q $end
$var wire 1 b. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 80 state $end
$upscope $end
$upscope $end

$scope module reg6 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 r. data_in [15] $end
$var wire 1 s. data_in [14] $end
$var wire 1 t. data_in [13] $end
$var wire 1 u. data_in [12] $end
$var wire 1 v. data_in [11] $end
$var wire 1 w. data_in [10] $end
$var wire 1 x. data_in [9] $end
$var wire 1 y. data_in [8] $end
$var wire 1 z. data_in [7] $end
$var wire 1 {. data_in [6] $end
$var wire 1 |. data_in [5] $end
$var wire 1 }. data_in [4] $end
$var wire 1 ~. data_in [3] $end
$var wire 1 !/ data_in [2] $end
$var wire 1 "/ data_in [1] $end
$var wire 1 #/ data_in [0] $end
$var wire 1 P- state [15] $end
$var wire 1 Q- state [14] $end
$var wire 1 R- state [13] $end
$var wire 1 S- state [12] $end
$var wire 1 T- state [11] $end
$var wire 1 U- state [10] $end
$var wire 1 V- state [9] $end
$var wire 1 W- state [8] $end
$var wire 1 X- state [7] $end
$var wire 1 Y- state [6] $end
$var wire 1 Z- state [5] $end
$var wire 1 [- state [4] $end
$var wire 1 \- state [3] $end
$var wire 1 ]- state [2] $end
$var wire 1 ^- state [1] $end
$var wire 1 _- state [0] $end

$scope module dff0 $end
$var wire 1 _- q $end
$var wire 1 #/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 90 state $end
$upscope $end

$scope module dff1 $end
$var wire 1 ^- q $end
$var wire 1 "/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :0 state $end
$upscope $end

$scope module dff2 $end
$var wire 1 ]- q $end
$var wire 1 !/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ;0 state $end
$upscope $end

$scope module dff3 $end
$var wire 1 \- q $end
$var wire 1 ~. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 <0 state $end
$upscope $end

$scope module dff4 $end
$var wire 1 [- q $end
$var wire 1 }. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 =0 state $end
$upscope $end

$scope module dff5 $end
$var wire 1 Z- q $end
$var wire 1 |. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >0 state $end
$upscope $end

$scope module dff6 $end
$var wire 1 Y- q $end
$var wire 1 {. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ?0 state $end
$upscope $end

$scope module dff7 $end
$var wire 1 X- q $end
$var wire 1 z. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @0 state $end
$upscope $end

$scope module dff8 $end
$var wire 1 W- q $end
$var wire 1 y. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 A0 state $end
$upscope $end

$scope module dff9 $end
$var wire 1 V- q $end
$var wire 1 x. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 B0 state $end
$upscope $end

$scope module dff10 $end
$var wire 1 U- q $end
$var wire 1 w. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 C0 state $end
$upscope $end

$scope module dff11 $end
$var wire 1 T- q $end
$var wire 1 v. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 D0 state $end
$upscope $end

$scope module dff12 $end
$var wire 1 S- q $end
$var wire 1 u. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 E0 state $end
$upscope $end

$scope module dff13 $end
$var wire 1 R- q $end
$var wire 1 t. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F0 state $end
$upscope $end

$scope module dff14 $end
$var wire 1 Q- q $end
$var wire 1 s. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 G0 state $end
$upscope $end

$scope module dff15 $end
$var wire 1 P- q $end
$var wire 1 r. d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H0 state $end
$upscope $end
$upscope $end

$scope module reg7 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 $/ data_in [15] $end
$var wire 1 %/ data_in [14] $end
$var wire 1 &/ data_in [13] $end
$var wire 1 '/ data_in [12] $end
$var wire 1 (/ data_in [11] $end
$var wire 1 )/ data_in [10] $end
$var wire 1 */ data_in [9] $end
$var wire 1 +/ data_in [8] $end
$var wire 1 ,/ data_in [7] $end
$var wire 1 -/ data_in [6] $end
$var wire 1 ./ data_in [5] $end
$var wire 1 // data_in [4] $end
$var wire 1 0/ data_in [3] $end
$var wire 1 1/ data_in [2] $end
$var wire 1 2/ data_in [1] $end
$var wire 1 3/ data_in [0] $end
$var wire 1 `- state [15] $end
$var wire 1 a- state [14] $end
$var wire 1 b- state [13] $end
$var wire 1 c- state [12] $end
$var wire 1 d- state [11] $end
$var wire 1 e- state [10] $end
$var wire 1 f- state [9] $end
$var wire 1 g- state [8] $end
$var wire 1 h- state [7] $end
$var wire 1 i- state [6] $end
$var wire 1 j- state [5] $end
$var wire 1 k- state [4] $end
$var wire 1 l- state [3] $end
$var wire 1 m- state [2] $end
$var wire 1 n- state [1] $end
$var wire 1 o- state [0] $end

$scope module dff0 $end
$var wire 1 o- q $end
$var wire 1 3/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 I0 state $end
$upscope $end

$scope module dff1 $end
$var wire 1 n- q $end
$var wire 1 2/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 J0 state $end
$upscope $end

$scope module dff2 $end
$var wire 1 m- q $end
$var wire 1 1/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 K0 state $end
$upscope $end

$scope module dff3 $end
$var wire 1 l- q $end
$var wire 1 0/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 L0 state $end
$upscope $end

$scope module dff4 $end
$var wire 1 k- q $end
$var wire 1 // d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 M0 state $end
$upscope $end

$scope module dff5 $end
$var wire 1 j- q $end
$var wire 1 ./ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N0 state $end
$upscope $end

$scope module dff6 $end
$var wire 1 i- q $end
$var wire 1 -/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 O0 state $end
$upscope $end

$scope module dff7 $end
$var wire 1 h- q $end
$var wire 1 ,/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 P0 state $end
$upscope $end

$scope module dff8 $end
$var wire 1 g- q $end
$var wire 1 +/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Q0 state $end
$upscope $end

$scope module dff9 $end
$var wire 1 f- q $end
$var wire 1 */ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 R0 state $end
$upscope $end

$scope module dff10 $end
$var wire 1 e- q $end
$var wire 1 )/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 S0 state $end
$upscope $end

$scope module dff11 $end
$var wire 1 d- q $end
$var wire 1 (/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 T0 state $end
$upscope $end

$scope module dff12 $end
$var wire 1 c- q $end
$var wire 1 '/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 U0 state $end
$upscope $end

$scope module dff13 $end
$var wire 1 b- q $end
$var wire 1 &/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V0 state $end
$upscope $end

$scope module dff14 $end
$var wire 1 a- q $end
$var wire 1 %/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 W0 state $end
$upscope $end

$scope module dff15 $end
$var wire 1 `- q $end
$var wire 1 $/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 X0 state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module ADD $end
$var parameter 32 Y0 N $end
$var wire 1 n! A [15] $end
$var wire 1 o! A [14] $end
$var wire 1 p! A [13] $end
$var wire 1 q! A [12] $end
$var wire 1 r! A [11] $end
$var wire 1 s! A [10] $end
$var wire 1 t! A [9] $end
$var wire 1 u! A [8] $end
$var wire 1 v! A [7] $end
$var wire 1 w! A [6] $end
$var wire 1 x! A [5] $end
$var wire 1 y! A [4] $end
$var wire 1 z! A [3] $end
$var wire 1 {! A [2] $end
$var wire 1 |! A [1] $end
$var wire 1 }! A [0] $end
$var wire 1 N! B [15] $end
$var wire 1 O! B [14] $end
$var wire 1 P! B [13] $end
$var wire 1 Q! B [12] $end
$var wire 1 R! B [11] $end
$var wire 1 S! B [10] $end
$var wire 1 T! B [9] $end
$var wire 1 U! B [8] $end
$var wire 1 V! B [7] $end
$var wire 1 W! B [6] $end
$var wire 1 X! B [5] $end
$var wire 1 Y! B [4] $end
$var wire 1 Z! B [3] $end
$var wire 1 [! B [2] $end
$var wire 1 \! B [1] $end
$var wire 1 ]! B [0] $end
$var wire 1 Z0 C_in $end
$var wire 1 4+ S [15] $end
$var wire 1 5+ S [14] $end
$var wire 1 6+ S [13] $end
$var wire 1 7+ S [12] $end
$var wire 1 8+ S [11] $end
$var wire 1 9+ S [10] $end
$var wire 1 :+ S [9] $end
$var wire 1 ;+ S [8] $end
$var wire 1 <+ S [7] $end
$var wire 1 =+ S [6] $end
$var wire 1 >+ S [5] $end
$var wire 1 ?+ S [4] $end
$var wire 1 @+ S [3] $end
$var wire 1 A+ S [2] $end
$var wire 1 B+ S [1] $end
$var wire 1 C+ S [0] $end
$var wire 1 [0 C_out $end
$var wire 1 \0 C_out0 $end
$var wire 1 ]0 C_out1 $end
$var wire 1 ^0 C_out2 $end
$var wire 1 _0 G0 $end
$var wire 1 `0 P0 $end
$var wire 1 a0 G1 $end
$var wire 1 b0 P1 $end
$var wire 1 c0 G2 $end
$var wire 1 d0 P2 $end
$var wire 1 e0 G3 $end
$var wire 1 f0 P3 $end
$var wire 1 g0 C_in1 $end
$var wire 1 h0 C_in2 $end
$var wire 1 i0 C_in3 $end

$scope module cla_4_1 $end
$var parameter 32 j0 N $end
$var wire 1 z! A [3] $end
$var wire 1 {! A [2] $end
$var wire 1 |! A [1] $end
$var wire 1 }! A [0] $end
$var wire 1 Z! B [3] $end
$var wire 1 [! B [2] $end
$var wire 1 \! B [1] $end
$var wire 1 ]! B [0] $end
$var wire 1 Z0 C_in $end
$var wire 1 @+ S [3] $end
$var wire 1 A+ S [2] $end
$var wire 1 B+ S [1] $end
$var wire 1 C+ S [0] $end
$var wire 1 \0 C_out $end
$var wire 1 _0 G $end
$var wire 1 `0 P $end
$var wire 1 k0 C_out0 $end
$var wire 1 l0 C_out1 $end
$var wire 1 m0 C_out2 $end

$scope module carryLogic0 $end
$var wire 1 }! A $end
$var wire 1 ]! B $end
$var wire 1 Z0 Cin $end
$var wire 1 k0 C_out $end
$var wire 1 n0 P $end
$var wire 1 o0 G $end
$var wire 1 p0 G_inv $end
$var wire 1 q0 P_nor $end
$var wire 1 r0 C_out_1 $end

$scope module nand_G $end
$var wire 1 }! in1 $end
$var wire 1 ]! in2 $end
$var wire 1 p0 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 p0 in1 $end
$var wire 1 o0 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 }! in1 $end
$var wire 1 ]! in2 $end
$var wire 1 q0 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 q0 in1 $end
$var wire 1 n0 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 n0 in1 $end
$var wire 1 Z0 in2 $end
$var wire 1 r0 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 p0 in1 $end
$var wire 1 r0 in2 $end
$var wire 1 k0 out $end
$upscope $end
$upscope $end

$scope module fullAdder0 $end
$var wire 1 }! A $end
$var wire 1 ]! B $end
$var wire 1 Z0 C_in $end
$var wire 1 C+ S $end
$var wire 1 s0 C_out $end
$var wire 1 t0 nand1_out $end
$var wire 1 u0 nand2_out $end
$var wire 1 v0 nand3_out $end

$scope module nand1 $end
$var wire 1 }! in1 $end
$var wire 1 ]! in2 $end
$var wire 1 t0 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ]! in1 $end
$var wire 1 Z0 in2 $end
$var wire 1 u0 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 }! in1 $end
$var wire 1 Z0 in2 $end
$var wire 1 v0 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 t0 in1 $end
$var wire 1 u0 in2 $end
$var wire 1 v0 in3 $end
$var wire 1 s0 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 }! in1 $end
$var wire 1 ]! in2 $end
$var wire 1 Z0 in3 $end
$var wire 1 C+ out $end
$upscope $end
$upscope $end

$scope module carryLogic1 $end
$var wire 1 |! A $end
$var wire 1 \! B $end
$var wire 1 k0 Cin $end
$var wire 1 l0 C_out $end
$var wire 1 w0 P $end
$var wire 1 x0 G $end
$var wire 1 y0 G_inv $end
$var wire 1 z0 P_nor $end
$var wire 1 {0 C_out_1 $end

$scope module nand_G $end
$var wire 1 |! in1 $end
$var wire 1 \! in2 $end
$var wire 1 y0 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 y0 in1 $end
$var wire 1 x0 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 |! in1 $end
$var wire 1 \! in2 $end
$var wire 1 z0 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 z0 in1 $end
$var wire 1 w0 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 w0 in1 $end
$var wire 1 k0 in2 $end
$var wire 1 {0 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 y0 in1 $end
$var wire 1 {0 in2 $end
$var wire 1 l0 out $end
$upscope $end
$upscope $end

$scope module fullAdder1 $end
$var wire 1 |! A $end
$var wire 1 \! B $end
$var wire 1 k0 C_in $end
$var wire 1 B+ S $end
$var wire 1 |0 C_out $end
$var wire 1 }0 nand1_out $end
$var wire 1 ~0 nand2_out $end
$var wire 1 !1 nand3_out $end

$scope module nand1 $end
$var wire 1 |! in1 $end
$var wire 1 \! in2 $end
$var wire 1 }0 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 \! in1 $end
$var wire 1 k0 in2 $end
$var wire 1 ~0 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 |! in1 $end
$var wire 1 k0 in2 $end
$var wire 1 !1 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 }0 in1 $end
$var wire 1 ~0 in2 $end
$var wire 1 !1 in3 $end
$var wire 1 |0 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 |! in1 $end
$var wire 1 \! in2 $end
$var wire 1 k0 in3 $end
$var wire 1 B+ out $end
$upscope $end
$upscope $end

$scope module carryLogic2 $end
$var wire 1 {! A $end
$var wire 1 [! B $end
$var wire 1 l0 Cin $end
$var wire 1 m0 C_out $end
$var wire 1 "1 P $end
$var wire 1 #1 G $end
$var wire 1 $1 G_inv $end
$var wire 1 %1 P_nor $end
$var wire 1 &1 C_out_1 $end

$scope module nand_G $end
$var wire 1 {! in1 $end
$var wire 1 [! in2 $end
$var wire 1 $1 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 $1 in1 $end
$var wire 1 #1 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 {! in1 $end
$var wire 1 [! in2 $end
$var wire 1 %1 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 %1 in1 $end
$var wire 1 "1 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 "1 in1 $end
$var wire 1 l0 in2 $end
$var wire 1 &1 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 $1 in1 $end
$var wire 1 &1 in2 $end
$var wire 1 m0 out $end
$upscope $end
$upscope $end

$scope module fullAdder2 $end
$var wire 1 {! A $end
$var wire 1 [! B $end
$var wire 1 l0 C_in $end
$var wire 1 A+ S $end
$var wire 1 '1 C_out $end
$var wire 1 (1 nand1_out $end
$var wire 1 )1 nand2_out $end
$var wire 1 *1 nand3_out $end

$scope module nand1 $end
$var wire 1 {! in1 $end
$var wire 1 [! in2 $end
$var wire 1 (1 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 [! in1 $end
$var wire 1 l0 in2 $end
$var wire 1 )1 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 {! in1 $end
$var wire 1 l0 in2 $end
$var wire 1 *1 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 (1 in1 $end
$var wire 1 )1 in2 $end
$var wire 1 *1 in3 $end
$var wire 1 '1 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 {! in1 $end
$var wire 1 [! in2 $end
$var wire 1 l0 in3 $end
$var wire 1 A+ out $end
$upscope $end
$upscope $end

$scope module carryLogic3 $end
$var wire 1 z! A $end
$var wire 1 Z! B $end
$var wire 1 m0 Cin $end
$var wire 1 \0 C_out $end
$var wire 1 `0 P $end
$var wire 1 _0 G $end
$var wire 1 +1 G_inv $end
$var wire 1 ,1 P_nor $end
$var wire 1 -1 C_out_1 $end

$scope module nand_G $end
$var wire 1 z! in1 $end
$var wire 1 Z! in2 $end
$var wire 1 +1 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 +1 in1 $end
$var wire 1 _0 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 z! in1 $end
$var wire 1 Z! in2 $end
$var wire 1 ,1 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 ,1 in1 $end
$var wire 1 `0 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 `0 in1 $end
$var wire 1 m0 in2 $end
$var wire 1 -1 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 +1 in1 $end
$var wire 1 -1 in2 $end
$var wire 1 \0 out $end
$upscope $end
$upscope $end

$scope module fullAdder3 $end
$var wire 1 z! A $end
$var wire 1 Z! B $end
$var wire 1 m0 C_in $end
$var wire 1 @+ S $end
$var wire 1 .1 C_out $end
$var wire 1 /1 nand1_out $end
$var wire 1 01 nand2_out $end
$var wire 1 11 nand3_out $end

$scope module nand1 $end
$var wire 1 z! in1 $end
$var wire 1 Z! in2 $end
$var wire 1 /1 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Z! in1 $end
$var wire 1 m0 in2 $end
$var wire 1 01 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 z! in1 $end
$var wire 1 m0 in2 $end
$var wire 1 11 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 /1 in1 $end
$var wire 1 01 in2 $end
$var wire 1 11 in3 $end
$var wire 1 .1 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 z! in1 $end
$var wire 1 Z! in2 $end
$var wire 1 m0 in3 $end
$var wire 1 @+ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module compute1 $end
$var wire 1 `0 P $end
$var wire 1 _0 G $end
$var wire 1 \0 C_in_prev $end
$var wire 1 g0 C_in $end
$var wire 1 21 G_in $end
$var wire 1 31 C_out_1 $end
$var wire 1 41 G_inv $end

$scope module not1 $end
$var wire 1 _0 in1 $end
$var wire 1 41 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 `0 in1 $end
$var wire 1 \0 in2 $end
$var wire 1 31 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 41 in1 $end
$var wire 1 31 in2 $end
$var wire 1 g0 out $end
$upscope $end
$upscope $end

$scope module cla_4_2 $end
$var parameter 32 51 N $end
$var wire 1 v! A [3] $end
$var wire 1 w! A [2] $end
$var wire 1 x! A [1] $end
$var wire 1 y! A [0] $end
$var wire 1 V! B [3] $end
$var wire 1 W! B [2] $end
$var wire 1 X! B [1] $end
$var wire 1 Y! B [0] $end
$var wire 1 g0 C_in $end
$var wire 1 <+ S [3] $end
$var wire 1 =+ S [2] $end
$var wire 1 >+ S [1] $end
$var wire 1 ?+ S [0] $end
$var wire 1 ]0 C_out $end
$var wire 1 a0 G $end
$var wire 1 b0 P $end
$var wire 1 61 C_out0 $end
$var wire 1 71 C_out1 $end
$var wire 1 81 C_out2 $end

$scope module carryLogic0 $end
$var wire 1 y! A $end
$var wire 1 Y! B $end
$var wire 1 g0 Cin $end
$var wire 1 61 C_out $end
$var wire 1 91 P $end
$var wire 1 :1 G $end
$var wire 1 ;1 G_inv $end
$var wire 1 <1 P_nor $end
$var wire 1 =1 C_out_1 $end

$scope module nand_G $end
$var wire 1 y! in1 $end
$var wire 1 Y! in2 $end
$var wire 1 ;1 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 ;1 in1 $end
$var wire 1 :1 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 y! in1 $end
$var wire 1 Y! in2 $end
$var wire 1 <1 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 <1 in1 $end
$var wire 1 91 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 91 in1 $end
$var wire 1 g0 in2 $end
$var wire 1 =1 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 ;1 in1 $end
$var wire 1 =1 in2 $end
$var wire 1 61 out $end
$upscope $end
$upscope $end

$scope module fullAdder0 $end
$var wire 1 y! A $end
$var wire 1 Y! B $end
$var wire 1 g0 C_in $end
$var wire 1 ?+ S $end
$var wire 1 >1 C_out $end
$var wire 1 ?1 nand1_out $end
$var wire 1 @1 nand2_out $end
$var wire 1 A1 nand3_out $end

$scope module nand1 $end
$var wire 1 y! in1 $end
$var wire 1 Y! in2 $end
$var wire 1 ?1 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Y! in1 $end
$var wire 1 g0 in2 $end
$var wire 1 @1 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 y! in1 $end
$var wire 1 g0 in2 $end
$var wire 1 A1 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 ?1 in1 $end
$var wire 1 @1 in2 $end
$var wire 1 A1 in3 $end
$var wire 1 >1 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 y! in1 $end
$var wire 1 Y! in2 $end
$var wire 1 g0 in3 $end
$var wire 1 ?+ out $end
$upscope $end
$upscope $end

$scope module carryLogic1 $end
$var wire 1 x! A $end
$var wire 1 X! B $end
$var wire 1 61 Cin $end
$var wire 1 71 C_out $end
$var wire 1 B1 P $end
$var wire 1 C1 G $end
$var wire 1 D1 G_inv $end
$var wire 1 E1 P_nor $end
$var wire 1 F1 C_out_1 $end

$scope module nand_G $end
$var wire 1 x! in1 $end
$var wire 1 X! in2 $end
$var wire 1 D1 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 D1 in1 $end
$var wire 1 C1 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 x! in1 $end
$var wire 1 X! in2 $end
$var wire 1 E1 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 E1 in1 $end
$var wire 1 B1 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 B1 in1 $end
$var wire 1 61 in2 $end
$var wire 1 F1 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 D1 in1 $end
$var wire 1 F1 in2 $end
$var wire 1 71 out $end
$upscope $end
$upscope $end

$scope module fullAdder1 $end
$var wire 1 x! A $end
$var wire 1 X! B $end
$var wire 1 61 C_in $end
$var wire 1 >+ S $end
$var wire 1 G1 C_out $end
$var wire 1 H1 nand1_out $end
$var wire 1 I1 nand2_out $end
$var wire 1 J1 nand3_out $end

$scope module nand1 $end
$var wire 1 x! in1 $end
$var wire 1 X! in2 $end
$var wire 1 H1 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 X! in1 $end
$var wire 1 61 in2 $end
$var wire 1 I1 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 x! in1 $end
$var wire 1 61 in2 $end
$var wire 1 J1 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 H1 in1 $end
$var wire 1 I1 in2 $end
$var wire 1 J1 in3 $end
$var wire 1 G1 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 x! in1 $end
$var wire 1 X! in2 $end
$var wire 1 61 in3 $end
$var wire 1 >+ out $end
$upscope $end
$upscope $end

$scope module carryLogic2 $end
$var wire 1 w! A $end
$var wire 1 W! B $end
$var wire 1 71 Cin $end
$var wire 1 81 C_out $end
$var wire 1 K1 P $end
$var wire 1 L1 G $end
$var wire 1 M1 G_inv $end
$var wire 1 N1 P_nor $end
$var wire 1 O1 C_out_1 $end

$scope module nand_G $end
$var wire 1 w! in1 $end
$var wire 1 W! in2 $end
$var wire 1 M1 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 M1 in1 $end
$var wire 1 L1 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 w! in1 $end
$var wire 1 W! in2 $end
$var wire 1 N1 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 N1 in1 $end
$var wire 1 K1 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 K1 in1 $end
$var wire 1 71 in2 $end
$var wire 1 O1 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 M1 in1 $end
$var wire 1 O1 in2 $end
$var wire 1 81 out $end
$upscope $end
$upscope $end

$scope module fullAdder2 $end
$var wire 1 w! A $end
$var wire 1 W! B $end
$var wire 1 71 C_in $end
$var wire 1 =+ S $end
$var wire 1 P1 C_out $end
$var wire 1 Q1 nand1_out $end
$var wire 1 R1 nand2_out $end
$var wire 1 S1 nand3_out $end

$scope module nand1 $end
$var wire 1 w! in1 $end
$var wire 1 W! in2 $end
$var wire 1 Q1 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 W! in1 $end
$var wire 1 71 in2 $end
$var wire 1 R1 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 w! in1 $end
$var wire 1 71 in2 $end
$var wire 1 S1 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 Q1 in1 $end
$var wire 1 R1 in2 $end
$var wire 1 S1 in3 $end
$var wire 1 P1 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 w! in1 $end
$var wire 1 W! in2 $end
$var wire 1 71 in3 $end
$var wire 1 =+ out $end
$upscope $end
$upscope $end

$scope module carryLogic3 $end
$var wire 1 v! A $end
$var wire 1 V! B $end
$var wire 1 81 Cin $end
$var wire 1 ]0 C_out $end
$var wire 1 b0 P $end
$var wire 1 a0 G $end
$var wire 1 T1 G_inv $end
$var wire 1 U1 P_nor $end
$var wire 1 V1 C_out_1 $end

$scope module nand_G $end
$var wire 1 v! in1 $end
$var wire 1 V! in2 $end
$var wire 1 T1 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 T1 in1 $end
$var wire 1 a0 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 v! in1 $end
$var wire 1 V! in2 $end
$var wire 1 U1 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 U1 in1 $end
$var wire 1 b0 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 b0 in1 $end
$var wire 1 81 in2 $end
$var wire 1 V1 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 T1 in1 $end
$var wire 1 V1 in2 $end
$var wire 1 ]0 out $end
$upscope $end
$upscope $end

$scope module fullAdder3 $end
$var wire 1 v! A $end
$var wire 1 V! B $end
$var wire 1 81 C_in $end
$var wire 1 <+ S $end
$var wire 1 W1 C_out $end
$var wire 1 X1 nand1_out $end
$var wire 1 Y1 nand2_out $end
$var wire 1 Z1 nand3_out $end

$scope module nand1 $end
$var wire 1 v! in1 $end
$var wire 1 V! in2 $end
$var wire 1 X1 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 V! in1 $end
$var wire 1 81 in2 $end
$var wire 1 Y1 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 v! in1 $end
$var wire 1 81 in2 $end
$var wire 1 Z1 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 X1 in1 $end
$var wire 1 Y1 in2 $end
$var wire 1 Z1 in3 $end
$var wire 1 W1 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 v! in1 $end
$var wire 1 V! in2 $end
$var wire 1 81 in3 $end
$var wire 1 <+ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module compute2 $end
$var wire 1 b0 P $end
$var wire 1 a0 G $end
$var wire 1 ]0 C_in_prev $end
$var wire 1 h0 C_in $end
$var wire 1 [1 G_in $end
$var wire 1 \1 C_out_1 $end
$var wire 1 ]1 G_inv $end

$scope module not1 $end
$var wire 1 a0 in1 $end
$var wire 1 ]1 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 b0 in1 $end
$var wire 1 ]0 in2 $end
$var wire 1 \1 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 ]1 in1 $end
$var wire 1 \1 in2 $end
$var wire 1 h0 out $end
$upscope $end
$upscope $end

$scope module cla_4_3 $end
$var parameter 32 ^1 N $end
$var wire 1 r! A [3] $end
$var wire 1 s! A [2] $end
$var wire 1 t! A [1] $end
$var wire 1 u! A [0] $end
$var wire 1 R! B [3] $end
$var wire 1 S! B [2] $end
$var wire 1 T! B [1] $end
$var wire 1 U! B [0] $end
$var wire 1 h0 C_in $end
$var wire 1 8+ S [3] $end
$var wire 1 9+ S [2] $end
$var wire 1 :+ S [1] $end
$var wire 1 ;+ S [0] $end
$var wire 1 ^0 C_out $end
$var wire 1 c0 G $end
$var wire 1 d0 P $end
$var wire 1 _1 C_out0 $end
$var wire 1 `1 C_out1 $end
$var wire 1 a1 C_out2 $end

$scope module carryLogic0 $end
$var wire 1 u! A $end
$var wire 1 U! B $end
$var wire 1 h0 Cin $end
$var wire 1 _1 C_out $end
$var wire 1 b1 P $end
$var wire 1 c1 G $end
$var wire 1 d1 G_inv $end
$var wire 1 e1 P_nor $end
$var wire 1 f1 C_out_1 $end

$scope module nand_G $end
$var wire 1 u! in1 $end
$var wire 1 U! in2 $end
$var wire 1 d1 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 d1 in1 $end
$var wire 1 c1 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 u! in1 $end
$var wire 1 U! in2 $end
$var wire 1 e1 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 e1 in1 $end
$var wire 1 b1 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 b1 in1 $end
$var wire 1 h0 in2 $end
$var wire 1 f1 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 d1 in1 $end
$var wire 1 f1 in2 $end
$var wire 1 _1 out $end
$upscope $end
$upscope $end

$scope module fullAdder0 $end
$var wire 1 u! A $end
$var wire 1 U! B $end
$var wire 1 h0 C_in $end
$var wire 1 ;+ S $end
$var wire 1 g1 C_out $end
$var wire 1 h1 nand1_out $end
$var wire 1 i1 nand2_out $end
$var wire 1 j1 nand3_out $end

$scope module nand1 $end
$var wire 1 u! in1 $end
$var wire 1 U! in2 $end
$var wire 1 h1 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 U! in1 $end
$var wire 1 h0 in2 $end
$var wire 1 i1 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 u! in1 $end
$var wire 1 h0 in2 $end
$var wire 1 j1 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 h1 in1 $end
$var wire 1 i1 in2 $end
$var wire 1 j1 in3 $end
$var wire 1 g1 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 u! in1 $end
$var wire 1 U! in2 $end
$var wire 1 h0 in3 $end
$var wire 1 ;+ out $end
$upscope $end
$upscope $end

$scope module carryLogic1 $end
$var wire 1 t! A $end
$var wire 1 T! B $end
$var wire 1 _1 Cin $end
$var wire 1 `1 C_out $end
$var wire 1 k1 P $end
$var wire 1 l1 G $end
$var wire 1 m1 G_inv $end
$var wire 1 n1 P_nor $end
$var wire 1 o1 C_out_1 $end

$scope module nand_G $end
$var wire 1 t! in1 $end
$var wire 1 T! in2 $end
$var wire 1 m1 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 m1 in1 $end
$var wire 1 l1 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 t! in1 $end
$var wire 1 T! in2 $end
$var wire 1 n1 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 n1 in1 $end
$var wire 1 k1 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 k1 in1 $end
$var wire 1 _1 in2 $end
$var wire 1 o1 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 m1 in1 $end
$var wire 1 o1 in2 $end
$var wire 1 `1 out $end
$upscope $end
$upscope $end

$scope module fullAdder1 $end
$var wire 1 t! A $end
$var wire 1 T! B $end
$var wire 1 _1 C_in $end
$var wire 1 :+ S $end
$var wire 1 p1 C_out $end
$var wire 1 q1 nand1_out $end
$var wire 1 r1 nand2_out $end
$var wire 1 s1 nand3_out $end

$scope module nand1 $end
$var wire 1 t! in1 $end
$var wire 1 T! in2 $end
$var wire 1 q1 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 T! in1 $end
$var wire 1 _1 in2 $end
$var wire 1 r1 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 t! in1 $end
$var wire 1 _1 in2 $end
$var wire 1 s1 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 q1 in1 $end
$var wire 1 r1 in2 $end
$var wire 1 s1 in3 $end
$var wire 1 p1 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 t! in1 $end
$var wire 1 T! in2 $end
$var wire 1 _1 in3 $end
$var wire 1 :+ out $end
$upscope $end
$upscope $end

$scope module carryLogic2 $end
$var wire 1 s! A $end
$var wire 1 S! B $end
$var wire 1 `1 Cin $end
$var wire 1 a1 C_out $end
$var wire 1 t1 P $end
$var wire 1 u1 G $end
$var wire 1 v1 G_inv $end
$var wire 1 w1 P_nor $end
$var wire 1 x1 C_out_1 $end

$scope module nand_G $end
$var wire 1 s! in1 $end
$var wire 1 S! in2 $end
$var wire 1 v1 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 v1 in1 $end
$var wire 1 u1 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 s! in1 $end
$var wire 1 S! in2 $end
$var wire 1 w1 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 w1 in1 $end
$var wire 1 t1 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 t1 in1 $end
$var wire 1 `1 in2 $end
$var wire 1 x1 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 v1 in1 $end
$var wire 1 x1 in2 $end
$var wire 1 a1 out $end
$upscope $end
$upscope $end

$scope module fullAdder2 $end
$var wire 1 s! A $end
$var wire 1 S! B $end
$var wire 1 `1 C_in $end
$var wire 1 9+ S $end
$var wire 1 y1 C_out $end
$var wire 1 z1 nand1_out $end
$var wire 1 {1 nand2_out $end
$var wire 1 |1 nand3_out $end

$scope module nand1 $end
$var wire 1 s! in1 $end
$var wire 1 S! in2 $end
$var wire 1 z1 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 S! in1 $end
$var wire 1 `1 in2 $end
$var wire 1 {1 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 s! in1 $end
$var wire 1 `1 in2 $end
$var wire 1 |1 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 z1 in1 $end
$var wire 1 {1 in2 $end
$var wire 1 |1 in3 $end
$var wire 1 y1 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 s! in1 $end
$var wire 1 S! in2 $end
$var wire 1 `1 in3 $end
$var wire 1 9+ out $end
$upscope $end
$upscope $end

$scope module carryLogic3 $end
$var wire 1 r! A $end
$var wire 1 R! B $end
$var wire 1 a1 Cin $end
$var wire 1 ^0 C_out $end
$var wire 1 d0 P $end
$var wire 1 c0 G $end
$var wire 1 }1 G_inv $end
$var wire 1 ~1 P_nor $end
$var wire 1 !2 C_out_1 $end

$scope module nand_G $end
$var wire 1 r! in1 $end
$var wire 1 R! in2 $end
$var wire 1 }1 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 }1 in1 $end
$var wire 1 c0 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 r! in1 $end
$var wire 1 R! in2 $end
$var wire 1 ~1 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 ~1 in1 $end
$var wire 1 d0 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 d0 in1 $end
$var wire 1 a1 in2 $end
$var wire 1 !2 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 }1 in1 $end
$var wire 1 !2 in2 $end
$var wire 1 ^0 out $end
$upscope $end
$upscope $end

$scope module fullAdder3 $end
$var wire 1 r! A $end
$var wire 1 R! B $end
$var wire 1 a1 C_in $end
$var wire 1 8+ S $end
$var wire 1 "2 C_out $end
$var wire 1 #2 nand1_out $end
$var wire 1 $2 nand2_out $end
$var wire 1 %2 nand3_out $end

$scope module nand1 $end
$var wire 1 r! in1 $end
$var wire 1 R! in2 $end
$var wire 1 #2 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 R! in1 $end
$var wire 1 a1 in2 $end
$var wire 1 $2 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 r! in1 $end
$var wire 1 a1 in2 $end
$var wire 1 %2 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 #2 in1 $end
$var wire 1 $2 in2 $end
$var wire 1 %2 in3 $end
$var wire 1 "2 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 r! in1 $end
$var wire 1 R! in2 $end
$var wire 1 a1 in3 $end
$var wire 1 8+ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module compute3 $end
$var wire 1 d0 P $end
$var wire 1 c0 G $end
$var wire 1 ^0 C_in_prev $end
$var wire 1 i0 C_in $end
$var wire 1 &2 G_in $end
$var wire 1 '2 C_out_1 $end
$var wire 1 (2 G_inv $end

$scope module not1 $end
$var wire 1 c0 in1 $end
$var wire 1 (2 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 d0 in1 $end
$var wire 1 ^0 in2 $end
$var wire 1 '2 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 (2 in1 $end
$var wire 1 '2 in2 $end
$var wire 1 i0 out $end
$upscope $end
$upscope $end

$scope module cla_4_4 $end
$var parameter 32 )2 N $end
$var wire 1 n! A [3] $end
$var wire 1 o! A [2] $end
$var wire 1 p! A [1] $end
$var wire 1 q! A [0] $end
$var wire 1 N! B [3] $end
$var wire 1 O! B [2] $end
$var wire 1 P! B [1] $end
$var wire 1 Q! B [0] $end
$var wire 1 i0 C_in $end
$var wire 1 4+ S [3] $end
$var wire 1 5+ S [2] $end
$var wire 1 6+ S [1] $end
$var wire 1 7+ S [0] $end
$var wire 1 [0 C_out $end
$var wire 1 e0 G $end
$var wire 1 f0 P $end
$var wire 1 *2 C_out0 $end
$var wire 1 +2 C_out1 $end
$var wire 1 ,2 C_out2 $end

$scope module carryLogic0 $end
$var wire 1 q! A $end
$var wire 1 Q! B $end
$var wire 1 i0 Cin $end
$var wire 1 *2 C_out $end
$var wire 1 -2 P $end
$var wire 1 .2 G $end
$var wire 1 /2 G_inv $end
$var wire 1 02 P_nor $end
$var wire 1 12 C_out_1 $end

$scope module nand_G $end
$var wire 1 q! in1 $end
$var wire 1 Q! in2 $end
$var wire 1 /2 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 /2 in1 $end
$var wire 1 .2 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 q! in1 $end
$var wire 1 Q! in2 $end
$var wire 1 02 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 02 in1 $end
$var wire 1 -2 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 -2 in1 $end
$var wire 1 i0 in2 $end
$var wire 1 12 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 /2 in1 $end
$var wire 1 12 in2 $end
$var wire 1 *2 out $end
$upscope $end
$upscope $end

$scope module fullAdder0 $end
$var wire 1 q! A $end
$var wire 1 Q! B $end
$var wire 1 i0 C_in $end
$var wire 1 7+ S $end
$var wire 1 22 C_out $end
$var wire 1 32 nand1_out $end
$var wire 1 42 nand2_out $end
$var wire 1 52 nand3_out $end

$scope module nand1 $end
$var wire 1 q! in1 $end
$var wire 1 Q! in2 $end
$var wire 1 32 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Q! in1 $end
$var wire 1 i0 in2 $end
$var wire 1 42 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 q! in1 $end
$var wire 1 i0 in2 $end
$var wire 1 52 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 32 in1 $end
$var wire 1 42 in2 $end
$var wire 1 52 in3 $end
$var wire 1 22 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 q! in1 $end
$var wire 1 Q! in2 $end
$var wire 1 i0 in3 $end
$var wire 1 7+ out $end
$upscope $end
$upscope $end

$scope module carryLogic1 $end
$var wire 1 p! A $end
$var wire 1 P! B $end
$var wire 1 *2 Cin $end
$var wire 1 +2 C_out $end
$var wire 1 62 P $end
$var wire 1 72 G $end
$var wire 1 82 G_inv $end
$var wire 1 92 P_nor $end
$var wire 1 :2 C_out_1 $end

$scope module nand_G $end
$var wire 1 p! in1 $end
$var wire 1 P! in2 $end
$var wire 1 82 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 82 in1 $end
$var wire 1 72 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 p! in1 $end
$var wire 1 P! in2 $end
$var wire 1 92 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 92 in1 $end
$var wire 1 62 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 62 in1 $end
$var wire 1 *2 in2 $end
$var wire 1 :2 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 82 in1 $end
$var wire 1 :2 in2 $end
$var wire 1 +2 out $end
$upscope $end
$upscope $end

$scope module fullAdder1 $end
$var wire 1 p! A $end
$var wire 1 P! B $end
$var wire 1 *2 C_in $end
$var wire 1 6+ S $end
$var wire 1 ;2 C_out $end
$var wire 1 <2 nand1_out $end
$var wire 1 =2 nand2_out $end
$var wire 1 >2 nand3_out $end

$scope module nand1 $end
$var wire 1 p! in1 $end
$var wire 1 P! in2 $end
$var wire 1 <2 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 P! in1 $end
$var wire 1 *2 in2 $end
$var wire 1 =2 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 p! in1 $end
$var wire 1 *2 in2 $end
$var wire 1 >2 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 <2 in1 $end
$var wire 1 =2 in2 $end
$var wire 1 >2 in3 $end
$var wire 1 ;2 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 p! in1 $end
$var wire 1 P! in2 $end
$var wire 1 *2 in3 $end
$var wire 1 6+ out $end
$upscope $end
$upscope $end

$scope module carryLogic2 $end
$var wire 1 o! A $end
$var wire 1 O! B $end
$var wire 1 +2 Cin $end
$var wire 1 ,2 C_out $end
$var wire 1 ?2 P $end
$var wire 1 @2 G $end
$var wire 1 A2 G_inv $end
$var wire 1 B2 P_nor $end
$var wire 1 C2 C_out_1 $end

$scope module nand_G $end
$var wire 1 o! in1 $end
$var wire 1 O! in2 $end
$var wire 1 A2 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 A2 in1 $end
$var wire 1 @2 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 o! in1 $end
$var wire 1 O! in2 $end
$var wire 1 B2 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 B2 in1 $end
$var wire 1 ?2 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 ?2 in1 $end
$var wire 1 +2 in2 $end
$var wire 1 C2 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 A2 in1 $end
$var wire 1 C2 in2 $end
$var wire 1 ,2 out $end
$upscope $end
$upscope $end

$scope module fullAdder2 $end
$var wire 1 o! A $end
$var wire 1 O! B $end
$var wire 1 +2 C_in $end
$var wire 1 5+ S $end
$var wire 1 D2 C_out $end
$var wire 1 E2 nand1_out $end
$var wire 1 F2 nand2_out $end
$var wire 1 G2 nand3_out $end

$scope module nand1 $end
$var wire 1 o! in1 $end
$var wire 1 O! in2 $end
$var wire 1 E2 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 O! in1 $end
$var wire 1 +2 in2 $end
$var wire 1 F2 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 o! in1 $end
$var wire 1 +2 in2 $end
$var wire 1 G2 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 E2 in1 $end
$var wire 1 F2 in2 $end
$var wire 1 G2 in3 $end
$var wire 1 D2 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 o! in1 $end
$var wire 1 O! in2 $end
$var wire 1 +2 in3 $end
$var wire 1 5+ out $end
$upscope $end
$upscope $end

$scope module carryLogic3 $end
$var wire 1 n! A $end
$var wire 1 N! B $end
$var wire 1 ,2 Cin $end
$var wire 1 [0 C_out $end
$var wire 1 f0 P $end
$var wire 1 e0 G $end
$var wire 1 H2 G_inv $end
$var wire 1 I2 P_nor $end
$var wire 1 J2 C_out_1 $end

$scope module nand_G $end
$var wire 1 n! in1 $end
$var wire 1 N! in2 $end
$var wire 1 H2 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 H2 in1 $end
$var wire 1 e0 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 n! in1 $end
$var wire 1 N! in2 $end
$var wire 1 I2 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 I2 in1 $end
$var wire 1 f0 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 f0 in1 $end
$var wire 1 ,2 in2 $end
$var wire 1 J2 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 H2 in1 $end
$var wire 1 J2 in2 $end
$var wire 1 [0 out $end
$upscope $end
$upscope $end

$scope module fullAdder3 $end
$var wire 1 n! A $end
$var wire 1 N! B $end
$var wire 1 ,2 C_in $end
$var wire 1 4+ S $end
$var wire 1 K2 C_out $end
$var wire 1 L2 nand1_out $end
$var wire 1 M2 nand2_out $end
$var wire 1 N2 nand3_out $end

$scope module nand1 $end
$var wire 1 n! in1 $end
$var wire 1 N! in2 $end
$var wire 1 L2 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 N! in1 $end
$var wire 1 ,2 in2 $end
$var wire 1 M2 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 n! in1 $end
$var wire 1 ,2 in2 $end
$var wire 1 N2 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 L2 in1 $end
$var wire 1 M2 in2 $end
$var wire 1 N2 in3 $end
$var wire 1 K2 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 n! in1 $end
$var wire 1 N! in2 $end
$var wire 1 ,2 in3 $end
$var wire 1 4+ out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module BRANCH_JUMP $end
$var wire 1 B# incr_PC [15] $end
$var wire 1 C# incr_PC [14] $end
$var wire 1 D# incr_PC [13] $end
$var wire 1 E# incr_PC [12] $end
$var wire 1 F# incr_PC [11] $end
$var wire 1 G# incr_PC [10] $end
$var wire 1 H# incr_PC [9] $end
$var wire 1 I# incr_PC [8] $end
$var wire 1 J# incr_PC [7] $end
$var wire 1 K# incr_PC [6] $end
$var wire 1 L# incr_PC [5] $end
$var wire 1 M# incr_PC [4] $end
$var wire 1 N# incr_PC [3] $end
$var wire 1 O# incr_PC [2] $end
$var wire 1 P# incr_PC [1] $end
$var wire 1 Q# incr_PC [0] $end
$var wire 1 ?! JumpReg $end
$var wire 1 @! Jump $end
$var wire 1 A! Branch $end
$var wire 1 4+ ALUResult [15] $end
$var wire 1 5+ ALUResult [14] $end
$var wire 1 6+ ALUResult [13] $end
$var wire 1 7+ ALUResult [12] $end
$var wire 1 8+ ALUResult [11] $end
$var wire 1 9+ ALUResult [10] $end
$var wire 1 :+ ALUResult [9] $end
$var wire 1 ;+ ALUResult [8] $end
$var wire 1 <+ ALUResult [7] $end
$var wire 1 =+ ALUResult [6] $end
$var wire 1 >+ ALUResult [5] $end
$var wire 1 ?+ ALUResult [4] $end
$var wire 1 @+ ALUResult [3] $end
$var wire 1 A+ ALUResult [2] $end
$var wire 1 B+ ALUResult [1] $end
$var wire 1 C+ ALUResult [0] $end
$var wire 1 n! immediate [15] $end
$var wire 1 o! immediate [14] $end
$var wire 1 p! immediate [13] $end
$var wire 1 q! immediate [12] $end
$var wire 1 r! immediate [11] $end
$var wire 1 s! immediate [10] $end
$var wire 1 t! immediate [9] $end
$var wire 1 u! immediate [8] $end
$var wire 1 v! immediate [7] $end
$var wire 1 w! immediate [6] $end
$var wire 1 x! immediate [5] $end
$var wire 1 y! immediate [4] $end
$var wire 1 z! immediate [3] $end
$var wire 1 {! immediate [2] $end
$var wire 1 |! immediate [1] $end
$var wire 1 }! immediate [0] $end
$var wire 1 2# opcode [4] $end
$var wire 1 3# opcode [3] $end
$var wire 1 4# opcode [2] $end
$var wire 1 5# opcode [1] $end
$var wire 1 6# opcode [0] $end
$var wire 1 N! RsVal [15] $end
$var wire 1 O! RsVal [14] $end
$var wire 1 P! RsVal [13] $end
$var wire 1 Q! RsVal [12] $end
$var wire 1 R! RsVal [11] $end
$var wire 1 S! RsVal [10] $end
$var wire 1 T! RsVal [9] $end
$var wire 1 U! RsVal [8] $end
$var wire 1 V! RsVal [7] $end
$var wire 1 W! RsVal [6] $end
$var wire 1 X! RsVal [5] $end
$var wire 1 Y! RsVal [4] $end
$var wire 1 Z! RsVal [3] $end
$var wire 1 [! RsVal [2] $end
$var wire 1 \! RsVal [1] $end
$var wire 1 ]! RsVal [0] $end
$var wire 1 $+ next_PC [15] $end
$var wire 1 %+ next_PC [14] $end
$var wire 1 &+ next_PC [13] $end
$var wire 1 '+ next_PC [12] $end
$var wire 1 (+ next_PC [11] $end
$var wire 1 )+ next_PC [10] $end
$var wire 1 *+ next_PC [9] $end
$var wire 1 ++ next_PC [8] $end
$var wire 1 ,+ next_PC [7] $end
$var wire 1 -+ next_PC [6] $end
$var wire 1 .+ next_PC [5] $end
$var wire 1 /+ next_PC [4] $end
$var wire 1 0+ next_PC [3] $end
$var wire 1 1+ next_PC [2] $end
$var wire 1 2+ next_PC [1] $end
$var wire 1 3+ next_PC [0] $end
$var wire 1 O2 immedWire [15] $end
$var wire 1 P2 immedWire [14] $end
$var wire 1 Q2 immedWire [13] $end
$var wire 1 R2 immedWire [12] $end
$var wire 1 S2 immedWire [11] $end
$var wire 1 T2 immedWire [10] $end
$var wire 1 U2 immedWire [9] $end
$var wire 1 V2 immedWire [8] $end
$var wire 1 W2 immedWire [7] $end
$var wire 1 X2 immedWire [6] $end
$var wire 1 Y2 immedWire [5] $end
$var wire 1 Z2 immedWire [4] $end
$var wire 1 [2 immedWire [3] $end
$var wire 1 \2 immedWire [2] $end
$var wire 1 ]2 immedWire [1] $end
$var wire 1 ^2 immedWire [0] $end
$var wire 1 _2 addOutput [15] $end
$var wire 1 `2 addOutput [14] $end
$var wire 1 a2 addOutput [13] $end
$var wire 1 b2 addOutput [12] $end
$var wire 1 c2 addOutput [11] $end
$var wire 1 d2 addOutput [10] $end
$var wire 1 e2 addOutput [9] $end
$var wire 1 f2 addOutput [8] $end
$var wire 1 g2 addOutput [7] $end
$var wire 1 h2 addOutput [6] $end
$var wire 1 i2 addOutput [5] $end
$var wire 1 j2 addOutput [4] $end
$var wire 1 k2 addOutput [3] $end
$var wire 1 l2 addOutput [2] $end
$var wire 1 m2 addOutput [1] $end
$var wire 1 n2 addOutput [0] $end
$var wire 1 o2 mux2Output [15] $end
$var wire 1 p2 mux2Output [14] $end
$var wire 1 q2 mux2Output [13] $end
$var wire 1 r2 mux2Output [12] $end
$var wire 1 s2 mux2Output [11] $end
$var wire 1 t2 mux2Output [10] $end
$var wire 1 u2 mux2Output [9] $end
$var wire 1 v2 mux2Output [8] $end
$var wire 1 w2 mux2Output [7] $end
$var wire 1 x2 mux2Output [6] $end
$var wire 1 y2 mux2Output [5] $end
$var wire 1 z2 mux2Output [4] $end
$var wire 1 {2 mux2Output [3] $end
$var wire 1 |2 mux2Output [2] $end
$var wire 1 }2 mux2Output [1] $end
$var wire 1 ~2 mux2Output [0] $end
$var wire 1 !3 BranchAND $end
$var wire 1 "3 zero $end
$var wire 1 #3 C_out $end

$scope module ADD $end
$var parameter 32 $3 N $end
$var wire 1 B# A [15] $end
$var wire 1 C# A [14] $end
$var wire 1 D# A [13] $end
$var wire 1 E# A [12] $end
$var wire 1 F# A [11] $end
$var wire 1 G# A [10] $end
$var wire 1 H# A [9] $end
$var wire 1 I# A [8] $end
$var wire 1 J# A [7] $end
$var wire 1 K# A [6] $end
$var wire 1 L# A [5] $end
$var wire 1 M# A [4] $end
$var wire 1 N# A [3] $end
$var wire 1 O# A [2] $end
$var wire 1 P# A [1] $end
$var wire 1 Q# A [0] $end
$var wire 1 O2 B [15] $end
$var wire 1 P2 B [14] $end
$var wire 1 Q2 B [13] $end
$var wire 1 R2 B [12] $end
$var wire 1 S2 B [11] $end
$var wire 1 T2 B [10] $end
$var wire 1 U2 B [9] $end
$var wire 1 V2 B [8] $end
$var wire 1 W2 B [7] $end
$var wire 1 X2 B [6] $end
$var wire 1 Y2 B [5] $end
$var wire 1 Z2 B [4] $end
$var wire 1 [2 B [3] $end
$var wire 1 \2 B [2] $end
$var wire 1 ]2 B [1] $end
$var wire 1 ^2 B [0] $end
$var wire 1 %3 C_in $end
$var wire 1 _2 S [15] $end
$var wire 1 `2 S [14] $end
$var wire 1 a2 S [13] $end
$var wire 1 b2 S [12] $end
$var wire 1 c2 S [11] $end
$var wire 1 d2 S [10] $end
$var wire 1 e2 S [9] $end
$var wire 1 f2 S [8] $end
$var wire 1 g2 S [7] $end
$var wire 1 h2 S [6] $end
$var wire 1 i2 S [5] $end
$var wire 1 j2 S [4] $end
$var wire 1 k2 S [3] $end
$var wire 1 l2 S [2] $end
$var wire 1 m2 S [1] $end
$var wire 1 n2 S [0] $end
$var wire 1 #3 C_out $end
$var wire 1 &3 C_out0 $end
$var wire 1 '3 C_out1 $end
$var wire 1 (3 C_out2 $end
$var wire 1 )3 G0 $end
$var wire 1 *3 P0 $end
$var wire 1 +3 G1 $end
$var wire 1 ,3 P1 $end
$var wire 1 -3 G2 $end
$var wire 1 .3 P2 $end
$var wire 1 /3 G3 $end
$var wire 1 03 P3 $end
$var wire 1 13 C_in1 $end
$var wire 1 23 C_in2 $end
$var wire 1 33 C_in3 $end

$scope module cla_4_1 $end
$var parameter 32 43 N $end
$var wire 1 N# A [3] $end
$var wire 1 O# A [2] $end
$var wire 1 P# A [1] $end
$var wire 1 Q# A [0] $end
$var wire 1 [2 B [3] $end
$var wire 1 \2 B [2] $end
$var wire 1 ]2 B [1] $end
$var wire 1 ^2 B [0] $end
$var wire 1 %3 C_in $end
$var wire 1 k2 S [3] $end
$var wire 1 l2 S [2] $end
$var wire 1 m2 S [1] $end
$var wire 1 n2 S [0] $end
$var wire 1 &3 C_out $end
$var wire 1 )3 G $end
$var wire 1 *3 P $end
$var wire 1 53 C_out0 $end
$var wire 1 63 C_out1 $end
$var wire 1 73 C_out2 $end

$scope module carryLogic0 $end
$var wire 1 Q# A $end
$var wire 1 ^2 B $end
$var wire 1 %3 Cin $end
$var wire 1 53 C_out $end
$var wire 1 83 P $end
$var wire 1 93 G $end
$var wire 1 :3 G_inv $end
$var wire 1 ;3 P_nor $end
$var wire 1 <3 C_out_1 $end

$scope module nand_G $end
$var wire 1 Q# in1 $end
$var wire 1 ^2 in2 $end
$var wire 1 :3 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 :3 in1 $end
$var wire 1 93 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 Q# in1 $end
$var wire 1 ^2 in2 $end
$var wire 1 ;3 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 ;3 in1 $end
$var wire 1 83 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 83 in1 $end
$var wire 1 %3 in2 $end
$var wire 1 <3 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 :3 in1 $end
$var wire 1 <3 in2 $end
$var wire 1 53 out $end
$upscope $end
$upscope $end

$scope module fullAdder0 $end
$var wire 1 Q# A $end
$var wire 1 ^2 B $end
$var wire 1 %3 C_in $end
$var wire 1 n2 S $end
$var wire 1 =3 C_out $end
$var wire 1 >3 nand1_out $end
$var wire 1 ?3 nand2_out $end
$var wire 1 @3 nand3_out $end

$scope module nand1 $end
$var wire 1 Q# in1 $end
$var wire 1 ^2 in2 $end
$var wire 1 >3 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ^2 in1 $end
$var wire 1 %3 in2 $end
$var wire 1 ?3 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 Q# in1 $end
$var wire 1 %3 in2 $end
$var wire 1 @3 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 >3 in1 $end
$var wire 1 ?3 in2 $end
$var wire 1 @3 in3 $end
$var wire 1 =3 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 Q# in1 $end
$var wire 1 ^2 in2 $end
$var wire 1 %3 in3 $end
$var wire 1 n2 out $end
$upscope $end
$upscope $end

$scope module carryLogic1 $end
$var wire 1 P# A $end
$var wire 1 ]2 B $end
$var wire 1 53 Cin $end
$var wire 1 63 C_out $end
$var wire 1 A3 P $end
$var wire 1 B3 G $end
$var wire 1 C3 G_inv $end
$var wire 1 D3 P_nor $end
$var wire 1 E3 C_out_1 $end

$scope module nand_G $end
$var wire 1 P# in1 $end
$var wire 1 ]2 in2 $end
$var wire 1 C3 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 C3 in1 $end
$var wire 1 B3 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 P# in1 $end
$var wire 1 ]2 in2 $end
$var wire 1 D3 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 D3 in1 $end
$var wire 1 A3 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 A3 in1 $end
$var wire 1 53 in2 $end
$var wire 1 E3 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 C3 in1 $end
$var wire 1 E3 in2 $end
$var wire 1 63 out $end
$upscope $end
$upscope $end

$scope module fullAdder1 $end
$var wire 1 P# A $end
$var wire 1 ]2 B $end
$var wire 1 53 C_in $end
$var wire 1 m2 S $end
$var wire 1 F3 C_out $end
$var wire 1 G3 nand1_out $end
$var wire 1 H3 nand2_out $end
$var wire 1 I3 nand3_out $end

$scope module nand1 $end
$var wire 1 P# in1 $end
$var wire 1 ]2 in2 $end
$var wire 1 G3 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ]2 in1 $end
$var wire 1 53 in2 $end
$var wire 1 H3 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 P# in1 $end
$var wire 1 53 in2 $end
$var wire 1 I3 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 G3 in1 $end
$var wire 1 H3 in2 $end
$var wire 1 I3 in3 $end
$var wire 1 F3 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 P# in1 $end
$var wire 1 ]2 in2 $end
$var wire 1 53 in3 $end
$var wire 1 m2 out $end
$upscope $end
$upscope $end

$scope module carryLogic2 $end
$var wire 1 O# A $end
$var wire 1 \2 B $end
$var wire 1 63 Cin $end
$var wire 1 73 C_out $end
$var wire 1 J3 P $end
$var wire 1 K3 G $end
$var wire 1 L3 G_inv $end
$var wire 1 M3 P_nor $end
$var wire 1 N3 C_out_1 $end

$scope module nand_G $end
$var wire 1 O# in1 $end
$var wire 1 \2 in2 $end
$var wire 1 L3 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 L3 in1 $end
$var wire 1 K3 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 O# in1 $end
$var wire 1 \2 in2 $end
$var wire 1 M3 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 M3 in1 $end
$var wire 1 J3 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 J3 in1 $end
$var wire 1 63 in2 $end
$var wire 1 N3 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 L3 in1 $end
$var wire 1 N3 in2 $end
$var wire 1 73 out $end
$upscope $end
$upscope $end

$scope module fullAdder2 $end
$var wire 1 O# A $end
$var wire 1 \2 B $end
$var wire 1 63 C_in $end
$var wire 1 l2 S $end
$var wire 1 O3 C_out $end
$var wire 1 P3 nand1_out $end
$var wire 1 Q3 nand2_out $end
$var wire 1 R3 nand3_out $end

$scope module nand1 $end
$var wire 1 O# in1 $end
$var wire 1 \2 in2 $end
$var wire 1 P3 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 \2 in1 $end
$var wire 1 63 in2 $end
$var wire 1 Q3 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 O# in1 $end
$var wire 1 63 in2 $end
$var wire 1 R3 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 P3 in1 $end
$var wire 1 Q3 in2 $end
$var wire 1 R3 in3 $end
$var wire 1 O3 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 O# in1 $end
$var wire 1 \2 in2 $end
$var wire 1 63 in3 $end
$var wire 1 l2 out $end
$upscope $end
$upscope $end

$scope module carryLogic3 $end
$var wire 1 N# A $end
$var wire 1 [2 B $end
$var wire 1 73 Cin $end
$var wire 1 &3 C_out $end
$var wire 1 *3 P $end
$var wire 1 )3 G $end
$var wire 1 S3 G_inv $end
$var wire 1 T3 P_nor $end
$var wire 1 U3 C_out_1 $end

$scope module nand_G $end
$var wire 1 N# in1 $end
$var wire 1 [2 in2 $end
$var wire 1 S3 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 S3 in1 $end
$var wire 1 )3 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 N# in1 $end
$var wire 1 [2 in2 $end
$var wire 1 T3 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 T3 in1 $end
$var wire 1 *3 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 *3 in1 $end
$var wire 1 73 in2 $end
$var wire 1 U3 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 S3 in1 $end
$var wire 1 U3 in2 $end
$var wire 1 &3 out $end
$upscope $end
$upscope $end

$scope module fullAdder3 $end
$var wire 1 N# A $end
$var wire 1 [2 B $end
$var wire 1 73 C_in $end
$var wire 1 k2 S $end
$var wire 1 V3 C_out $end
$var wire 1 W3 nand1_out $end
$var wire 1 X3 nand2_out $end
$var wire 1 Y3 nand3_out $end

$scope module nand1 $end
$var wire 1 N# in1 $end
$var wire 1 [2 in2 $end
$var wire 1 W3 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 [2 in1 $end
$var wire 1 73 in2 $end
$var wire 1 X3 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 N# in1 $end
$var wire 1 73 in2 $end
$var wire 1 Y3 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 W3 in1 $end
$var wire 1 X3 in2 $end
$var wire 1 Y3 in3 $end
$var wire 1 V3 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 N# in1 $end
$var wire 1 [2 in2 $end
$var wire 1 73 in3 $end
$var wire 1 k2 out $end
$upscope $end
$upscope $end
$upscope $end

$scope module compute1 $end
$var wire 1 *3 P $end
$var wire 1 )3 G $end
$var wire 1 &3 C_in_prev $end
$var wire 1 13 C_in $end
$var wire 1 Z3 G_in $end
$var wire 1 [3 C_out_1 $end
$var wire 1 \3 G_inv $end

$scope module not1 $end
$var wire 1 )3 in1 $end
$var wire 1 \3 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 *3 in1 $end
$var wire 1 &3 in2 $end
$var wire 1 [3 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 \3 in1 $end
$var wire 1 [3 in2 $end
$var wire 1 13 out $end
$upscope $end
$upscope $end

$scope module cla_4_2 $end
$var parameter 32 ]3 N $end
$var wire 1 J# A [3] $end
$var wire 1 K# A [2] $end
$var wire 1 L# A [1] $end
$var wire 1 M# A [0] $end
$var wire 1 W2 B [3] $end
$var wire 1 X2 B [2] $end
$var wire 1 Y2 B [1] $end
$var wire 1 Z2 B [0] $end
$var wire 1 13 C_in $end
$var wire 1 g2 S [3] $end
$var wire 1 h2 S [2] $end
$var wire 1 i2 S [1] $end
$var wire 1 j2 S [0] $end
$var wire 1 '3 C_out $end
$var wire 1 +3 G $end
$var wire 1 ,3 P $end
$var wire 1 ^3 C_out0 $end
$var wire 1 _3 C_out1 $end
$var wire 1 `3 C_out2 $end

$scope module carryLogic0 $end
$var wire 1 M# A $end
$var wire 1 Z2 B $end
$var wire 1 13 Cin $end
$var wire 1 ^3 C_out $end
$var wire 1 a3 P $end
$var wire 1 b3 G $end
$var wire 1 c3 G_inv $end
$var wire 1 d3 P_nor $end
$var wire 1 e3 C_out_1 $end

$scope module nand_G $end
$var wire 1 M# in1 $end
$var wire 1 Z2 in2 $end
$var wire 1 c3 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 c3 in1 $end
$var wire 1 b3 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 M# in1 $end
$var wire 1 Z2 in2 $end
$var wire 1 d3 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 d3 in1 $end
$var wire 1 a3 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 a3 in1 $end
$var wire 1 13 in2 $end
$var wire 1 e3 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 c3 in1 $end
$var wire 1 e3 in2 $end
$var wire 1 ^3 out $end
$upscope $end
$upscope $end

$scope module fullAdder0 $end
$var wire 1 M# A $end
$var wire 1 Z2 B $end
$var wire 1 13 C_in $end
$var wire 1 j2 S $end
$var wire 1 f3 C_out $end
$var wire 1 g3 nand1_out $end
$var wire 1 h3 nand2_out $end
$var wire 1 i3 nand3_out $end

$scope module nand1 $end
$var wire 1 M# in1 $end
$var wire 1 Z2 in2 $end
$var wire 1 g3 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Z2 in1 $end
$var wire 1 13 in2 $end
$var wire 1 h3 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 M# in1 $end
$var wire 1 13 in2 $end
$var wire 1 i3 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 g3 in1 $end
$var wire 1 h3 in2 $end
$var wire 1 i3 in3 $end
$var wire 1 f3 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 M# in1 $end
$var wire 1 Z2 in2 $end
$var wire 1 13 in3 $end
$var wire 1 j2 out $end
$upscope $end
$upscope $end

$scope module carryLogic1 $end
$var wire 1 L# A $end
$var wire 1 Y2 B $end
$var wire 1 ^3 Cin $end
$var wire 1 _3 C_out $end
$var wire 1 j3 P $end
$var wire 1 k3 G $end
$var wire 1 l3 G_inv $end
$var wire 1 m3 P_nor $end
$var wire 1 n3 C_out_1 $end

$scope module nand_G $end
$var wire 1 L# in1 $end
$var wire 1 Y2 in2 $end
$var wire 1 l3 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 l3 in1 $end
$var wire 1 k3 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 L# in1 $end
$var wire 1 Y2 in2 $end
$var wire 1 m3 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 m3 in1 $end
$var wire 1 j3 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 j3 in1 $end
$var wire 1 ^3 in2 $end
$var wire 1 n3 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 l3 in1 $end
$var wire 1 n3 in2 $end
$var wire 1 _3 out $end
$upscope $end
$upscope $end

$scope module fullAdder1 $end
$var wire 1 L# A $end
$var wire 1 Y2 B $end
$var wire 1 ^3 C_in $end
$var wire 1 i2 S $end
$var wire 1 o3 C_out $end
$var wire 1 p3 nand1_out $end
$var wire 1 q3 nand2_out $end
$var wire 1 r3 nand3_out $end

$scope module nand1 $end
$var wire 1 L# in1 $end
$var wire 1 Y2 in2 $end
$var wire 1 p3 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Y2 in1 $end
$var wire 1 ^3 in2 $end
$var wire 1 q3 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 L# in1 $end
$var wire 1 ^3 in2 $end
$var wire 1 r3 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 p3 in1 $end
$var wire 1 q3 in2 $end
$var wire 1 r3 in3 $end
$var wire 1 o3 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 L# in1 $end
$var wire 1 Y2 in2 $end
$var wire 1 ^3 in3 $end
$var wire 1 i2 out $end
$upscope $end
$upscope $end

$scope module carryLogic2 $end
$var wire 1 K# A $end
$var wire 1 X2 B $end
$var wire 1 _3 Cin $end
$var wire 1 `3 C_out $end
$var wire 1 s3 P $end
$var wire 1 t3 G $end
$var wire 1 u3 G_inv $end
$var wire 1 v3 P_nor $end
$var wire 1 w3 C_out_1 $end

$scope module nand_G $end
$var wire 1 K# in1 $end
$var wire 1 X2 in2 $end
$var wire 1 u3 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 u3 in1 $end
$var wire 1 t3 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 K# in1 $end
$var wire 1 X2 in2 $end
$var wire 1 v3 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 v3 in1 $end
$var wire 1 s3 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 s3 in1 $end
$var wire 1 _3 in2 $end
$var wire 1 w3 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 u3 in1 $end
$var wire 1 w3 in2 $end
$var wire 1 `3 out $end
$upscope $end
$upscope $end

$scope module fullAdder2 $end
$var wire 1 K# A $end
$var wire 1 X2 B $end
$var wire 1 _3 C_in $end
$var wire 1 h2 S $end
$var wire 1 x3 C_out $end
$var wire 1 y3 nand1_out $end
$var wire 1 z3 nand2_out $end
$var wire 1 {3 nand3_out $end

$scope module nand1 $end
$var wire 1 K# in1 $end
$var wire 1 X2 in2 $end
$var wire 1 y3 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 X2 in1 $end
$var wire 1 _3 in2 $end
$var wire 1 z3 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 K# in1 $end
$var wire 1 _3 in2 $end
$var wire 1 {3 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 y3 in1 $end
$var wire 1 z3 in2 $end
$var wire 1 {3 in3 $end
$var wire 1 x3 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 K# in1 $end
$var wire 1 X2 in2 $end
$var wire 1 _3 in3 $end
$var wire 1 h2 out $end
$upscope $end
$upscope $end

$scope module carryLogic3 $end
$var wire 1 J# A $end
$var wire 1 W2 B $end
$var wire 1 `3 Cin $end
$var wire 1 '3 C_out $end
$var wire 1 ,3 P $end
$var wire 1 +3 G $end
$var wire 1 |3 G_inv $end
$var wire 1 }3 P_nor $end
$var wire 1 ~3 C_out_1 $end

$scope module nand_G $end
$var wire 1 J# in1 $end
$var wire 1 W2 in2 $end
$var wire 1 |3 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 |3 in1 $end
$var wire 1 +3 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 J# in1 $end
$var wire 1 W2 in2 $end
$var wire 1 }3 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 }3 in1 $end
$var wire 1 ,3 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 ,3 in1 $end
$var wire 1 `3 in2 $end
$var wire 1 ~3 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 |3 in1 $end
$var wire 1 ~3 in2 $end
$var wire 1 '3 out $end
$upscope $end
$upscope $end

$scope module fullAdder3 $end
$var wire 1 J# A $end
$var wire 1 W2 B $end
$var wire 1 `3 C_in $end
$var wire 1 g2 S $end
$var wire 1 !4 C_out $end
$var wire 1 "4 nand1_out $end
$var wire 1 #4 nand2_out $end
$var wire 1 $4 nand3_out $end

$scope module nand1 $end
$var wire 1 J# in1 $end
$var wire 1 W2 in2 $end
$var wire 1 "4 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 W2 in1 $end
$var wire 1 `3 in2 $end
$var wire 1 #4 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 J# in1 $end
$var wire 1 `3 in2 $end
$var wire 1 $4 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 "4 in1 $end
$var wire 1 #4 in2 $end
$var wire 1 $4 in3 $end
$var wire 1 !4 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 J# in1 $end
$var wire 1 W2 in2 $end
$var wire 1 `3 in3 $end
$var wire 1 g2 out $end
$upscope $end
$upscope $end
$upscope $end

$scope module compute2 $end
$var wire 1 ,3 P $end
$var wire 1 +3 G $end
$var wire 1 '3 C_in_prev $end
$var wire 1 23 C_in $end
$var wire 1 %4 G_in $end
$var wire 1 &4 C_out_1 $end
$var wire 1 '4 G_inv $end

$scope module not1 $end
$var wire 1 +3 in1 $end
$var wire 1 '4 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 ,3 in1 $end
$var wire 1 '3 in2 $end
$var wire 1 &4 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 '4 in1 $end
$var wire 1 &4 in2 $end
$var wire 1 23 out $end
$upscope $end
$upscope $end

$scope module cla_4_3 $end
$var parameter 32 (4 N $end
$var wire 1 F# A [3] $end
$var wire 1 G# A [2] $end
$var wire 1 H# A [1] $end
$var wire 1 I# A [0] $end
$var wire 1 S2 B [3] $end
$var wire 1 T2 B [2] $end
$var wire 1 U2 B [1] $end
$var wire 1 V2 B [0] $end
$var wire 1 23 C_in $end
$var wire 1 c2 S [3] $end
$var wire 1 d2 S [2] $end
$var wire 1 e2 S [1] $end
$var wire 1 f2 S [0] $end
$var wire 1 (3 C_out $end
$var wire 1 -3 G $end
$var wire 1 .3 P $end
$var wire 1 )4 C_out0 $end
$var wire 1 *4 C_out1 $end
$var wire 1 +4 C_out2 $end

$scope module carryLogic0 $end
$var wire 1 I# A $end
$var wire 1 V2 B $end
$var wire 1 23 Cin $end
$var wire 1 )4 C_out $end
$var wire 1 ,4 P $end
$var wire 1 -4 G $end
$var wire 1 .4 G_inv $end
$var wire 1 /4 P_nor $end
$var wire 1 04 C_out_1 $end

$scope module nand_G $end
$var wire 1 I# in1 $end
$var wire 1 V2 in2 $end
$var wire 1 .4 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 .4 in1 $end
$var wire 1 -4 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 I# in1 $end
$var wire 1 V2 in2 $end
$var wire 1 /4 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 /4 in1 $end
$var wire 1 ,4 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 ,4 in1 $end
$var wire 1 23 in2 $end
$var wire 1 04 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 .4 in1 $end
$var wire 1 04 in2 $end
$var wire 1 )4 out $end
$upscope $end
$upscope $end

$scope module fullAdder0 $end
$var wire 1 I# A $end
$var wire 1 V2 B $end
$var wire 1 23 C_in $end
$var wire 1 f2 S $end
$var wire 1 14 C_out $end
$var wire 1 24 nand1_out $end
$var wire 1 34 nand2_out $end
$var wire 1 44 nand3_out $end

$scope module nand1 $end
$var wire 1 I# in1 $end
$var wire 1 V2 in2 $end
$var wire 1 24 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 V2 in1 $end
$var wire 1 23 in2 $end
$var wire 1 34 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 I# in1 $end
$var wire 1 23 in2 $end
$var wire 1 44 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 24 in1 $end
$var wire 1 34 in2 $end
$var wire 1 44 in3 $end
$var wire 1 14 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 I# in1 $end
$var wire 1 V2 in2 $end
$var wire 1 23 in3 $end
$var wire 1 f2 out $end
$upscope $end
$upscope $end

$scope module carryLogic1 $end
$var wire 1 H# A $end
$var wire 1 U2 B $end
$var wire 1 )4 Cin $end
$var wire 1 *4 C_out $end
$var wire 1 54 P $end
$var wire 1 64 G $end
$var wire 1 74 G_inv $end
$var wire 1 84 P_nor $end
$var wire 1 94 C_out_1 $end

$scope module nand_G $end
$var wire 1 H# in1 $end
$var wire 1 U2 in2 $end
$var wire 1 74 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 74 in1 $end
$var wire 1 64 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 H# in1 $end
$var wire 1 U2 in2 $end
$var wire 1 84 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 84 in1 $end
$var wire 1 54 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 54 in1 $end
$var wire 1 )4 in2 $end
$var wire 1 94 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 74 in1 $end
$var wire 1 94 in2 $end
$var wire 1 *4 out $end
$upscope $end
$upscope $end

$scope module fullAdder1 $end
$var wire 1 H# A $end
$var wire 1 U2 B $end
$var wire 1 )4 C_in $end
$var wire 1 e2 S $end
$var wire 1 :4 C_out $end
$var wire 1 ;4 nand1_out $end
$var wire 1 <4 nand2_out $end
$var wire 1 =4 nand3_out $end

$scope module nand1 $end
$var wire 1 H# in1 $end
$var wire 1 U2 in2 $end
$var wire 1 ;4 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 U2 in1 $end
$var wire 1 )4 in2 $end
$var wire 1 <4 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 H# in1 $end
$var wire 1 )4 in2 $end
$var wire 1 =4 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 ;4 in1 $end
$var wire 1 <4 in2 $end
$var wire 1 =4 in3 $end
$var wire 1 :4 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 H# in1 $end
$var wire 1 U2 in2 $end
$var wire 1 )4 in3 $end
$var wire 1 e2 out $end
$upscope $end
$upscope $end

$scope module carryLogic2 $end
$var wire 1 G# A $end
$var wire 1 T2 B $end
$var wire 1 *4 Cin $end
$var wire 1 +4 C_out $end
$var wire 1 >4 P $end
$var wire 1 ?4 G $end
$var wire 1 @4 G_inv $end
$var wire 1 A4 P_nor $end
$var wire 1 B4 C_out_1 $end

$scope module nand_G $end
$var wire 1 G# in1 $end
$var wire 1 T2 in2 $end
$var wire 1 @4 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 @4 in1 $end
$var wire 1 ?4 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 G# in1 $end
$var wire 1 T2 in2 $end
$var wire 1 A4 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 A4 in1 $end
$var wire 1 >4 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 >4 in1 $end
$var wire 1 *4 in2 $end
$var wire 1 B4 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 @4 in1 $end
$var wire 1 B4 in2 $end
$var wire 1 +4 out $end
$upscope $end
$upscope $end

$scope module fullAdder2 $end
$var wire 1 G# A $end
$var wire 1 T2 B $end
$var wire 1 *4 C_in $end
$var wire 1 d2 S $end
$var wire 1 C4 C_out $end
$var wire 1 D4 nand1_out $end
$var wire 1 E4 nand2_out $end
$var wire 1 F4 nand3_out $end

$scope module nand1 $end
$var wire 1 G# in1 $end
$var wire 1 T2 in2 $end
$var wire 1 D4 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 T2 in1 $end
$var wire 1 *4 in2 $end
$var wire 1 E4 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 G# in1 $end
$var wire 1 *4 in2 $end
$var wire 1 F4 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 D4 in1 $end
$var wire 1 E4 in2 $end
$var wire 1 F4 in3 $end
$var wire 1 C4 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 G# in1 $end
$var wire 1 T2 in2 $end
$var wire 1 *4 in3 $end
$var wire 1 d2 out $end
$upscope $end
$upscope $end

$scope module carryLogic3 $end
$var wire 1 F# A $end
$var wire 1 S2 B $end
$var wire 1 +4 Cin $end
$var wire 1 (3 C_out $end
$var wire 1 .3 P $end
$var wire 1 -3 G $end
$var wire 1 G4 G_inv $end
$var wire 1 H4 P_nor $end
$var wire 1 I4 C_out_1 $end

$scope module nand_G $end
$var wire 1 F# in1 $end
$var wire 1 S2 in2 $end
$var wire 1 G4 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 G4 in1 $end
$var wire 1 -3 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 F# in1 $end
$var wire 1 S2 in2 $end
$var wire 1 H4 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 H4 in1 $end
$var wire 1 .3 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 .3 in1 $end
$var wire 1 +4 in2 $end
$var wire 1 I4 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 G4 in1 $end
$var wire 1 I4 in2 $end
$var wire 1 (3 out $end
$upscope $end
$upscope $end

$scope module fullAdder3 $end
$var wire 1 F# A $end
$var wire 1 S2 B $end
$var wire 1 +4 C_in $end
$var wire 1 c2 S $end
$var wire 1 J4 C_out $end
$var wire 1 K4 nand1_out $end
$var wire 1 L4 nand2_out $end
$var wire 1 M4 nand3_out $end

$scope module nand1 $end
$var wire 1 F# in1 $end
$var wire 1 S2 in2 $end
$var wire 1 K4 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 S2 in1 $end
$var wire 1 +4 in2 $end
$var wire 1 L4 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 F# in1 $end
$var wire 1 +4 in2 $end
$var wire 1 M4 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 K4 in1 $end
$var wire 1 L4 in2 $end
$var wire 1 M4 in3 $end
$var wire 1 J4 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 F# in1 $end
$var wire 1 S2 in2 $end
$var wire 1 +4 in3 $end
$var wire 1 c2 out $end
$upscope $end
$upscope $end
$upscope $end

$scope module compute3 $end
$var wire 1 .3 P $end
$var wire 1 -3 G $end
$var wire 1 (3 C_in_prev $end
$var wire 1 33 C_in $end
$var wire 1 N4 G_in $end
$var wire 1 O4 C_out_1 $end
$var wire 1 P4 G_inv $end

$scope module not1 $end
$var wire 1 -3 in1 $end
$var wire 1 P4 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 .3 in1 $end
$var wire 1 (3 in2 $end
$var wire 1 O4 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 P4 in1 $end
$var wire 1 O4 in2 $end
$var wire 1 33 out $end
$upscope $end
$upscope $end

$scope module cla_4_4 $end
$var parameter 32 Q4 N $end
$var wire 1 B# A [3] $end
$var wire 1 C# A [2] $end
$var wire 1 D# A [1] $end
$var wire 1 E# A [0] $end
$var wire 1 O2 B [3] $end
$var wire 1 P2 B [2] $end
$var wire 1 Q2 B [1] $end
$var wire 1 R2 B [0] $end
$var wire 1 33 C_in $end
$var wire 1 _2 S [3] $end
$var wire 1 `2 S [2] $end
$var wire 1 a2 S [1] $end
$var wire 1 b2 S [0] $end
$var wire 1 #3 C_out $end
$var wire 1 /3 G $end
$var wire 1 03 P $end
$var wire 1 R4 C_out0 $end
$var wire 1 S4 C_out1 $end
$var wire 1 T4 C_out2 $end

$scope module carryLogic0 $end
$var wire 1 E# A $end
$var wire 1 R2 B $end
$var wire 1 33 Cin $end
$var wire 1 R4 C_out $end
$var wire 1 U4 P $end
$var wire 1 V4 G $end
$var wire 1 W4 G_inv $end
$var wire 1 X4 P_nor $end
$var wire 1 Y4 C_out_1 $end

$scope module nand_G $end
$var wire 1 E# in1 $end
$var wire 1 R2 in2 $end
$var wire 1 W4 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 W4 in1 $end
$var wire 1 V4 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 E# in1 $end
$var wire 1 R2 in2 $end
$var wire 1 X4 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 X4 in1 $end
$var wire 1 U4 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 U4 in1 $end
$var wire 1 33 in2 $end
$var wire 1 Y4 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 W4 in1 $end
$var wire 1 Y4 in2 $end
$var wire 1 R4 out $end
$upscope $end
$upscope $end

$scope module fullAdder0 $end
$var wire 1 E# A $end
$var wire 1 R2 B $end
$var wire 1 33 C_in $end
$var wire 1 b2 S $end
$var wire 1 Z4 C_out $end
$var wire 1 [4 nand1_out $end
$var wire 1 \4 nand2_out $end
$var wire 1 ]4 nand3_out $end

$scope module nand1 $end
$var wire 1 E# in1 $end
$var wire 1 R2 in2 $end
$var wire 1 [4 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 R2 in1 $end
$var wire 1 33 in2 $end
$var wire 1 \4 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 E# in1 $end
$var wire 1 33 in2 $end
$var wire 1 ]4 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 [4 in1 $end
$var wire 1 \4 in2 $end
$var wire 1 ]4 in3 $end
$var wire 1 Z4 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 E# in1 $end
$var wire 1 R2 in2 $end
$var wire 1 33 in3 $end
$var wire 1 b2 out $end
$upscope $end
$upscope $end

$scope module carryLogic1 $end
$var wire 1 D# A $end
$var wire 1 Q2 B $end
$var wire 1 R4 Cin $end
$var wire 1 S4 C_out $end
$var wire 1 ^4 P $end
$var wire 1 _4 G $end
$var wire 1 `4 G_inv $end
$var wire 1 a4 P_nor $end
$var wire 1 b4 C_out_1 $end

$scope module nand_G $end
$var wire 1 D# in1 $end
$var wire 1 Q2 in2 $end
$var wire 1 `4 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 `4 in1 $end
$var wire 1 _4 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 D# in1 $end
$var wire 1 Q2 in2 $end
$var wire 1 a4 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 a4 in1 $end
$var wire 1 ^4 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 ^4 in1 $end
$var wire 1 R4 in2 $end
$var wire 1 b4 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 `4 in1 $end
$var wire 1 b4 in2 $end
$var wire 1 S4 out $end
$upscope $end
$upscope $end

$scope module fullAdder1 $end
$var wire 1 D# A $end
$var wire 1 Q2 B $end
$var wire 1 R4 C_in $end
$var wire 1 a2 S $end
$var wire 1 c4 C_out $end
$var wire 1 d4 nand1_out $end
$var wire 1 e4 nand2_out $end
$var wire 1 f4 nand3_out $end

$scope module nand1 $end
$var wire 1 D# in1 $end
$var wire 1 Q2 in2 $end
$var wire 1 d4 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Q2 in1 $end
$var wire 1 R4 in2 $end
$var wire 1 e4 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 D# in1 $end
$var wire 1 R4 in2 $end
$var wire 1 f4 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 d4 in1 $end
$var wire 1 e4 in2 $end
$var wire 1 f4 in3 $end
$var wire 1 c4 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 D# in1 $end
$var wire 1 Q2 in2 $end
$var wire 1 R4 in3 $end
$var wire 1 a2 out $end
$upscope $end
$upscope $end

$scope module carryLogic2 $end
$var wire 1 C# A $end
$var wire 1 P2 B $end
$var wire 1 S4 Cin $end
$var wire 1 T4 C_out $end
$var wire 1 g4 P $end
$var wire 1 h4 G $end
$var wire 1 i4 G_inv $end
$var wire 1 j4 P_nor $end
$var wire 1 k4 C_out_1 $end

$scope module nand_G $end
$var wire 1 C# in1 $end
$var wire 1 P2 in2 $end
$var wire 1 i4 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 i4 in1 $end
$var wire 1 h4 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 C# in1 $end
$var wire 1 P2 in2 $end
$var wire 1 j4 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 j4 in1 $end
$var wire 1 g4 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 g4 in1 $end
$var wire 1 S4 in2 $end
$var wire 1 k4 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 i4 in1 $end
$var wire 1 k4 in2 $end
$var wire 1 T4 out $end
$upscope $end
$upscope $end

$scope module fullAdder2 $end
$var wire 1 C# A $end
$var wire 1 P2 B $end
$var wire 1 S4 C_in $end
$var wire 1 `2 S $end
$var wire 1 l4 C_out $end
$var wire 1 m4 nand1_out $end
$var wire 1 n4 nand2_out $end
$var wire 1 o4 nand3_out $end

$scope module nand1 $end
$var wire 1 C# in1 $end
$var wire 1 P2 in2 $end
$var wire 1 m4 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 P2 in1 $end
$var wire 1 S4 in2 $end
$var wire 1 n4 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 C# in1 $end
$var wire 1 S4 in2 $end
$var wire 1 o4 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 m4 in1 $end
$var wire 1 n4 in2 $end
$var wire 1 o4 in3 $end
$var wire 1 l4 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 C# in1 $end
$var wire 1 P2 in2 $end
$var wire 1 S4 in3 $end
$var wire 1 `2 out $end
$upscope $end
$upscope $end

$scope module carryLogic3 $end
$var wire 1 B# A $end
$var wire 1 O2 B $end
$var wire 1 T4 Cin $end
$var wire 1 #3 C_out $end
$var wire 1 03 P $end
$var wire 1 /3 G $end
$var wire 1 p4 G_inv $end
$var wire 1 q4 P_nor $end
$var wire 1 r4 C_out_1 $end

$scope module nand_G $end
$var wire 1 B# in1 $end
$var wire 1 O2 in2 $end
$var wire 1 p4 out $end
$upscope $end

$scope module not_1 $end
$var wire 1 p4 in1 $end
$var wire 1 /3 out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 B# in1 $end
$var wire 1 O2 in2 $end
$var wire 1 q4 out $end
$upscope $end

$scope module not_2 $end
$var wire 1 q4 in1 $end
$var wire 1 03 out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 03 in1 $end
$var wire 1 T4 in2 $end
$var wire 1 r4 out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 p4 in1 $end
$var wire 1 r4 in2 $end
$var wire 1 #3 out $end
$upscope $end
$upscope $end

$scope module fullAdder3 $end
$var wire 1 B# A $end
$var wire 1 O2 B $end
$var wire 1 T4 C_in $end
$var wire 1 _2 S $end
$var wire 1 s4 C_out $end
$var wire 1 t4 nand1_out $end
$var wire 1 u4 nand2_out $end
$var wire 1 v4 nand3_out $end

$scope module nand1 $end
$var wire 1 B# in1 $end
$var wire 1 O2 in2 $end
$var wire 1 t4 out $end
$upscope $end

$scope module nand2 $end
$var wire 1 O2 in1 $end
$var wire 1 T4 in2 $end
$var wire 1 u4 out $end
$upscope $end

$scope module nand3 $end
$var wire 1 B# in1 $end
$var wire 1 T4 in2 $end
$var wire 1 v4 out $end
$upscope $end

$scope module nand_out $end
$var wire 1 t4 in1 $end
$var wire 1 u4 in2 $end
$var wire 1 v4 in3 $end
$var wire 1 s4 out $end
$upscope $end

$scope module xor1 $end
$var wire 1 B# in1 $end
$var wire 1 O2 in2 $end
$var wire 1 T4 in3 $end
$var wire 1 _2 out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module ALU $end
$var wire 1 2# opcode [4] $end
$var wire 1 3# opcode [3] $end
$var wire 1 4# opcode [2] $end
$var wire 1 5# opcode [1] $end
$var wire 1 6# opcode [0] $end
$var wire 1 N! RsVal [15] $end
$var wire 1 O! RsVal [14] $end
$var wire 1 P! RsVal [13] $end
$var wire 1 Q! RsVal [12] $end
$var wire 1 R! RsVal [11] $end
$var wire 1 S! RsVal [10] $end
$var wire 1 T! RsVal [9] $end
$var wire 1 U! RsVal [8] $end
$var wire 1 V! RsVal [7] $end
$var wire 1 W! RsVal [6] $end
$var wire 1 X! RsVal [5] $end
$var wire 1 Y! RsVal [4] $end
$var wire 1 Z! RsVal [3] $end
$var wire 1 [! RsVal [2] $end
$var wire 1 \! RsVal [1] $end
$var wire 1 ]! RsVal [0] $end
$var wire 1 "3 zero $end
$var reg 1 w4 zeroWire $end
$upscope $end
$upscope $end
$upscope $end

$scope module id_ex $end
$var wire 1 B# pc_plus_2 [15] $end
$var wire 1 C# pc_plus_2 [14] $end
$var wire 1 D# pc_plus_2 [13] $end
$var wire 1 E# pc_plus_2 [12] $end
$var wire 1 F# pc_plus_2 [11] $end
$var wire 1 G# pc_plus_2 [10] $end
$var wire 1 H# pc_plus_2 [9] $end
$var wire 1 I# pc_plus_2 [8] $end
$var wire 1 J# pc_plus_2 [7] $end
$var wire 1 K# pc_plus_2 [6] $end
$var wire 1 L# pc_plus_2 [5] $end
$var wire 1 M# pc_plus_2 [4] $end
$var wire 1 N# pc_plus_2 [3] $end
$var wire 1 O# pc_plus_2 [2] $end
$var wire 1 P# pc_plus_2 [1] $end
$var wire 1 Q# pc_plus_2 [0] $end
$var wire 1 x4 en $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <! HALT $end
$var wire 1 >! writeR7 $end
$var wire 1 B! memToReg $end
$var wire 1 C! memRead $end
$var wire 1 H! memWrite $end
$var wire 1 I! ALUsrc $end
$var wire 1 J! regWrite $end
$var wire 1 D! ALUop [3] $end
$var wire 1 E! ALUop [2] $end
$var wire 1 F! ALUop [1] $end
$var wire 1 G! ALUop [0] $end
$var wire 1 n! immediate [15] $end
$var wire 1 o! immediate [14] $end
$var wire 1 p! immediate [13] $end
$var wire 1 q! immediate [12] $end
$var wire 1 r! immediate [11] $end
$var wire 1 s! immediate [10] $end
$var wire 1 t! immediate [9] $end
$var wire 1 u! immediate [8] $end
$var wire 1 v! immediate [7] $end
$var wire 1 w! immediate [6] $end
$var wire 1 x! immediate [5] $end
$var wire 1 y! immediate [4] $end
$var wire 1 z! immediate [3] $end
$var wire 1 {! immediate [2] $end
$var wire 1 |! immediate [1] $end
$var wire 1 }! immediate [0] $end
$var wire 1 N! readData1 [15] $end
$var wire 1 O! readData1 [14] $end
$var wire 1 P! readData1 [13] $end
$var wire 1 Q! readData1 [12] $end
$var wire 1 R! readData1 [11] $end
$var wire 1 S! readData1 [10] $end
$var wire 1 T! readData1 [9] $end
$var wire 1 U! readData1 [8] $end
$var wire 1 V! readData1 [7] $end
$var wire 1 W! readData1 [6] $end
$var wire 1 X! readData1 [5] $end
$var wire 1 Y! readData1 [4] $end
$var wire 1 Z! readData1 [3] $end
$var wire 1 [! readData1 [2] $end
$var wire 1 \! readData1 [1] $end
$var wire 1 ]! readData1 [0] $end
$var wire 1 ^! readData2 [15] $end
$var wire 1 _! readData2 [14] $end
$var wire 1 `! readData2 [13] $end
$var wire 1 a! readData2 [12] $end
$var wire 1 b! readData2 [11] $end
$var wire 1 c! readData2 [10] $end
$var wire 1 d! readData2 [9] $end
$var wire 1 e! readData2 [8] $end
$var wire 1 f! readData2 [7] $end
$var wire 1 g! readData2 [6] $end
$var wire 1 h! readData2 [5] $end
$var wire 1 i! readData2 [4] $end
$var wire 1 j! readData2 [3] $end
$var wire 1 k! readData2 [2] $end
$var wire 1 l! readData2 [1] $end
$var wire 1 m! readData2 [0] $end
$var wire 1 r# writeRegSel [2] $end
$var wire 1 s# writeRegSel [1] $end
$var wire 1 t# writeRegSel [0] $end
$var wire 1 ~# pc_plus_2_DX [15] $end
$var wire 1 !$ pc_plus_2_DX [14] $end
$var wire 1 "$ pc_plus_2_DX [13] $end
$var wire 1 #$ pc_plus_2_DX [12] $end
$var wire 1 $$ pc_plus_2_DX [11] $end
$var wire 1 %$ pc_plus_2_DX [10] $end
$var wire 1 &$ pc_plus_2_DX [9] $end
$var wire 1 '$ pc_plus_2_DX [8] $end
$var wire 1 ($ pc_plus_2_DX [7] $end
$var wire 1 )$ pc_plus_2_DX [6] $end
$var wire 1 *$ pc_plus_2_DX [5] $end
$var wire 1 +$ pc_plus_2_DX [4] $end
$var wire 1 ,$ pc_plus_2_DX [3] $end
$var wire 1 -$ pc_plus_2_DX [2] $end
$var wire 1 .$ pc_plus_2_DX [1] $end
$var wire 1 /$ pc_plus_2_DX [0] $end
$var wire 1 g$ HALT_DX $end
$var wire 1 h$ writeR7_DX $end
$var wire 1 i$ memToReg_DX $end
$var wire 1 j$ memRead_DX $end
$var wire 1 k$ memWrite_DX $end
$var wire 1 l$ ALUsrc_DX $end
$var wire 1 m$ regWrite_DX $end
$var wire 1 c$ ALUop_DX [3] $end
$var wire 1 d$ ALUop_DX [2] $end
$var wire 1 e$ ALUop_DX [1] $end
$var wire 1 f$ ALUop_DX [0] $end
$var wire 1 0$ immediate_DX [15] $end
$var wire 1 1$ immediate_DX [14] $end
$var wire 1 2$ immediate_DX [13] $end
$var wire 1 3$ immediate_DX [12] $end
$var wire 1 4$ immediate_DX [11] $end
$var wire 1 5$ immediate_DX [10] $end
$var wire 1 6$ immediate_DX [9] $end
$var wire 1 7$ immediate_DX [8] $end
$var wire 1 8$ immediate_DX [7] $end
$var wire 1 9$ immediate_DX [6] $end
$var wire 1 :$ immediate_DX [5] $end
$var wire 1 ;$ immediate_DX [4] $end
$var wire 1 <$ immediate_DX [3] $end
$var wire 1 =$ immediate_DX [2] $end
$var wire 1 >$ immediate_DX [1] $end
$var wire 1 ?$ immediate_DX [0] $end
$var wire 1 @$ readData1_DX [15] $end
$var wire 1 A$ readData1_DX [14] $end
$var wire 1 B$ readData1_DX [13] $end
$var wire 1 C$ readData1_DX [12] $end
$var wire 1 D$ readData1_DX [11] $end
$var wire 1 E$ readData1_DX [10] $end
$var wire 1 F$ readData1_DX [9] $end
$var wire 1 G$ readData1_DX [8] $end
$var wire 1 H$ readData1_DX [7] $end
$var wire 1 I$ readData1_DX [6] $end
$var wire 1 J$ readData1_DX [5] $end
$var wire 1 K$ readData1_DX [4] $end
$var wire 1 L$ readData1_DX [3] $end
$var wire 1 M$ readData1_DX [2] $end
$var wire 1 N$ readData1_DX [1] $end
$var wire 1 O$ readData1_DX [0] $end
$var wire 1 P$ readData2_DX [15] $end
$var wire 1 Q$ readData2_DX [14] $end
$var wire 1 R$ readData2_DX [13] $end
$var wire 1 S$ readData2_DX [12] $end
$var wire 1 T$ readData2_DX [11] $end
$var wire 1 U$ readData2_DX [10] $end
$var wire 1 V$ readData2_DX [9] $end
$var wire 1 W$ readData2_DX [8] $end
$var wire 1 X$ readData2_DX [7] $end
$var wire 1 Y$ readData2_DX [6] $end
$var wire 1 Z$ readData2_DX [5] $end
$var wire 1 [$ readData2_DX [4] $end
$var wire 1 \$ readData2_DX [3] $end
$var wire 1 ]$ readData2_DX [2] $end
$var wire 1 ^$ readData2_DX [1] $end
$var wire 1 _$ readData2_DX [0] $end
$var wire 1 `$ writeRegSel_DX [2] $end
$var wire 1 a$ writeRegSel_DX [1] $end
$var wire 1 b$ writeRegSel_DX [0] $end

$scope module pc_plus_2_REG $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 x4 en $end
$var wire 1 B# data_in [15] $end
$var wire 1 C# data_in [14] $end
$var wire 1 D# data_in [13] $end
$var wire 1 E# data_in [12] $end
$var wire 1 F# data_in [11] $end
$var wire 1 G# data_in [10] $end
$var wire 1 H# data_in [9] $end
$var wire 1 I# data_in [8] $end
$var wire 1 J# data_in [7] $end
$var wire 1 K# data_in [6] $end
$var wire 1 L# data_in [5] $end
$var wire 1 M# data_in [4] $end
$var wire 1 N# data_in [3] $end
$var wire 1 O# data_in [2] $end
$var wire 1 P# data_in [1] $end
$var wire 1 Q# data_in [0] $end
$var wire 1 ~# state [15] $end
$var wire 1 !$ state [14] $end
$var wire 1 "$ state [13] $end
$var wire 1 #$ state [12] $end
$var wire 1 $$ state [11] $end
$var wire 1 %$ state [10] $end
$var wire 1 &$ state [9] $end
$var wire 1 '$ state [8] $end
$var wire 1 ($ state [7] $end
$var wire 1 )$ state [6] $end
$var wire 1 *$ state [5] $end
$var wire 1 +$ state [4] $end
$var wire 1 ,$ state [3] $end
$var wire 1 -$ state [2] $end
$var wire 1 .$ state [1] $end
$var wire 1 /$ state [0] $end

$scope module dff0 $end
$var wire 1 x4 en $end
$var wire 1 Q# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 /$ q $end
$var wire 1 y4 data $end

$scope module DFF $end
$var wire 1 /$ q $end
$var wire 1 y4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 z4 state $end
$upscope $end
$upscope $end

$scope module dff1 $end
$var wire 1 x4 en $end
$var wire 1 P# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 .$ q $end
$var wire 1 {4 data $end

$scope module DFF $end
$var wire 1 .$ q $end
$var wire 1 {4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 |4 state $end
$upscope $end
$upscope $end

$scope module dff2 $end
$var wire 1 x4 en $end
$var wire 1 O# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 -$ q $end
$var wire 1 }4 data $end

$scope module DFF $end
$var wire 1 -$ q $end
$var wire 1 }4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ~4 state $end
$upscope $end
$upscope $end

$scope module dff3 $end
$var wire 1 x4 en $end
$var wire 1 N# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ,$ q $end
$var wire 1 !5 data $end

$scope module DFF $end
$var wire 1 ,$ q $end
$var wire 1 !5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 "5 state $end
$upscope $end
$upscope $end

$scope module dff4 $end
$var wire 1 x4 en $end
$var wire 1 M# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 +$ q $end
$var wire 1 #5 data $end

$scope module DFF $end
$var wire 1 +$ q $end
$var wire 1 #5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 $5 state $end
$upscope $end
$upscope $end

$scope module dff5 $end
$var wire 1 x4 en $end
$var wire 1 L# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 *$ q $end
$var wire 1 %5 data $end

$scope module DFF $end
$var wire 1 *$ q $end
$var wire 1 %5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 &5 state $end
$upscope $end
$upscope $end

$scope module dff6 $end
$var wire 1 x4 en $end
$var wire 1 K# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 )$ q $end
$var wire 1 '5 data $end

$scope module DFF $end
$var wire 1 )$ q $end
$var wire 1 '5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 (5 state $end
$upscope $end
$upscope $end

$scope module dff7 $end
$var wire 1 x4 en $end
$var wire 1 J# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ($ q $end
$var wire 1 )5 data $end

$scope module DFF $end
$var wire 1 ($ q $end
$var wire 1 )5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *5 state $end
$upscope $end
$upscope $end

$scope module dff8 $end
$var wire 1 x4 en $end
$var wire 1 I# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 '$ q $end
$var wire 1 +5 data $end

$scope module DFF $end
$var wire 1 '$ q $end
$var wire 1 +5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,5 state $end
$upscope $end
$upscope $end

$scope module dff9 $end
$var wire 1 x4 en $end
$var wire 1 H# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 &$ q $end
$var wire 1 -5 data $end

$scope module DFF $end
$var wire 1 &$ q $end
$var wire 1 -5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 .5 state $end
$upscope $end
$upscope $end

$scope module dff10 $end
$var wire 1 x4 en $end
$var wire 1 G# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 %$ q $end
$var wire 1 /5 data $end

$scope module DFF $end
$var wire 1 %$ q $end
$var wire 1 /5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 05 state $end
$upscope $end
$upscope $end

$scope module dff11 $end
$var wire 1 x4 en $end
$var wire 1 F# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 $$ q $end
$var wire 1 15 data $end

$scope module DFF $end
$var wire 1 $$ q $end
$var wire 1 15 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 25 state $end
$upscope $end
$upscope $end

$scope module dff12 $end
$var wire 1 x4 en $end
$var wire 1 E# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 #$ q $end
$var wire 1 35 data $end

$scope module DFF $end
$var wire 1 #$ q $end
$var wire 1 35 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 45 state $end
$upscope $end
$upscope $end

$scope module dff13 $end
$var wire 1 x4 en $end
$var wire 1 D# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 "$ q $end
$var wire 1 55 data $end

$scope module DFF $end
$var wire 1 "$ q $end
$var wire 1 55 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 65 state $end
$upscope $end
$upscope $end

$scope module dff14 $end
$var wire 1 x4 en $end
$var wire 1 C# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 !$ q $end
$var wire 1 75 data $end

$scope module DFF $end
$var wire 1 !$ q $end
$var wire 1 75 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 85 state $end
$upscope $end
$upscope $end

$scope module dff15 $end
$var wire 1 x4 en $end
$var wire 1 B# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~# q $end
$var wire 1 95 data $end

$scope module DFF $end
$var wire 1 ~# q $end
$var wire 1 95 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :5 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module immediate_REG $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 x4 en $end
$var wire 1 n! data_in [15] $end
$var wire 1 o! data_in [14] $end
$var wire 1 p! data_in [13] $end
$var wire 1 q! data_in [12] $end
$var wire 1 r! data_in [11] $end
$var wire 1 s! data_in [10] $end
$var wire 1 t! data_in [9] $end
$var wire 1 u! data_in [8] $end
$var wire 1 v! data_in [7] $end
$var wire 1 w! data_in [6] $end
$var wire 1 x! data_in [5] $end
$var wire 1 y! data_in [4] $end
$var wire 1 z! data_in [3] $end
$var wire 1 {! data_in [2] $end
$var wire 1 |! data_in [1] $end
$var wire 1 }! data_in [0] $end
$var wire 1 0$ state [15] $end
$var wire 1 1$ state [14] $end
$var wire 1 2$ state [13] $end
$var wire 1 3$ state [12] $end
$var wire 1 4$ state [11] $end
$var wire 1 5$ state [10] $end
$var wire 1 6$ state [9] $end
$var wire 1 7$ state [8] $end
$var wire 1 8$ state [7] $end
$var wire 1 9$ state [6] $end
$var wire 1 :$ state [5] $end
$var wire 1 ;$ state [4] $end
$var wire 1 <$ state [3] $end
$var wire 1 =$ state [2] $end
$var wire 1 >$ state [1] $end
$var wire 1 ?$ state [0] $end

$scope module dff0 $end
$var wire 1 x4 en $end
$var wire 1 }! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ?$ q $end
$var wire 1 ;5 data $end

$scope module DFF $end
$var wire 1 ?$ q $end
$var wire 1 ;5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 <5 state $end
$upscope $end
$upscope $end

$scope module dff1 $end
$var wire 1 x4 en $end
$var wire 1 |! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 >$ q $end
$var wire 1 =5 data $end

$scope module DFF $end
$var wire 1 >$ q $end
$var wire 1 =5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >5 state $end
$upscope $end
$upscope $end

$scope module dff2 $end
$var wire 1 x4 en $end
$var wire 1 {! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 =$ q $end
$var wire 1 ?5 data $end

$scope module DFF $end
$var wire 1 =$ q $end
$var wire 1 ?5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @5 state $end
$upscope $end
$upscope $end

$scope module dff3 $end
$var wire 1 x4 en $end
$var wire 1 z! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <$ q $end
$var wire 1 A5 data $end

$scope module DFF $end
$var wire 1 <$ q $end
$var wire 1 A5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 B5 state $end
$upscope $end
$upscope $end

$scope module dff4 $end
$var wire 1 x4 en $end
$var wire 1 y! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ;$ q $end
$var wire 1 C5 data $end

$scope module DFF $end
$var wire 1 ;$ q $end
$var wire 1 C5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 D5 state $end
$upscope $end
$upscope $end

$scope module dff5 $end
$var wire 1 x4 en $end
$var wire 1 x! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 :$ q $end
$var wire 1 E5 data $end

$scope module DFF $end
$var wire 1 :$ q $end
$var wire 1 E5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F5 state $end
$upscope $end
$upscope $end

$scope module dff6 $end
$var wire 1 x4 en $end
$var wire 1 w! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9$ q $end
$var wire 1 G5 data $end

$scope module DFF $end
$var wire 1 9$ q $end
$var wire 1 G5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H5 state $end
$upscope $end
$upscope $end

$scope module dff7 $end
$var wire 1 x4 en $end
$var wire 1 v! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 8$ q $end
$var wire 1 I5 data $end

$scope module DFF $end
$var wire 1 8$ q $end
$var wire 1 I5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 J5 state $end
$upscope $end
$upscope $end

$scope module dff8 $end
$var wire 1 x4 en $end
$var wire 1 u! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 7$ q $end
$var wire 1 K5 data $end

$scope module DFF $end
$var wire 1 7$ q $end
$var wire 1 K5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 L5 state $end
$upscope $end
$upscope $end

$scope module dff9 $end
$var wire 1 x4 en $end
$var wire 1 t! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6$ q $end
$var wire 1 M5 data $end

$scope module DFF $end
$var wire 1 6$ q $end
$var wire 1 M5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N5 state $end
$upscope $end
$upscope $end

$scope module dff10 $end
$var wire 1 x4 en $end
$var wire 1 s! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 5$ q $end
$var wire 1 O5 data $end

$scope module DFF $end
$var wire 1 5$ q $end
$var wire 1 O5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 P5 state $end
$upscope $end
$upscope $end

$scope module dff11 $end
$var wire 1 x4 en $end
$var wire 1 r! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 4$ q $end
$var wire 1 Q5 data $end

$scope module DFF $end
$var wire 1 4$ q $end
$var wire 1 Q5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 R5 state $end
$upscope $end
$upscope $end

$scope module dff12 $end
$var wire 1 x4 en $end
$var wire 1 q! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 3$ q $end
$var wire 1 S5 data $end

$scope module DFF $end
$var wire 1 3$ q $end
$var wire 1 S5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 T5 state $end
$upscope $end
$upscope $end

$scope module dff13 $end
$var wire 1 x4 en $end
$var wire 1 p! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 2$ q $end
$var wire 1 U5 data $end

$scope module DFF $end
$var wire 1 2$ q $end
$var wire 1 U5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V5 state $end
$upscope $end
$upscope $end

$scope module dff14 $end
$var wire 1 x4 en $end
$var wire 1 o! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 1$ q $end
$var wire 1 W5 data $end

$scope module DFF $end
$var wire 1 1$ q $end
$var wire 1 W5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 X5 state $end
$upscope $end
$upscope $end

$scope module dff15 $end
$var wire 1 x4 en $end
$var wire 1 n! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 0$ q $end
$var wire 1 Y5 data $end

$scope module DFF $end
$var wire 1 0$ q $end
$var wire 1 Y5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Z5 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module readData2_REG $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 x4 en $end
$var wire 1 ^! data_in [15] $end
$var wire 1 _! data_in [14] $end
$var wire 1 `! data_in [13] $end
$var wire 1 a! data_in [12] $end
$var wire 1 b! data_in [11] $end
$var wire 1 c! data_in [10] $end
$var wire 1 d! data_in [9] $end
$var wire 1 e! data_in [8] $end
$var wire 1 f! data_in [7] $end
$var wire 1 g! data_in [6] $end
$var wire 1 h! data_in [5] $end
$var wire 1 i! data_in [4] $end
$var wire 1 j! data_in [3] $end
$var wire 1 k! data_in [2] $end
$var wire 1 l! data_in [1] $end
$var wire 1 m! data_in [0] $end
$var wire 1 P$ state [15] $end
$var wire 1 Q$ state [14] $end
$var wire 1 R$ state [13] $end
$var wire 1 S$ state [12] $end
$var wire 1 T$ state [11] $end
$var wire 1 U$ state [10] $end
$var wire 1 V$ state [9] $end
$var wire 1 W$ state [8] $end
$var wire 1 X$ state [7] $end
$var wire 1 Y$ state [6] $end
$var wire 1 Z$ state [5] $end
$var wire 1 [$ state [4] $end
$var wire 1 \$ state [3] $end
$var wire 1 ]$ state [2] $end
$var wire 1 ^$ state [1] $end
$var wire 1 _$ state [0] $end

$scope module dff0 $end
$var wire 1 x4 en $end
$var wire 1 m! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 _$ q $end
$var wire 1 [5 data $end

$scope module DFF $end
$var wire 1 _$ q $end
$var wire 1 [5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \5 state $end
$upscope $end
$upscope $end

$scope module dff1 $end
$var wire 1 x4 en $end
$var wire 1 l! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ^$ q $end
$var wire 1 ]5 data $end

$scope module DFF $end
$var wire 1 ^$ q $end
$var wire 1 ]5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^5 state $end
$upscope $end
$upscope $end

$scope module dff2 $end
$var wire 1 x4 en $end
$var wire 1 k! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ]$ q $end
$var wire 1 _5 data $end

$scope module DFF $end
$var wire 1 ]$ q $end
$var wire 1 _5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `5 state $end
$upscope $end
$upscope $end

$scope module dff3 $end
$var wire 1 x4 en $end
$var wire 1 j! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 \$ q $end
$var wire 1 a5 data $end

$scope module DFF $end
$var wire 1 \$ q $end
$var wire 1 a5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 b5 state $end
$upscope $end
$upscope $end

$scope module dff4 $end
$var wire 1 x4 en $end
$var wire 1 i! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 [$ q $end
$var wire 1 c5 data $end

$scope module DFF $end
$var wire 1 [$ q $end
$var wire 1 c5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 d5 state $end
$upscope $end
$upscope $end

$scope module dff5 $end
$var wire 1 x4 en $end
$var wire 1 h! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 Z$ q $end
$var wire 1 e5 data $end

$scope module DFF $end
$var wire 1 Z$ q $end
$var wire 1 e5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 f5 state $end
$upscope $end
$upscope $end

$scope module dff6 $end
$var wire 1 x4 en $end
$var wire 1 g! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 Y$ q $end
$var wire 1 g5 data $end

$scope module DFF $end
$var wire 1 Y$ q $end
$var wire 1 g5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 h5 state $end
$upscope $end
$upscope $end

$scope module dff7 $end
$var wire 1 x4 en $end
$var wire 1 f! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 X$ q $end
$var wire 1 i5 data $end

$scope module DFF $end
$var wire 1 X$ q $end
$var wire 1 i5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 j5 state $end
$upscope $end
$upscope $end

$scope module dff8 $end
$var wire 1 x4 en $end
$var wire 1 e! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 W$ q $end
$var wire 1 k5 data $end

$scope module DFF $end
$var wire 1 W$ q $end
$var wire 1 k5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 l5 state $end
$upscope $end
$upscope $end

$scope module dff9 $end
$var wire 1 x4 en $end
$var wire 1 d! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 V$ q $end
$var wire 1 m5 data $end

$scope module DFF $end
$var wire 1 V$ q $end
$var wire 1 m5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 n5 state $end
$upscope $end
$upscope $end

$scope module dff10 $end
$var wire 1 x4 en $end
$var wire 1 c! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U$ q $end
$var wire 1 o5 data $end

$scope module DFF $end
$var wire 1 U$ q $end
$var wire 1 o5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 p5 state $end
$upscope $end
$upscope $end

$scope module dff11 $end
$var wire 1 x4 en $end
$var wire 1 b! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 T$ q $end
$var wire 1 q5 data $end

$scope module DFF $end
$var wire 1 T$ q $end
$var wire 1 q5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 r5 state $end
$upscope $end
$upscope $end

$scope module dff12 $end
$var wire 1 x4 en $end
$var wire 1 a! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 S$ q $end
$var wire 1 s5 data $end

$scope module DFF $end
$var wire 1 S$ q $end
$var wire 1 s5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 t5 state $end
$upscope $end
$upscope $end

$scope module dff13 $end
$var wire 1 x4 en $end
$var wire 1 `! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 R$ q $end
$var wire 1 u5 data $end

$scope module DFF $end
$var wire 1 R$ q $end
$var wire 1 u5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 v5 state $end
$upscope $end
$upscope $end

$scope module dff14 $end
$var wire 1 x4 en $end
$var wire 1 _! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 Q$ q $end
$var wire 1 w5 data $end

$scope module DFF $end
$var wire 1 Q$ q $end
$var wire 1 w5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 x5 state $end
$upscope $end
$upscope $end

$scope module dff15 $end
$var wire 1 x4 en $end
$var wire 1 ^! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P$ q $end
$var wire 1 y5 data $end

$scope module DFF $end
$var wire 1 P$ q $end
$var wire 1 y5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 z5 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module readData1_REG $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 x4 en $end
$var wire 1 N! data_in [15] $end
$var wire 1 O! data_in [14] $end
$var wire 1 P! data_in [13] $end
$var wire 1 Q! data_in [12] $end
$var wire 1 R! data_in [11] $end
$var wire 1 S! data_in [10] $end
$var wire 1 T! data_in [9] $end
$var wire 1 U! data_in [8] $end
$var wire 1 V! data_in [7] $end
$var wire 1 W! data_in [6] $end
$var wire 1 X! data_in [5] $end
$var wire 1 Y! data_in [4] $end
$var wire 1 Z! data_in [3] $end
$var wire 1 [! data_in [2] $end
$var wire 1 \! data_in [1] $end
$var wire 1 ]! data_in [0] $end
$var wire 1 @$ state [15] $end
$var wire 1 A$ state [14] $end
$var wire 1 B$ state [13] $end
$var wire 1 C$ state [12] $end
$var wire 1 D$ state [11] $end
$var wire 1 E$ state [10] $end
$var wire 1 F$ state [9] $end
$var wire 1 G$ state [8] $end
$var wire 1 H$ state [7] $end
$var wire 1 I$ state [6] $end
$var wire 1 J$ state [5] $end
$var wire 1 K$ state [4] $end
$var wire 1 L$ state [3] $end
$var wire 1 M$ state [2] $end
$var wire 1 N$ state [1] $end
$var wire 1 O$ state [0] $end

$scope module dff0 $end
$var wire 1 x4 en $end
$var wire 1 ]! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 O$ q $end
$var wire 1 {5 data $end

$scope module DFF $end
$var wire 1 O$ q $end
$var wire 1 {5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 |5 state $end
$upscope $end
$upscope $end

$scope module dff1 $end
$var wire 1 x4 en $end
$var wire 1 \! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 N$ q $end
$var wire 1 }5 data $end

$scope module DFF $end
$var wire 1 N$ q $end
$var wire 1 }5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ~5 state $end
$upscope $end
$upscope $end

$scope module dff2 $end
$var wire 1 x4 en $end
$var wire 1 [! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 M$ q $end
$var wire 1 !6 data $end

$scope module DFF $end
$var wire 1 M$ q $end
$var wire 1 !6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 "6 state $end
$upscope $end
$upscope $end

$scope module dff3 $end
$var wire 1 x4 en $end
$var wire 1 Z! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 L$ q $end
$var wire 1 #6 data $end

$scope module DFF $end
$var wire 1 L$ q $end
$var wire 1 #6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 $6 state $end
$upscope $end
$upscope $end

$scope module dff4 $end
$var wire 1 x4 en $end
$var wire 1 Y! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 K$ q $end
$var wire 1 %6 data $end

$scope module DFF $end
$var wire 1 K$ q $end
$var wire 1 %6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 &6 state $end
$upscope $end
$upscope $end

$scope module dff5 $end
$var wire 1 x4 en $end
$var wire 1 X! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 J$ q $end
$var wire 1 '6 data $end

$scope module DFF $end
$var wire 1 J$ q $end
$var wire 1 '6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 (6 state $end
$upscope $end
$upscope $end

$scope module dff6 $end
$var wire 1 x4 en $end
$var wire 1 W! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 I$ q $end
$var wire 1 )6 data $end

$scope module DFF $end
$var wire 1 I$ q $end
$var wire 1 )6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *6 state $end
$upscope $end
$upscope $end

$scope module dff7 $end
$var wire 1 x4 en $end
$var wire 1 V! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 H$ q $end
$var wire 1 +6 data $end

$scope module DFF $end
$var wire 1 H$ q $end
$var wire 1 +6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,6 state $end
$upscope $end
$upscope $end

$scope module dff8 $end
$var wire 1 x4 en $end
$var wire 1 U! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 G$ q $end
$var wire 1 -6 data $end

$scope module DFF $end
$var wire 1 G$ q $end
$var wire 1 -6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 .6 state $end
$upscope $end
$upscope $end

$scope module dff9 $end
$var wire 1 x4 en $end
$var wire 1 T! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 F$ q $end
$var wire 1 /6 data $end

$scope module DFF $end
$var wire 1 F$ q $end
$var wire 1 /6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 06 state $end
$upscope $end
$upscope $end

$scope module dff10 $end
$var wire 1 x4 en $end
$var wire 1 S! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 E$ q $end
$var wire 1 16 data $end

$scope module DFF $end
$var wire 1 E$ q $end
$var wire 1 16 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 26 state $end
$upscope $end
$upscope $end

$scope module dff11 $end
$var wire 1 x4 en $end
$var wire 1 R! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 D$ q $end
$var wire 1 36 data $end

$scope module DFF $end
$var wire 1 D$ q $end
$var wire 1 36 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 46 state $end
$upscope $end
$upscope $end

$scope module dff12 $end
$var wire 1 x4 en $end
$var wire 1 Q! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 C$ q $end
$var wire 1 56 data $end

$scope module DFF $end
$var wire 1 C$ q $end
$var wire 1 56 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 66 state $end
$upscope $end
$upscope $end

$scope module dff13 $end
$var wire 1 x4 en $end
$var wire 1 P! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 B$ q $end
$var wire 1 76 data $end

$scope module DFF $end
$var wire 1 B$ q $end
$var wire 1 76 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 86 state $end
$upscope $end
$upscope $end

$scope module dff14 $end
$var wire 1 x4 en $end
$var wire 1 O! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 A$ q $end
$var wire 1 96 data $end

$scope module DFF $end
$var wire 1 A$ q $end
$var wire 1 96 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :6 state $end
$upscope $end
$upscope $end

$scope module dff15 $end
$var wire 1 x4 en $end
$var wire 1 N! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 @$ q $end
$var wire 1 ;6 data $end

$scope module DFF $end
$var wire 1 @$ q $end
$var wire 1 ;6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 <6 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module HALT_REG $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 x4 en $end
$var wire 1 <! data_in $end
$var wire 1 g$ state $end

$scope module dff0 $end
$var wire 1 x4 en $end
$var wire 1 <! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 g$ q $end
$var wire 1 =6 data $end

$scope module DFF $end
$var wire 1 g$ q $end
$var wire 1 =6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >6 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module writeR7_REG $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 x4 en $end
$var wire 1 >! data_in $end
$var wire 1 h$ state $end

$scope module dff0 $end
$var wire 1 x4 en $end
$var wire 1 >! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 h$ q $end
$var wire 1 ?6 data $end

$scope module DFF $end
$var wire 1 h$ q $end
$var wire 1 ?6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @6 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module memToReg_REG $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 x4 en $end
$var wire 1 B! data_in $end
$var wire 1 i$ state $end

$scope module dff0 $end
$var wire 1 x4 en $end
$var wire 1 B! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 i$ q $end
$var wire 1 A6 data $end

$scope module DFF $end
$var wire 1 i$ q $end
$var wire 1 A6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 B6 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module memRead_REG $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 x4 en $end
$var wire 1 C! data_in $end
$var wire 1 j$ state $end

$scope module dff0 $end
$var wire 1 x4 en $end
$var wire 1 C! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 j$ q $end
$var wire 1 C6 data $end

$scope module DFF $end
$var wire 1 j$ q $end
$var wire 1 C6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 D6 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module memWrite_REG $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 x4 en $end
$var wire 1 H! data_in $end
$var wire 1 k$ state $end

$scope module dff0 $end
$var wire 1 x4 en $end
$var wire 1 H! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 k$ q $end
$var wire 1 E6 data $end

$scope module DFF $end
$var wire 1 k$ q $end
$var wire 1 E6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F6 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module ALUsrc_REG $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 x4 en $end
$var wire 1 I! data_in $end
$var wire 1 l$ state $end

$scope module dff0 $end
$var wire 1 x4 en $end
$var wire 1 I! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 l$ q $end
$var wire 1 G6 data $end

$scope module DFF $end
$var wire 1 l$ q $end
$var wire 1 G6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H6 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module regWrite_REG $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 x4 en $end
$var wire 1 J! data_in $end
$var wire 1 m$ state $end

$scope module dff0 $end
$var wire 1 x4 en $end
$var wire 1 J! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 m$ q $end
$var wire 1 I6 data $end

$scope module DFF $end
$var wire 1 m$ q $end
$var wire 1 I6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 J6 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module ALUop_REG $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 x4 en $end
$var wire 1 D! data_in [3] $end
$var wire 1 E! data_in [2] $end
$var wire 1 F! data_in [1] $end
$var wire 1 G! data_in [0] $end
$var wire 1 c$ state [3] $end
$var wire 1 d$ state [2] $end
$var wire 1 e$ state [1] $end
$var wire 1 f$ state [0] $end

$scope module dff0 $end
$var wire 1 x4 en $end
$var wire 1 G! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 f$ q $end
$var wire 1 K6 data $end

$scope module DFF $end
$var wire 1 f$ q $end
$var wire 1 K6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 L6 state $end
$upscope $end
$upscope $end

$scope module dff1 $end
$var wire 1 x4 en $end
$var wire 1 F! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 e$ q $end
$var wire 1 M6 data $end

$scope module DFF $end
$var wire 1 e$ q $end
$var wire 1 M6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N6 state $end
$upscope $end
$upscope $end

$scope module dff2 $end
$var wire 1 x4 en $end
$var wire 1 E! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 d$ q $end
$var wire 1 O6 data $end

$scope module DFF $end
$var wire 1 d$ q $end
$var wire 1 O6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 P6 state $end
$upscope $end
$upscope $end

$scope module dff3 $end
$var wire 1 x4 en $end
$var wire 1 D! d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 c$ q $end
$var wire 1 Q6 data $end

$scope module DFF $end
$var wire 1 c$ q $end
$var wire 1 Q6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 R6 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module writeRegSel_REG $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 x4 en $end
$var wire 1 r# data_in [2] $end
$var wire 1 s# data_in [1] $end
$var wire 1 t# data_in [0] $end
$var wire 1 `$ state [2] $end
$var wire 1 a$ state [1] $end
$var wire 1 b$ state [0] $end

$scope module dff0 $end
$var wire 1 x4 en $end
$var wire 1 t# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 b$ q $end
$var wire 1 S6 data $end

$scope module DFF $end
$var wire 1 b$ q $end
$var wire 1 S6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 T6 state $end
$upscope $end
$upscope $end

$scope module dff1 $end
$var wire 1 x4 en $end
$var wire 1 s# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 a$ q $end
$var wire 1 U6 data $end

$scope module DFF $end
$var wire 1 a$ q $end
$var wire 1 U6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V6 state $end
$upscope $end
$upscope $end

$scope module dff2 $end
$var wire 1 x4 en $end
$var wire 1 r# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 `$ q $end
$var wire 1 W6 data $end

$scope module DFF $end
$var wire 1 `$ q $end
$var wire 1 W6 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 X6 state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module execute0 $end
$var wire 1 l$ ALUSrc $end
$var wire 1 c$ ALUOp [3] $end
$var wire 1 d$ ALUOp [2] $end
$var wire 1 e$ ALUOp [1] $end
$var wire 1 f$ ALUOp [0] $end
$var wire 1 0$ extOutput [15] $end
$var wire 1 1$ extOutput [14] $end
$var wire 1 2$ extOutput [13] $end
$var wire 1 3$ extOutput [12] $end
$var wire 1 4$ extOutput [11] $end
$var wire 1 5$ extOutput [10] $end
$var wire 1 6$ extOutput [9] $end
$var wire 1 7$ extOutput [8] $end
$var wire 1 8$ extOutput [7] $end
$var wire 1 9$ extOutput [6] $end
$var wire 1 :$ extOutput [5] $end
$var wire 1 ;$ extOutput [4] $end
$var wire 1 <$ extOutput [3] $end
$var wire 1 =$ extOutput [2] $end
$var wire 1 >$ extOutput [1] $end
$var wire 1 ?$ extOutput [0] $end
$var wire 1 @$ ReadData1 [15] $end
$var wire 1 A$ ReadData1 [14] $end
$var wire 1 B$ ReadData1 [13] $end
$var wire 1 C$ ReadData1 [12] $end
$var wire 1 D$ ReadData1 [11] $end
$var wire 1 E$ ReadData1 [10] $end
$var wire 1 F$ ReadData1 [9] $end
$var wire 1 G$ ReadData1 [8] $end
$var wire 1 H$ ReadData1 [7] $end
$var wire 1 I$ ReadData1 [6] $end
$var wire 1 J$ ReadData1 [5] $end
$var wire 1 K$ ReadData1 [4] $end
$var wire 1 L$ ReadData1 [3] $end
$var wire 1 M$ ReadData1 [2] $end
$var wire 1 N$ ReadData1 [1] $end
$var wire 1 O$ ReadData1 [0] $end
$var wire 1 P$ ReadData2 [15] $end
$var wire 1 Q$ ReadData2 [14] $end
$var wire 1 R$ ReadData2 [13] $end
$var wire 1 S$ ReadData2 [12] $end
$var wire 1 T$ ReadData2 [11] $end
$var wire 1 U$ ReadData2 [10] $end
$var wire 1 V$ ReadData2 [9] $end
$var wire 1 W$ ReadData2 [8] $end
$var wire 1 X$ ReadData2 [7] $end
$var wire 1 Y$ ReadData2 [6] $end
$var wire 1 Z$ ReadData2 [5] $end
$var wire 1 [$ ReadData2 [4] $end
$var wire 1 \$ ReadData2 [3] $end
$var wire 1 ]$ ReadData2 [2] $end
$var wire 1 ^$ ReadData2 [1] $end
$var wire 1 _$ ReadData2 [0] $end
$var wire 1 p" ALUResult [15] $end
$var wire 1 q" ALUResult [14] $end
$var wire 1 r" ALUResult [13] $end
$var wire 1 s" ALUResult [12] $end
$var wire 1 t" ALUResult [11] $end
$var wire 1 u" ALUResult [10] $end
$var wire 1 v" ALUResult [9] $end
$var wire 1 w" ALUResult [8] $end
$var wire 1 x" ALUResult [7] $end
$var wire 1 y" ALUResult [6] $end
$var wire 1 z" ALUResult [5] $end
$var wire 1 {" ALUResult [4] $end
$var wire 1 |" ALUResult [3] $end
$var wire 1 }" ALUResult [2] $end
$var wire 1 ~" ALUResult [1] $end
$var wire 1 !# ALUResult [0] $end
$var wire 1 Y6 Zero $end
$var wire 1 Z6 Ofl $end
$var wire 1 [6 muxOutput [15] $end
$var wire 1 \6 muxOutput [14] $end
$var wire 1 ]6 muxOutput [13] $end
$var wire 1 ^6 muxOutput [12] $end
$var wire 1 _6 muxOutput [11] $end
$var wire 1 `6 muxOutput [10] $end
$var wire 1 a6 muxOutput [9] $end
$var wire 1 b6 muxOutput [8] $end
$var wire 1 c6 muxOutput [7] $end
$var wire 1 d6 muxOutput [6] $end
$var wire 1 e6 muxOutput [5] $end
$var wire 1 f6 muxOutput [4] $end
$var wire 1 g6 muxOutput [3] $end
$var wire 1 h6 muxOutput [2] $end
$var wire 1 i6 muxOutput [1] $end
$var wire 1 j6 muxOutput [0] $end
$var wire 1 k6 invA $end
$var wire 1 l6 invB $end
$var wire 1 m6 SLTflag $end
$var wire 1 n6 SLEflag $end
$var wire 1 o6 SUBflag $end
$var wire 1 p6 ANDNflag $end
$var wire 1 q6 carryIn $end

$scope module ALU $end
$var parameter 32 r6 N $end
$var parameter 32 s6 O $end
$var wire 1 @$ InA [15] $end
$var wire 1 A$ InA [14] $end
$var wire 1 B$ InA [13] $end
$var wire 1 C$ InA [12] $end
$var wire 1 D$ InA [11] $end
$var wire 1 E$ InA [10] $end
$var wire 1 F$ InA [9] $end
$var wire 1 G$ InA [8] $end
$var wire 1 H$ InA [7] $end
$var wire 1 I$ InA [6] $end
$var wire 1 J$ InA [5] $end
$var wire 1 K$ InA [4] $end
$var wire 1 L$ InA [3] $end
$var wire 1 M$ InA [2] $end
$var wire 1 N$ InA [1] $end
$var wire 1 O$ InA [0] $end
$var wire 1 [6 InB [15] $end
$var wire 1 \6 InB [14] $end
$var wire 1 ]6 InB [13] $end
$var wire 1 ^6 InB [12] $end
$var wire 1 _6 InB [11] $end
$var wire 1 `6 InB [10] $end
$var wire 1 a6 InB [9] $end
$var wire 1 b6 InB [8] $end
$var wire 1 c6 InB [7] $end
$var wire 1 d6 InB [6] $end
$var wire 1 e6 InB [5] $end
$var wire 1 f6 InB [4] $end
$var wire 1 g6 InB [3] $end
$var wire 1 h6 InB [2] $end
$var wire 1 i6 InB [1] $end
$var wire 1 j6 InB [0] $end
$var wire 1 q6 Cin $end
$var wire 1 c$ Op [3] $end
$var wire 1 d$ Op [2] $end
$var wire 1 e$ Op [1] $end
$var wire 1 f$ Op [0] $end
$var wire 1 k6 invA $end
$var wire 1 l6 invB $end
$var wire 1 t6 sign $end
$var wire 1 p" Out [15] $end
$var wire 1 q" Out [14] $end
$var wire 1 r" Out [13] $end
$var wire 1 s" Out [12] $end
$var wire 1 t" Out [11] $end
$var wire 1 u" Out [10] $end
$var wire 1 v" Out [9] $end
$var wire 1 w" Out [8] $end
$var wire 1 x" Out [7] $end
$var wire 1 y" Out [6] $end
$var wire 1 z" Out [5] $end
$var wire 1 {" Out [4] $end
$var wire 1 |" Out [3] $end
$var wire 1 }" Out [2] $end
$var wire 1 ~" Out [1] $end
$var wire 1 !# Out [0] $end
$var wire 1 Z6 Ofl $end
$var wire 1 Y6 Zero $end
$var wire 1 u6 S [15] $end
$var wire 1 v6 S [14] $end
$var wire 1 w6 S [13] $end
$var wire 1 x6 S [12] $end
$var wire 1 y6 S [11] $end
$var wire 1 z6 S [10] $end
$var wire 1 {6 S [9] $end
$var wire 1 |6 S [8] $end
$var wire 1 }6 S [7] $end
$var wire 1 ~6 S [6] $end
$var wire 1 !7 S [5] $end
$var wire 1 "7 S [4] $end
$var wire 1 #7 S [3] $end
$var wire 1 $7 S [2] $end
$var wire 1 %7 S [1] $end
$var wire 1 &7 S [0] $end
$var wire 1 '7 C_out $end
$var wire 1 (7 A [15] $end
$var wire 1 )7 A [14] $end
$var wire 1 *7 A [13] $end
$var wire 1 +7 A [12] $end
$var wire 1 ,7 A [11] $end
$var wire 1 -7 A [10] $end
$var wire 1 .7 A [9] $end
$var wire 1 /7 A [8] $end
$var wire 1 07 A [7] $end
$var wire 1 17 A [6] $end
$var wire 1 27 A [5] $end
$var wire 1 37 A [4] $end
$var wire 1 47 A [3] $end
$var wire 1 57 A [2] $end
$var wire 1 67 A [1] $end
$var wire 1 77 A [0] $end
$var wire 1 87 B [15] $end
$var wire 1 97 B [14] $end
$var wire 1 :7 B [13] $end
$var wire 1 ;7 B [12] $end
$var wire 1 <7 B [11] $end
$var wire 1 =7 B [10] $end
$var wire 1 >7 B [9] $end
$var wire 1 ?7 B [8] $end
$var wire 1 @7 B [7] $end
$var wire 1 A7 B [6] $end
$var wire 1 B7 B [5] $end
$var wire 1 C7 B [4] $end
$var wire 1 D7 B [3] $end
$var wire 1 E7 B [2] $end
$var wire 1 F7 B [1] $end
$var wire 1 G7 B [0] $end
$var wire 1 H7 shiftLeft [15] $end
$var wire 1 I7 shiftLeft [14] $end
$var wire 1 J7 shiftLeft [13] $end
$var wire 1 K7 shiftLeft [12] $end
$var wire 1 L7 shiftLeft [11] $end
$var wire 1 M7 shiftLeft [10] $end
$var wire 1 N7 shiftLeft [9] $end
$var wire 1 O7 shiftLeft [8] $end
$var wire 1 P7 shiftLeft [7] $end
$var wire 1 Q7 shiftLeft [6] $end
$var wire 1 R7 shiftLeft [5] $end
$var wire 1 S7 shiftLeft [4] $end
$var wire 1 T7 shiftLeft [3] $end
$var wire 1 U7 shiftLeft [2] $end
$var wire 1 V7 shiftLeft [1] $end
$var wire 1 W7 shiftLeft [0] $end
$var wire 1 X7 rotateLeft [15] $end
$var wire 1 Y7 rotateLeft [14] $end
$var wire 1 Z7 rotateLeft [13] $end
$var wire 1 [7 rotateLeft [12] $end
$var wire 1 \7 rotateLeft [11] $end
$var wire 1 ]7 rotateLeft [10] $end
$var wire 1 ^7 rotateLeft [9] $end
$var wire 1 _7 rotateLeft [8] $end
$var wire 1 `7 rotateLeft [7] $end
$var wire 1 a7 rotateLeft [6] $end
$var wire 1 b7 rotateLeft [5] $end
$var wire 1 c7 rotateLeft [4] $end
$var wire 1 d7 rotateLeft [3] $end
$var wire 1 e7 rotateLeft [2] $end
$var wire 1 f7 rotateLeft [1] $end
$var wire 1 g7 rotateLeft [0] $end
$var wire 1 h7 shiftRight_A [15] $end
$var wire 1 i7 shiftRight_A [14] $end
$var wire 1 j7 shiftRight_A [13] $end
$var wire 1 k7 shiftRight_A [12] $end
$var wire 1 l7 shiftRight_A [11] $end
$var wire 1 m7 shiftRight_A [10] $end
$var wire 1 n7 shiftRight_A [9] $end
$var wire 1 o7 shiftRight_A [8] $end
$var wire 1 p7 shiftRight_A [7] $end
$var wire 1 q7 shiftRight_A [6] $end
$var wire 1 r7 shiftRight_A [5] $end
$var wire 1 s7 shiftRight_A [4] $end
$var wire 1 t7 shiftRight_A [3] $end
$var wire 1 u7 shiftRight_A [2] $end
$var wire 1 v7 shiftRight_A [1] $end
$var wire 1 w7 shiftRight_A [0] $end
$var wire 1 x7 shiftRight_L [15] $end
$var wire 1 y7 shiftRight_L [14] $end
$var wire 1 z7 shiftRight_L [13] $end
$var wire 1 {7 shiftRight_L [12] $end
$var wire 1 |7 shiftRight_L [11] $end
$var wire 1 }7 shiftRight_L [10] $end
$var wire 1 ~7 shiftRight_L [9] $end
$var wire 1 !8 shiftRight_L [8] $end
$var wire 1 "8 shiftRight_L [7] $end
$var wire 1 #8 shiftRight_L [6] $end
$var wire 1 $8 shiftRight_L [5] $end
$var wire 1 %8 shiftRight_L [4] $end
$var wire 1 &8 shiftRight_L [3] $end
$var wire 1 '8 shiftRight_L [2] $end
$var wire 1 (8 shiftRight_L [1] $end
$var wire 1 )8 shiftRight_L [0] $end
$var wire 1 *8 rotateRight [15] $end
$var wire 1 +8 rotateRight [14] $end
$var wire 1 ,8 rotateRight [13] $end
$var wire 1 -8 rotateRight [12] $end
$var wire 1 .8 rotateRight [11] $end
$var wire 1 /8 rotateRight [10] $end
$var wire 1 08 rotateRight [9] $end
$var wire 1 18 rotateRight [8] $end
$var wire 1 28 rotateRight [7] $end
$var wire 1 38 rotateRight [6] $end
$var wire 1 48 rotateRight [5] $end
$var wire 1 58 rotateRight [4] $end
$var wire 1 68 rotateRight [3] $end
$var wire 1 78 rotateRight [2] $end
$var wire 1 88 rotateRight [1] $end
$var wire 1 98 rotateRight [0] $end
$var wire 1 :8 btrOutput [15] $end
$var wire 1 ;8 btrOutput [14] $end
$var wire 1 <8 btrOutput [13] $end
$var wire 1 =8 btrOutput [12] $end
$var wire 1 >8 btrOutput [11] $end
$var wire 1 ?8 btrOutput [10] $end
$var wire 1 @8 btrOutput [9] $end
$var wire 1 A8 btrOutput [8] $end
$var wire 1 B8 btrOutput [7] $end
$var wire 1 C8 btrOutput [6] $end
$var wire 1 D8 btrOutput [5] $end
$var wire 1 E8 btrOutput [4] $end
$var wire 1 F8 btrOutput [3] $end
$var wire 1 G8 btrOutput [2] $end
$var wire 1 H8 btrOutput [1] $end
$var wire 1 I8 btrOutput [0] $end
$var wire 1 J8 scoOutput [15] $end
$var wire 1 K8 scoOutput [14] $end
$var wire 1 L8 scoOutput [13] $end
$var wire 1 M8 scoOutput [12] $end
$var wire 1 N8 scoOutput [11] $end
$var wire 1 O8 scoOutput [10] $end
$var wire 1 P8 scoOutput [9] $end
$var wire 1 Q8 scoOutput [8] $end
$var wire 1 R8 scoOutput [7] $end
$var wire 1 S8 scoOutput [6] $end
$var wire 1 T8 scoOutput [5] $end
$var wire 1 U8 scoOutput [4] $end
$var wire 1 V8 scoOutput [3] $end
$var wire 1 W8 scoOutput [2] $end
$var wire 1 X8 scoOutput [1] $end
$var wire 1 Y8 scoOutput [0] $end
$var wire 1 Z8 slbiOutput [15] $end
$var wire 1 [8 slbiOutput [14] $end
$var wire 1 \8 slbiOutput [13] $end
$var wire 1 ]8 slbiOutput [12] $end
$var wire 1 ^8 slbiOutput [11] $end
$var wire 1 _8 slbiOutput [10] $end
$var wire 1 `8 slbiOutput [9] $end
$var wire 1 a8 slbiOutput [8] $end
$var wire 1 b8 slbiOutput [7] $end
$var wire 1 c8 slbiOutput [6] $end
$var wire 1 d8 slbiOutput [5] $end
$var wire 1 e8 slbiOutput [4] $end
$var wire 1 f8 slbiOutput [3] $end
$var wire 1 g8 slbiOutput [2] $end
$var wire 1 h8 slbiOutput [1] $end
$var wire 1 i8 slbiOutput [0] $end
$var wire 1 j8 seqOutput [15] $end
$var wire 1 k8 seqOutput [14] $end
$var wire 1 l8 seqOutput [13] $end
$var wire 1 m8 seqOutput [12] $end
$var wire 1 n8 seqOutput [11] $end
$var wire 1 o8 seqOutput [10] $end
$var wire 1 p8 seqOutput [9] $end
$var wire 1 q8 seqOutput [8] $end
$var wire 1 r8 seqOutput [7] $end
$var wire 1 s8 seqOutput [6] $end
$var wire 1 t8 seqOutput [5] $end
$var wire 1 u8 seqOutput [4] $end
$var wire 1 v8 seqOutput [3] $end
$var wire 1 w8 seqOutput [2] $end
$var wire 1 x8 seqOutput [1] $end
$var wire 1 y8 seqOutput [0] $end
$var reg 1 z8 OflWire $end
$var reg 16 {8 OutWire [15:0] $end
$var wire 1 |8 negative $end
$var wire 1 }8 negative_or_zero $end
$var wire 1 ~8 neg_i $end
$var wire 1 !9 noz_i $end
$var wire 1 "9 ifLogic $end
$var wire 1 #9 diffSigns $end
$var wire 1 $9 bothPos $end
$var wire 1 %9 bothNeg $end
$var wire 1 &9 negResultFromPos $end
$var wire 1 '9 posResultFromNeg $end

$scope module NOR_NOZ $end
$var wire 1 |8 in1 $end
$var wire 1 Y6 in2 $end
$var wire 1 !9 out $end
$upscope $end

$scope module NOT_NOZ $end
$var wire 1 !9 in1 $end
$var wire 1 }8 out $end
$upscope $end

$scope module SHFT1 $end
$var parameter 32 (9 N $end
$var parameter 32 )9 C $end
$var parameter 32 *9 O $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var wire 1 +9 Op [1] $end
$var wire 1 ,9 Op [0] $end
$var reg 16 -9 Out [15:0] $end
$var wire 1 .9 shiftLeftResult [15] $end
$var wire 1 /9 shiftLeftResult [14] $end
$var wire 1 09 shiftLeftResult [13] $end
$var wire 1 19 shiftLeftResult [12] $end
$var wire 1 29 shiftLeftResult [11] $end
$var wire 1 39 shiftLeftResult [10] $end
$var wire 1 49 shiftLeftResult [9] $end
$var wire 1 59 shiftLeftResult [8] $end
$var wire 1 69 shiftLeftResult [7] $end
$var wire 1 79 shiftLeftResult [6] $end
$var wire 1 89 shiftLeftResult [5] $end
$var wire 1 99 shiftLeftResult [4] $end
$var wire 1 :9 shiftLeftResult [3] $end
$var wire 1 ;9 shiftLeftResult [2] $end
$var wire 1 <9 shiftLeftResult [1] $end
$var wire 1 =9 shiftLeftResult [0] $end
$var wire 1 >9 shiftRightLogical [15] $end
$var wire 1 ?9 shiftRightLogical [14] $end
$var wire 1 @9 shiftRightLogical [13] $end
$var wire 1 A9 shiftRightLogical [12] $end
$var wire 1 B9 shiftRightLogical [11] $end
$var wire 1 C9 shiftRightLogical [10] $end
$var wire 1 D9 shiftRightLogical [9] $end
$var wire 1 E9 shiftRightLogical [8] $end
$var wire 1 F9 shiftRightLogical [7] $end
$var wire 1 G9 shiftRightLogical [6] $end
$var wire 1 H9 shiftRightLogical [5] $end
$var wire 1 I9 shiftRightLogical [4] $end
$var wire 1 J9 shiftRightLogical [3] $end
$var wire 1 K9 shiftRightLogical [2] $end
$var wire 1 L9 shiftRightLogical [1] $end
$var wire 1 M9 shiftRightLogical [0] $end
$var wire 1 N9 shiftRightArithmetic [15] $end
$var wire 1 O9 shiftRightArithmetic [14] $end
$var wire 1 P9 shiftRightArithmetic [13] $end
$var wire 1 Q9 shiftRightArithmetic [12] $end
$var wire 1 R9 shiftRightArithmetic [11] $end
$var wire 1 S9 shiftRightArithmetic [10] $end
$var wire 1 T9 shiftRightArithmetic [9] $end
$var wire 1 U9 shiftRightArithmetic [8] $end
$var wire 1 V9 shiftRightArithmetic [7] $end
$var wire 1 W9 shiftRightArithmetic [6] $end
$var wire 1 X9 shiftRightArithmetic [5] $end
$var wire 1 Y9 shiftRightArithmetic [4] $end
$var wire 1 Z9 shiftRightArithmetic [3] $end
$var wire 1 [9 shiftRightArithmetic [2] $end
$var wire 1 \9 shiftRightArithmetic [1] $end
$var wire 1 ]9 shiftRightArithmetic [0] $end
$var wire 1 ^9 rotateLeftResult [15] $end
$var wire 1 _9 rotateLeftResult [14] $end
$var wire 1 `9 rotateLeftResult [13] $end
$var wire 1 a9 rotateLeftResult [12] $end
$var wire 1 b9 rotateLeftResult [11] $end
$var wire 1 c9 rotateLeftResult [10] $end
$var wire 1 d9 rotateLeftResult [9] $end
$var wire 1 e9 rotateLeftResult [8] $end
$var wire 1 f9 rotateLeftResult [7] $end
$var wire 1 g9 rotateLeftResult [6] $end
$var wire 1 h9 rotateLeftResult [5] $end
$var wire 1 i9 rotateLeftResult [4] $end
$var wire 1 j9 rotateLeftResult [3] $end
$var wire 1 k9 rotateLeftResult [2] $end
$var wire 1 l9 rotateLeftResult [1] $end
$var wire 1 m9 rotateLeftResult [0] $end

$scope module SHFT1 $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var reg 16 n9 Out [15:0] $end
$var wire 1 o9 out [15] $end
$var wire 1 p9 out [14] $end
$var wire 1 q9 out [13] $end
$var wire 1 r9 out [12] $end
$var wire 1 s9 out [11] $end
$var wire 1 t9 out [10] $end
$var wire 1 u9 out [9] $end
$var wire 1 v9 out [8] $end
$var wire 1 w9 out [7] $end
$var wire 1 x9 out [6] $end
$var wire 1 y9 out [5] $end
$var wire 1 z9 out [4] $end
$var wire 1 {9 out [3] $end
$var wire 1 |9 out [2] $end
$var wire 1 }9 out [1] $end
$var wire 1 ~9 out [0] $end
$upscope $end

$scope module SHFT_RL $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var reg 16 !: Out [15:0] $end
$upscope $end

$scope module SHFT_RA $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var reg 16 ": Out [15:0] $end
$var wire 1 #: out [15] $end
$var wire 1 $: out [14] $end
$var wire 1 %: out [13] $end
$var wire 1 &: out [12] $end
$var wire 1 ': out [11] $end
$var wire 1 (: out [10] $end
$var wire 1 ): out [9] $end
$var wire 1 *: out [8] $end
$var wire 1 +: out [7] $end
$var wire 1 ,: out [6] $end
$var wire 1 -: out [5] $end
$var wire 1 .: out [4] $end
$var wire 1 /: out [3] $end
$var wire 1 0: out [2] $end
$var wire 1 1: out [1] $end
$var wire 1 2: out [0] $end
$upscope $end

$scope module ROTL $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var reg 16 3: Out [15:0] $end
$var wire 1 4: out [15] $end
$var wire 1 5: out [14] $end
$var wire 1 6: out [13] $end
$var wire 1 7: out [12] $end
$var wire 1 8: out [11] $end
$var wire 1 9: out [10] $end
$var wire 1 :: out [9] $end
$var wire 1 ;: out [8] $end
$var wire 1 <: out [7] $end
$var wire 1 =: out [6] $end
$var wire 1 >: out [5] $end
$var wire 1 ?: out [4] $end
$var wire 1 @: out [3] $end
$var wire 1 A: out [2] $end
$var wire 1 B: out [1] $end
$var wire 1 C: out [0] $end
$upscope $end
$upscope $end

$scope module SHFT2 $end
$var parameter 32 D: N $end
$var parameter 32 E: C $end
$var parameter 32 F: O $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var wire 1 G: Op [1] $end
$var wire 1 H: Op [0] $end
$var reg 16 I: Out [15:0] $end
$var wire 1 J: shiftLeftResult [15] $end
$var wire 1 K: shiftLeftResult [14] $end
$var wire 1 L: shiftLeftResult [13] $end
$var wire 1 M: shiftLeftResult [12] $end
$var wire 1 N: shiftLeftResult [11] $end
$var wire 1 O: shiftLeftResult [10] $end
$var wire 1 P: shiftLeftResult [9] $end
$var wire 1 Q: shiftLeftResult [8] $end
$var wire 1 R: shiftLeftResult [7] $end
$var wire 1 S: shiftLeftResult [6] $end
$var wire 1 T: shiftLeftResult [5] $end
$var wire 1 U: shiftLeftResult [4] $end
$var wire 1 V: shiftLeftResult [3] $end
$var wire 1 W: shiftLeftResult [2] $end
$var wire 1 X: shiftLeftResult [1] $end
$var wire 1 Y: shiftLeftResult [0] $end
$var wire 1 Z: shiftRightLogical [15] $end
$var wire 1 [: shiftRightLogical [14] $end
$var wire 1 \: shiftRightLogical [13] $end
$var wire 1 ]: shiftRightLogical [12] $end
$var wire 1 ^: shiftRightLogical [11] $end
$var wire 1 _: shiftRightLogical [10] $end
$var wire 1 `: shiftRightLogical [9] $end
$var wire 1 a: shiftRightLogical [8] $end
$var wire 1 b: shiftRightLogical [7] $end
$var wire 1 c: shiftRightLogical [6] $end
$var wire 1 d: shiftRightLogical [5] $end
$var wire 1 e: shiftRightLogical [4] $end
$var wire 1 f: shiftRightLogical [3] $end
$var wire 1 g: shiftRightLogical [2] $end
$var wire 1 h: shiftRightLogical [1] $end
$var wire 1 i: shiftRightLogical [0] $end
$var wire 1 j: shiftRightArithmetic [15] $end
$var wire 1 k: shiftRightArithmetic [14] $end
$var wire 1 l: shiftRightArithmetic [13] $end
$var wire 1 m: shiftRightArithmetic [12] $end
$var wire 1 n: shiftRightArithmetic [11] $end
$var wire 1 o: shiftRightArithmetic [10] $end
$var wire 1 p: shiftRightArithmetic [9] $end
$var wire 1 q: shiftRightArithmetic [8] $end
$var wire 1 r: shiftRightArithmetic [7] $end
$var wire 1 s: shiftRightArithmetic [6] $end
$var wire 1 t: shiftRightArithmetic [5] $end
$var wire 1 u: shiftRightArithmetic [4] $end
$var wire 1 v: shiftRightArithmetic [3] $end
$var wire 1 w: shiftRightArithmetic [2] $end
$var wire 1 x: shiftRightArithmetic [1] $end
$var wire 1 y: shiftRightArithmetic [0] $end
$var wire 1 z: rotateLeftResult [15] $end
$var wire 1 {: rotateLeftResult [14] $end
$var wire 1 |: rotateLeftResult [13] $end
$var wire 1 }: rotateLeftResult [12] $end
$var wire 1 ~: rotateLeftResult [11] $end
$var wire 1 !; rotateLeftResult [10] $end
$var wire 1 "; rotateLeftResult [9] $end
$var wire 1 #; rotateLeftResult [8] $end
$var wire 1 $; rotateLeftResult [7] $end
$var wire 1 %; rotateLeftResult [6] $end
$var wire 1 &; rotateLeftResult [5] $end
$var wire 1 '; rotateLeftResult [4] $end
$var wire 1 (; rotateLeftResult [3] $end
$var wire 1 ); rotateLeftResult [2] $end
$var wire 1 *; rotateLeftResult [1] $end
$var wire 1 +; rotateLeftResult [0] $end

$scope module SHFT1 $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var reg 16 ,; Out [15:0] $end
$var wire 1 -; out [15] $end
$var wire 1 .; out [14] $end
$var wire 1 /; out [13] $end
$var wire 1 0; out [12] $end
$var wire 1 1; out [11] $end
$var wire 1 2; out [10] $end
$var wire 1 3; out [9] $end
$var wire 1 4; out [8] $end
$var wire 1 5; out [7] $end
$var wire 1 6; out [6] $end
$var wire 1 7; out [5] $end
$var wire 1 8; out [4] $end
$var wire 1 9; out [3] $end
$var wire 1 :; out [2] $end
$var wire 1 ;; out [1] $end
$var wire 1 <; out [0] $end
$upscope $end

$scope module SHFT_RL $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var reg 16 =; Out [15:0] $end
$upscope $end

$scope module SHFT_RA $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var reg 16 >; Out [15:0] $end
$var wire 1 ?; out [15] $end
$var wire 1 @; out [14] $end
$var wire 1 A; out [13] $end
$var wire 1 B; out [12] $end
$var wire 1 C; out [11] $end
$var wire 1 D; out [10] $end
$var wire 1 E; out [9] $end
$var wire 1 F; out [8] $end
$var wire 1 G; out [7] $end
$var wire 1 H; out [6] $end
$var wire 1 I; out [5] $end
$var wire 1 J; out [4] $end
$var wire 1 K; out [3] $end
$var wire 1 L; out [2] $end
$var wire 1 M; out [1] $end
$var wire 1 N; out [0] $end
$upscope $end

$scope module ROTL $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var reg 16 O; Out [15:0] $end
$var wire 1 P; out [15] $end
$var wire 1 Q; out [14] $end
$var wire 1 R; out [13] $end
$var wire 1 S; out [12] $end
$var wire 1 T; out [11] $end
$var wire 1 U; out [10] $end
$var wire 1 V; out [9] $end
$var wire 1 W; out [8] $end
$var wire 1 X; out [7] $end
$var wire 1 Y; out [6] $end
$var wire 1 Z; out [5] $end
$var wire 1 [; out [4] $end
$var wire 1 \; out [3] $end
$var wire 1 ]; out [2] $end
$var wire 1 ^; out [1] $end
$var wire 1 _; out [0] $end
$upscope $end
$upscope $end

$scope module SHFT3 $end
$var parameter 32 `; N $end
$var parameter 32 a; C $end
$var parameter 32 b; O $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var wire 1 c; Op [1] $end
$var wire 1 d; Op [0] $end
$var reg 16 e; Out [15:0] $end
$var wire 1 f; shiftLeftResult [15] $end
$var wire 1 g; shiftLeftResult [14] $end
$var wire 1 h; shiftLeftResult [13] $end
$var wire 1 i; shiftLeftResult [12] $end
$var wire 1 j; shiftLeftResult [11] $end
$var wire 1 k; shiftLeftResult [10] $end
$var wire 1 l; shiftLeftResult [9] $end
$var wire 1 m; shiftLeftResult [8] $end
$var wire 1 n; shiftLeftResult [7] $end
$var wire 1 o; shiftLeftResult [6] $end
$var wire 1 p; shiftLeftResult [5] $end
$var wire 1 q; shiftLeftResult [4] $end
$var wire 1 r; shiftLeftResult [3] $end
$var wire 1 s; shiftLeftResult [2] $end
$var wire 1 t; shiftLeftResult [1] $end
$var wire 1 u; shiftLeftResult [0] $end
$var wire 1 v; shiftRightLogical [15] $end
$var wire 1 w; shiftRightLogical [14] $end
$var wire 1 x; shiftRightLogical [13] $end
$var wire 1 y; shiftRightLogical [12] $end
$var wire 1 z; shiftRightLogical [11] $end
$var wire 1 {; shiftRightLogical [10] $end
$var wire 1 |; shiftRightLogical [9] $end
$var wire 1 }; shiftRightLogical [8] $end
$var wire 1 ~; shiftRightLogical [7] $end
$var wire 1 !< shiftRightLogical [6] $end
$var wire 1 "< shiftRightLogical [5] $end
$var wire 1 #< shiftRightLogical [4] $end
$var wire 1 $< shiftRightLogical [3] $end
$var wire 1 %< shiftRightLogical [2] $end
$var wire 1 &< shiftRightLogical [1] $end
$var wire 1 '< shiftRightLogical [0] $end
$var wire 1 (< shiftRightArithmetic [15] $end
$var wire 1 )< shiftRightArithmetic [14] $end
$var wire 1 *< shiftRightArithmetic [13] $end
$var wire 1 +< shiftRightArithmetic [12] $end
$var wire 1 ,< shiftRightArithmetic [11] $end
$var wire 1 -< shiftRightArithmetic [10] $end
$var wire 1 .< shiftRightArithmetic [9] $end
$var wire 1 /< shiftRightArithmetic [8] $end
$var wire 1 0< shiftRightArithmetic [7] $end
$var wire 1 1< shiftRightArithmetic [6] $end
$var wire 1 2< shiftRightArithmetic [5] $end
$var wire 1 3< shiftRightArithmetic [4] $end
$var wire 1 4< shiftRightArithmetic [3] $end
$var wire 1 5< shiftRightArithmetic [2] $end
$var wire 1 6< shiftRightArithmetic [1] $end
$var wire 1 7< shiftRightArithmetic [0] $end
$var wire 1 8< rotateLeftResult [15] $end
$var wire 1 9< rotateLeftResult [14] $end
$var wire 1 :< rotateLeftResult [13] $end
$var wire 1 ;< rotateLeftResult [12] $end
$var wire 1 << rotateLeftResult [11] $end
$var wire 1 =< rotateLeftResult [10] $end
$var wire 1 >< rotateLeftResult [9] $end
$var wire 1 ?< rotateLeftResult [8] $end
$var wire 1 @< rotateLeftResult [7] $end
$var wire 1 A< rotateLeftResult [6] $end
$var wire 1 B< rotateLeftResult [5] $end
$var wire 1 C< rotateLeftResult [4] $end
$var wire 1 D< rotateLeftResult [3] $end
$var wire 1 E< rotateLeftResult [2] $end
$var wire 1 F< rotateLeftResult [1] $end
$var wire 1 G< rotateLeftResult [0] $end

$scope module SHFT1 $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var reg 16 H< Out [15:0] $end
$var wire 1 I< out [15] $end
$var wire 1 J< out [14] $end
$var wire 1 K< out [13] $end
$var wire 1 L< out [12] $end
$var wire 1 M< out [11] $end
$var wire 1 N< out [10] $end
$var wire 1 O< out [9] $end
$var wire 1 P< out [8] $end
$var wire 1 Q< out [7] $end
$var wire 1 R< out [6] $end
$var wire 1 S< out [5] $end
$var wire 1 T< out [4] $end
$var wire 1 U< out [3] $end
$var wire 1 V< out [2] $end
$var wire 1 W< out [1] $end
$var wire 1 X< out [0] $end
$upscope $end

$scope module SHFT_RL $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var reg 16 Y< Out [15:0] $end
$upscope $end

$scope module SHFT_RA $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var reg 16 Z< Out [15:0] $end
$var wire 1 [< out [15] $end
$var wire 1 \< out [14] $end
$var wire 1 ]< out [13] $end
$var wire 1 ^< out [12] $end
$var wire 1 _< out [11] $end
$var wire 1 `< out [10] $end
$var wire 1 a< out [9] $end
$var wire 1 b< out [8] $end
$var wire 1 c< out [7] $end
$var wire 1 d< out [6] $end
$var wire 1 e< out [5] $end
$var wire 1 f< out [4] $end
$var wire 1 g< out [3] $end
$var wire 1 h< out [2] $end
$var wire 1 i< out [1] $end
$var wire 1 j< out [0] $end
$upscope $end

$scope module ROTL $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var reg 16 k< Out [15:0] $end
$var wire 1 l< out [15] $end
$var wire 1 m< out [14] $end
$var wire 1 n< out [13] $end
$var wire 1 o< out [12] $end
$var wire 1 p< out [11] $end
$var wire 1 q< out [10] $end
$var wire 1 r< out [9] $end
$var wire 1 s< out [8] $end
$var wire 1 t< out [7] $end
$var wire 1 u< out [6] $end
$var wire 1 v< out [5] $end
$var wire 1 w< out [4] $end
$var wire 1 x< out [3] $end
$var wire 1 y< out [2] $end
$var wire 1 z< out [1] $end
$var wire 1 {< out [0] $end
$upscope $end
$upscope $end

$scope module SHFT4 $end
$var parameter 32 |< N $end
$var parameter 32 }< C $end
$var parameter 32 ~< O $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var wire 1 != Op [1] $end
$var wire 1 "= Op [0] $end
$var reg 16 #= Out [15:0] $end
$var wire 1 $= shiftLeftResult [15] $end
$var wire 1 %= shiftLeftResult [14] $end
$var wire 1 &= shiftLeftResult [13] $end
$var wire 1 '= shiftLeftResult [12] $end
$var wire 1 (= shiftLeftResult [11] $end
$var wire 1 )= shiftLeftResult [10] $end
$var wire 1 *= shiftLeftResult [9] $end
$var wire 1 += shiftLeftResult [8] $end
$var wire 1 ,= shiftLeftResult [7] $end
$var wire 1 -= shiftLeftResult [6] $end
$var wire 1 .= shiftLeftResult [5] $end
$var wire 1 /= shiftLeftResult [4] $end
$var wire 1 0= shiftLeftResult [3] $end
$var wire 1 1= shiftLeftResult [2] $end
$var wire 1 2= shiftLeftResult [1] $end
$var wire 1 3= shiftLeftResult [0] $end
$var wire 1 4= shiftRightLogical [15] $end
$var wire 1 5= shiftRightLogical [14] $end
$var wire 1 6= shiftRightLogical [13] $end
$var wire 1 7= shiftRightLogical [12] $end
$var wire 1 8= shiftRightLogical [11] $end
$var wire 1 9= shiftRightLogical [10] $end
$var wire 1 := shiftRightLogical [9] $end
$var wire 1 ;= shiftRightLogical [8] $end
$var wire 1 <= shiftRightLogical [7] $end
$var wire 1 == shiftRightLogical [6] $end
$var wire 1 >= shiftRightLogical [5] $end
$var wire 1 ?= shiftRightLogical [4] $end
$var wire 1 @= shiftRightLogical [3] $end
$var wire 1 A= shiftRightLogical [2] $end
$var wire 1 B= shiftRightLogical [1] $end
$var wire 1 C= shiftRightLogical [0] $end
$var wire 1 D= shiftRightArithmetic [15] $end
$var wire 1 E= shiftRightArithmetic [14] $end
$var wire 1 F= shiftRightArithmetic [13] $end
$var wire 1 G= shiftRightArithmetic [12] $end
$var wire 1 H= shiftRightArithmetic [11] $end
$var wire 1 I= shiftRightArithmetic [10] $end
$var wire 1 J= shiftRightArithmetic [9] $end
$var wire 1 K= shiftRightArithmetic [8] $end
$var wire 1 L= shiftRightArithmetic [7] $end
$var wire 1 M= shiftRightArithmetic [6] $end
$var wire 1 N= shiftRightArithmetic [5] $end
$var wire 1 O= shiftRightArithmetic [4] $end
$var wire 1 P= shiftRightArithmetic [3] $end
$var wire 1 Q= shiftRightArithmetic [2] $end
$var wire 1 R= shiftRightArithmetic [1] $end
$var wire 1 S= shiftRightArithmetic [0] $end
$var wire 1 T= rotateLeftResult [15] $end
$var wire 1 U= rotateLeftResult [14] $end
$var wire 1 V= rotateLeftResult [13] $end
$var wire 1 W= rotateLeftResult [12] $end
$var wire 1 X= rotateLeftResult [11] $end
$var wire 1 Y= rotateLeftResult [10] $end
$var wire 1 Z= rotateLeftResult [9] $end
$var wire 1 [= rotateLeftResult [8] $end
$var wire 1 \= rotateLeftResult [7] $end
$var wire 1 ]= rotateLeftResult [6] $end
$var wire 1 ^= rotateLeftResult [5] $end
$var wire 1 _= rotateLeftResult [4] $end
$var wire 1 `= rotateLeftResult [3] $end
$var wire 1 a= rotateLeftResult [2] $end
$var wire 1 b= rotateLeftResult [1] $end
$var wire 1 c= rotateLeftResult [0] $end

$scope module SHFT1 $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var reg 16 d= Out [15:0] $end
$var wire 1 e= out [15] $end
$var wire 1 f= out [14] $end
$var wire 1 g= out [13] $end
$var wire 1 h= out [12] $end
$var wire 1 i= out [11] $end
$var wire 1 j= out [10] $end
$var wire 1 k= out [9] $end
$var wire 1 l= out [8] $end
$var wire 1 m= out [7] $end
$var wire 1 n= out [6] $end
$var wire 1 o= out [5] $end
$var wire 1 p= out [4] $end
$var wire 1 q= out [3] $end
$var wire 1 r= out [2] $end
$var wire 1 s= out [1] $end
$var wire 1 t= out [0] $end
$upscope $end

$scope module SHFT_RL $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var reg 16 u= Out [15:0] $end
$upscope $end

$scope module SHFT_RA $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var reg 16 v= Out [15:0] $end
$var wire 1 w= out [15] $end
$var wire 1 x= out [14] $end
$var wire 1 y= out [13] $end
$var wire 1 z= out [12] $end
$var wire 1 {= out [11] $end
$var wire 1 |= out [10] $end
$var wire 1 }= out [9] $end
$var wire 1 ~= out [8] $end
$var wire 1 !> out [7] $end
$var wire 1 "> out [6] $end
$var wire 1 #> out [5] $end
$var wire 1 $> out [4] $end
$var wire 1 %> out [3] $end
$var wire 1 &> out [2] $end
$var wire 1 '> out [1] $end
$var wire 1 (> out [0] $end
$upscope $end

$scope module ROTL $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var reg 16 )> Out [15:0] $end
$var wire 1 *> out [15] $end
$var wire 1 +> out [14] $end
$var wire 1 ,> out [13] $end
$var wire 1 -> out [12] $end
$var wire 1 .> out [11] $end
$var wire 1 /> out [10] $end
$var wire 1 0> out [9] $end
$var wire 1 1> out [8] $end
$var wire 1 2> out [7] $end
$var wire 1 3> out [6] $end
$var wire 1 4> out [5] $end
$var wire 1 5> out [4] $end
$var wire 1 6> out [3] $end
$var wire 1 7> out [2] $end
$var wire 1 8> out [1] $end
$var wire 1 9> out [0] $end
$upscope $end
$upscope $end

$scope module ROR $end
$var wire 1 (7 In [15] $end
$var wire 1 )7 In [14] $end
$var wire 1 *7 In [13] $end
$var wire 1 +7 In [12] $end
$var wire 1 ,7 In [11] $end
$var wire 1 -7 In [10] $end
$var wire 1 .7 In [9] $end
$var wire 1 /7 In [8] $end
$var wire 1 07 In [7] $end
$var wire 1 17 In [6] $end
$var wire 1 27 In [5] $end
$var wire 1 37 In [4] $end
$var wire 1 47 In [3] $end
$var wire 1 57 In [2] $end
$var wire 1 67 In [1] $end
$var wire 1 77 In [0] $end
$var wire 1 D7 Cnt [3] $end
$var wire 1 E7 Cnt [2] $end
$var wire 1 F7 Cnt [1] $end
$var wire 1 G7 Cnt [0] $end
$var reg 16 :> Out [15:0] $end
$var wire 1 ;> out [15] $end
$var wire 1 <> out [14] $end
$var wire 1 => out [13] $end
$var wire 1 >> out [12] $end
$var wire 1 ?> out [11] $end
$var wire 1 @> out [10] $end
$var wire 1 A> out [9] $end
$var wire 1 B> out [8] $end
$var wire 1 C> out [7] $end
$var wire 1 D> out [6] $end
$var wire 1 E> out [5] $end
$var wire 1 F> out [4] $end
$var wire 1 G> out [3] $end
$var wire 1 H> out [2] $end
$var wire 1 I> out [1] $end
$var wire 1 J> out [0] $end
$upscope $end

$scope module BTR $end
$var wire 1 (7 A [15] $end
$var wire 1 )7 A [14] $end
$var wire 1 *7 A [13] $end
$var wire 1 +7 A [12] $end
$var wire 1 ,7 A [11] $end
$var wire 1 -7 A [10] $end
$var wire 1 .7 A [9] $end
$var wire 1 /7 A [8] $end
$var wire 1 07 A [7] $end
$var wire 1 17 A [6] $end
$var wire 1 27 A [5] $end
$var wire 1 37 A [4] $end
$var wire 1 47 A [3] $end
$var wire 1 57 A [2] $end
$var wire 1 67 A [1] $end
$var wire 1 77 A [0] $end
$var wire 1 :8 rot_A [15] $end
$var wire 1 ;8 rot_A [14] $end
$var wire 1 <8 rot_A [13] $end
$var wire 1 =8 rot_A [12] $end
$var wire 1 >8 rot_A [11] $end
$var wire 1 ?8 rot_A [10] $end
$var wire 1 @8 rot_A [9] $end
$var wire 1 A8 rot_A [8] $end
$var wire 1 B8 rot_A [7] $end
$var wire 1 C8 rot_A [6] $end
$var wire 1 D8 rot_A [5] $end
$var wire 1 E8 rot_A [4] $end
$var wire 1 F8 rot_A [3] $end
$var wire 1 G8 rot_A [2] $end
$var wire 1 H8 rot_A [1] $end
$var wire 1 I8 rot_A [0] $end
$upscope $end

$scope module SCO $end
$var wire 1 (7 A [15] $end
$var wire 1 )7 A [14] $end
$var wire 1 *7 A [13] $end
$var wire 1 +7 A [12] $end
$var wire 1 ,7 A [11] $end
$var wire 1 -7 A [10] $end
$var wire 1 .7 A [9] $end
$var wire 1 /7 A [8] $end
$var wire 1 07 A [7] $end
$var wire 1 17 A [6] $end
$var wire 1 27 A [5] $end
$var wire 1 37 A [4] $end
$var wire 1 47 A [3] $end
$var wire 1 57 A [2] $end
$var wire 1 67 A [1] $end
$var wire 1 77 A [0] $end
$var wire 1 87 B [15] $end
$var wire 1 97 B [14] $end
$var wire 1 :7 B [13] $end
$var wire 1 ;7 B [12] $end
$var wire 1 <7 B [11] $end
$var wire 1 =7 B [10] $end
$var wire 1 >7 B [9] $end
$var wire 1 ?7 B [8] $end
$var wire 1 @7 B [7] $end
$var wire 1 A7 B [6] $end
$var wire 1 B7 B [5] $end
$var wire 1 C7 B [4] $end
$var wire 1 D7 B [3] $end
$var wire 1 E7 B [2] $end
$var wire 1 F7 B [1] $end
$var wire 1 G7 B [0] $end
$var wire 1 J8 Out [15] $end
$var wire 1 K8 Out [14] $end
$var wire 1 L8 Out [13] $end
$var wire 1 M8 Out [12] $end
$var wire 1 N8 Out [11] $end
$var wire 1 O8 Out [10] $end
$var wire 1 P8 Out [9] $end
$var wire 1 Q8 Out [8] $end
$var wire 1 R8 Out [7] $end
$var wire 1 S8 Out [6] $end
$var wire 1 T8 Out [5] $end
$var wire 1 U8 Out [4] $end
$var wire 1 V8 Out [3] $end
$var wire 1 W8 Out [2] $end
$var wire 1 X8 Out [1] $end
$var wire 1 Y8 Out [0] $end
$var wire 1 K> C_out $end

$scope module sco_ADD $end
$var parameter 32 L> N $end
$var wire 1 (7 A [15] $end
$var wire 1 )7 A [14] $end
$var wire 1 *7 A [13] $end
$var wire 1 +7 A [12] $end
$var wire 1 ,7 A [11] $end
$var wire 1 -7 A [10] $end
$var wire 1 .7 A [9] $end
$var wire 1 /7 A [8] $end
$var wire 1 07 A [7] $end
$var wire 1 17 A [6] $end
$var wire 1 27 A [5] $end
$var wire 1 37 A [4] $end
$var wire 1 47 A [3] $end
$var wire 1 57 A [2] $end
$var wire 1 67 A [1] $end
$var wire 1 77 A [0] $end
$var wire 1 87 B [15] $end
$var wire 1 97 B [14] $end
$var wire 1 :7 B [13] $end
$var wire 1 ;7 B [12] $end
$var wire 1 <7 B [11] $end
$var wire 1 =7 B [10] $end
$var wire 1 >7 B [9] $end
$var wire 1 ?7 B [8] $end
$var wire 1 @7 B [7] $end
$var wire 1 A7 B [6] $end
$var wire 1 B7 B [5] $end
$var wire 1 C7 B [4] $end
$var wire 1 D7 B [3] $end
$var wire 1 E7 B [2] $end
$var wire 1 F7 B [1] $end
$var wire 1 G7 B [0] $end
$var wire 1 M> C_in $end
$var wire 1 N> S [15] $end
$var wire 1 O> S [14] $end
$var wire 1 P> S [13] $end
$var wire 1 Q> S [12] $end
$var wire 1 R> S [11] $end
$var wire 1 S> S [10] $end
$var wire 1 T> S [9] $end
$var wire 1 U> S [8] $end
$var wire 1 V> S [7] $end
$var wire 1 W> S [6] $end
$var wire 1 X> S [5] $end
$var wire 1 Y> S [4] $end
$var wire 1 Z> S [3] $end
$var wire 1 [> S [2] $end
$var wire 1 \> S [1] $end
$var wire 1 ]> S [0] $end
$var wire 1 K> C_out $end
$var wire 1 ^> C_out0 $end
$var wire 1 _> C_out1 $end
$var wire 1 `> C_out2 $end
$var wire 1 a> G0 $end
$var wire 1 b> P0 $end
$var wire 1 c> G1 $end
$var wire 1 d> P1 $end
$var wire 1 e> G2 $end
$var wire 1 f> P2 $end
$var wire 1 g> G3 $end
$var wire 1 h> P3 $end
$var wire 1 i> C_in1 $end
$var wire 1 j> C_in2 $end
$var wire 1 k> C_in3 $end

$scope module cla_4_1 $end
$var parameter 32 l> N $end
$var wire 1 47 A [3] $end
$var wire 1 57 A [2] $end
$var wire 1 67 A [1] $end
$var wire 1 77 A [0] $end
$var wire 1 D7 B [3] $end
$var wire 1 E7 B [2] $end
$var wire 1 F7 B [1] $end
$var wire 1 G7 B [0] $end
$var wire 1 M> C_in $end
$var wire 1 Z> S [3] $end
$var wire 1 [> S [2] $end
$var wire 1 \> S [1] $end
$var wire 1 ]> S [0] $end
$var wire 1 ^> C_out $end
$var wire 1 a> G $end
$var wire 1 b> P $end
$var wire 1 m> C_out0 $end
$var wire 1 n> C_out1 $end
$var wire 1 o> C_out2 $end

$scope module carryLogic0 $end
$var wire 1 77 A $end
$var wire 1 G7 B $end
$var wire 1 M> Cin $end
$var wire 1 m> C_out $end
$var wire 1 p> P $end
$var wire 1 q> G $end
$var wire 1 r> G_inv $end
$var wire 1 s> P_nor $end
$var wire 1 t> C_out_1 $end

$scope module nand_G $end
$var wire 1 77 in1 $end
$var wire 1 G7 in2 $end
$var wire 1 r> out $end
$upscope $end

$scope module not_1 $end
$var wire 1 r> in1 $end
$var wire 1 q> out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 77 in1 $end
$var wire 1 G7 in2 $end
$var wire 1 s> out $end
$upscope $end

$scope module not_2 $end
$var wire 1 s> in1 $end
$var wire 1 p> out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 p> in1 $end
$var wire 1 M> in2 $end
$var wire 1 t> out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 r> in1 $end
$var wire 1 t> in2 $end
$var wire 1 m> out $end
$upscope $end
$upscope $end

$scope module fullAdder0 $end
$var wire 1 77 A $end
$var wire 1 G7 B $end
$var wire 1 M> C_in $end
$var wire 1 ]> S $end
$var wire 1 u> C_out $end
$var wire 1 v> nand1_out $end
$var wire 1 w> nand2_out $end
$var wire 1 x> nand3_out $end

$scope module nand1 $end
$var wire 1 77 in1 $end
$var wire 1 G7 in2 $end
$var wire 1 v> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 G7 in1 $end
$var wire 1 M> in2 $end
$var wire 1 w> out $end
$upscope $end

$scope module nand3 $end
$var wire 1 77 in1 $end
$var wire 1 M> in2 $end
$var wire 1 x> out $end
$upscope $end

$scope module nand_out $end
$var wire 1 v> in1 $end
$var wire 1 w> in2 $end
$var wire 1 x> in3 $end
$var wire 1 u> out $end
$upscope $end

$scope module xor1 $end
$var wire 1 77 in1 $end
$var wire 1 G7 in2 $end
$var wire 1 M> in3 $end
$var wire 1 ]> out $end
$upscope $end
$upscope $end

$scope module carryLogic1 $end
$var wire 1 67 A $end
$var wire 1 F7 B $end
$var wire 1 m> Cin $end
$var wire 1 n> C_out $end
$var wire 1 y> P $end
$var wire 1 z> G $end
$var wire 1 {> G_inv $end
$var wire 1 |> P_nor $end
$var wire 1 }> C_out_1 $end

$scope module nand_G $end
$var wire 1 67 in1 $end
$var wire 1 F7 in2 $end
$var wire 1 {> out $end
$upscope $end

$scope module not_1 $end
$var wire 1 {> in1 $end
$var wire 1 z> out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 67 in1 $end
$var wire 1 F7 in2 $end
$var wire 1 |> out $end
$upscope $end

$scope module not_2 $end
$var wire 1 |> in1 $end
$var wire 1 y> out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 y> in1 $end
$var wire 1 m> in2 $end
$var wire 1 }> out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 {> in1 $end
$var wire 1 }> in2 $end
$var wire 1 n> out $end
$upscope $end
$upscope $end

$scope module fullAdder1 $end
$var wire 1 67 A $end
$var wire 1 F7 B $end
$var wire 1 m> C_in $end
$var wire 1 \> S $end
$var wire 1 ~> C_out $end
$var wire 1 !? nand1_out $end
$var wire 1 "? nand2_out $end
$var wire 1 #? nand3_out $end

$scope module nand1 $end
$var wire 1 67 in1 $end
$var wire 1 F7 in2 $end
$var wire 1 !? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 F7 in1 $end
$var wire 1 m> in2 $end
$var wire 1 "? out $end
$upscope $end

$scope module nand3 $end
$var wire 1 67 in1 $end
$var wire 1 m> in2 $end
$var wire 1 #? out $end
$upscope $end

$scope module nand_out $end
$var wire 1 !? in1 $end
$var wire 1 "? in2 $end
$var wire 1 #? in3 $end
$var wire 1 ~> out $end
$upscope $end

$scope module xor1 $end
$var wire 1 67 in1 $end
$var wire 1 F7 in2 $end
$var wire 1 m> in3 $end
$var wire 1 \> out $end
$upscope $end
$upscope $end

$scope module carryLogic2 $end
$var wire 1 57 A $end
$var wire 1 E7 B $end
$var wire 1 n> Cin $end
$var wire 1 o> C_out $end
$var wire 1 $? P $end
$var wire 1 %? G $end
$var wire 1 &? G_inv $end
$var wire 1 '? P_nor $end
$var wire 1 (? C_out_1 $end

$scope module nand_G $end
$var wire 1 57 in1 $end
$var wire 1 E7 in2 $end
$var wire 1 &? out $end
$upscope $end

$scope module not_1 $end
$var wire 1 &? in1 $end
$var wire 1 %? out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 57 in1 $end
$var wire 1 E7 in2 $end
$var wire 1 '? out $end
$upscope $end

$scope module not_2 $end
$var wire 1 '? in1 $end
$var wire 1 $? out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 $? in1 $end
$var wire 1 n> in2 $end
$var wire 1 (? out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 &? in1 $end
$var wire 1 (? in2 $end
$var wire 1 o> out $end
$upscope $end
$upscope $end

$scope module fullAdder2 $end
$var wire 1 57 A $end
$var wire 1 E7 B $end
$var wire 1 n> C_in $end
$var wire 1 [> S $end
$var wire 1 )? C_out $end
$var wire 1 *? nand1_out $end
$var wire 1 +? nand2_out $end
$var wire 1 ,? nand3_out $end

$scope module nand1 $end
$var wire 1 57 in1 $end
$var wire 1 E7 in2 $end
$var wire 1 *? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 E7 in1 $end
$var wire 1 n> in2 $end
$var wire 1 +? out $end
$upscope $end

$scope module nand3 $end
$var wire 1 57 in1 $end
$var wire 1 n> in2 $end
$var wire 1 ,? out $end
$upscope $end

$scope module nand_out $end
$var wire 1 *? in1 $end
$var wire 1 +? in2 $end
$var wire 1 ,? in3 $end
$var wire 1 )? out $end
$upscope $end

$scope module xor1 $end
$var wire 1 57 in1 $end
$var wire 1 E7 in2 $end
$var wire 1 n> in3 $end
$var wire 1 [> out $end
$upscope $end
$upscope $end

$scope module carryLogic3 $end
$var wire 1 47 A $end
$var wire 1 D7 B $end
$var wire 1 o> Cin $end
$var wire 1 ^> C_out $end
$var wire 1 b> P $end
$var wire 1 a> G $end
$var wire 1 -? G_inv $end
$var wire 1 .? P_nor $end
$var wire 1 /? C_out_1 $end

$scope module nand_G $end
$var wire 1 47 in1 $end
$var wire 1 D7 in2 $end
$var wire 1 -? out $end
$upscope $end

$scope module not_1 $end
$var wire 1 -? in1 $end
$var wire 1 a> out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 47 in1 $end
$var wire 1 D7 in2 $end
$var wire 1 .? out $end
$upscope $end

$scope module not_2 $end
$var wire 1 .? in1 $end
$var wire 1 b> out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 b> in1 $end
$var wire 1 o> in2 $end
$var wire 1 /? out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 -? in1 $end
$var wire 1 /? in2 $end
$var wire 1 ^> out $end
$upscope $end
$upscope $end

$scope module fullAdder3 $end
$var wire 1 47 A $end
$var wire 1 D7 B $end
$var wire 1 o> C_in $end
$var wire 1 Z> S $end
$var wire 1 0? C_out $end
$var wire 1 1? nand1_out $end
$var wire 1 2? nand2_out $end
$var wire 1 3? nand3_out $end

$scope module nand1 $end
$var wire 1 47 in1 $end
$var wire 1 D7 in2 $end
$var wire 1 1? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 D7 in1 $end
$var wire 1 o> in2 $end
$var wire 1 2? out $end
$upscope $end

$scope module nand3 $end
$var wire 1 47 in1 $end
$var wire 1 o> in2 $end
$var wire 1 3? out $end
$upscope $end

$scope module nand_out $end
$var wire 1 1? in1 $end
$var wire 1 2? in2 $end
$var wire 1 3? in3 $end
$var wire 1 0? out $end
$upscope $end

$scope module xor1 $end
$var wire 1 47 in1 $end
$var wire 1 D7 in2 $end
$var wire 1 o> in3 $end
$var wire 1 Z> out $end
$upscope $end
$upscope $end
$upscope $end

$scope module compute1 $end
$var wire 1 b> P $end
$var wire 1 a> G $end
$var wire 1 ^> C_in_prev $end
$var wire 1 i> C_in $end
$var wire 1 4? G_in $end
$var wire 1 5? C_out_1 $end
$var wire 1 6? G_inv $end

$scope module not1 $end
$var wire 1 a> in1 $end
$var wire 1 6? out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 b> in1 $end
$var wire 1 ^> in2 $end
$var wire 1 5? out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 6? in1 $end
$var wire 1 5? in2 $end
$var wire 1 i> out $end
$upscope $end
$upscope $end

$scope module cla_4_2 $end
$var parameter 32 7? N $end
$var wire 1 07 A [3] $end
$var wire 1 17 A [2] $end
$var wire 1 27 A [1] $end
$var wire 1 37 A [0] $end
$var wire 1 @7 B [3] $end
$var wire 1 A7 B [2] $end
$var wire 1 B7 B [1] $end
$var wire 1 C7 B [0] $end
$var wire 1 i> C_in $end
$var wire 1 V> S [3] $end
$var wire 1 W> S [2] $end
$var wire 1 X> S [1] $end
$var wire 1 Y> S [0] $end
$var wire 1 _> C_out $end
$var wire 1 c> G $end
$var wire 1 d> P $end
$var wire 1 8? C_out0 $end
$var wire 1 9? C_out1 $end
$var wire 1 :? C_out2 $end

$scope module carryLogic0 $end
$var wire 1 37 A $end
$var wire 1 C7 B $end
$var wire 1 i> Cin $end
$var wire 1 8? C_out $end
$var wire 1 ;? P $end
$var wire 1 <? G $end
$var wire 1 =? G_inv $end
$var wire 1 >? P_nor $end
$var wire 1 ?? C_out_1 $end

$scope module nand_G $end
$var wire 1 37 in1 $end
$var wire 1 C7 in2 $end
$var wire 1 =? out $end
$upscope $end

$scope module not_1 $end
$var wire 1 =? in1 $end
$var wire 1 <? out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 37 in1 $end
$var wire 1 C7 in2 $end
$var wire 1 >? out $end
$upscope $end

$scope module not_2 $end
$var wire 1 >? in1 $end
$var wire 1 ;? out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 ;? in1 $end
$var wire 1 i> in2 $end
$var wire 1 ?? out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 =? in1 $end
$var wire 1 ?? in2 $end
$var wire 1 8? out $end
$upscope $end
$upscope $end

$scope module fullAdder0 $end
$var wire 1 37 A $end
$var wire 1 C7 B $end
$var wire 1 i> C_in $end
$var wire 1 Y> S $end
$var wire 1 @? C_out $end
$var wire 1 A? nand1_out $end
$var wire 1 B? nand2_out $end
$var wire 1 C? nand3_out $end

$scope module nand1 $end
$var wire 1 37 in1 $end
$var wire 1 C7 in2 $end
$var wire 1 A? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 C7 in1 $end
$var wire 1 i> in2 $end
$var wire 1 B? out $end
$upscope $end

$scope module nand3 $end
$var wire 1 37 in1 $end
$var wire 1 i> in2 $end
$var wire 1 C? out $end
$upscope $end

$scope module nand_out $end
$var wire 1 A? in1 $end
$var wire 1 B? in2 $end
$var wire 1 C? in3 $end
$var wire 1 @? out $end
$upscope $end

$scope module xor1 $end
$var wire 1 37 in1 $end
$var wire 1 C7 in2 $end
$var wire 1 i> in3 $end
$var wire 1 Y> out $end
$upscope $end
$upscope $end

$scope module carryLogic1 $end
$var wire 1 27 A $end
$var wire 1 B7 B $end
$var wire 1 8? Cin $end
$var wire 1 9? C_out $end
$var wire 1 D? P $end
$var wire 1 E? G $end
$var wire 1 F? G_inv $end
$var wire 1 G? P_nor $end
$var wire 1 H? C_out_1 $end

$scope module nand_G $end
$var wire 1 27 in1 $end
$var wire 1 B7 in2 $end
$var wire 1 F? out $end
$upscope $end

$scope module not_1 $end
$var wire 1 F? in1 $end
$var wire 1 E? out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 27 in1 $end
$var wire 1 B7 in2 $end
$var wire 1 G? out $end
$upscope $end

$scope module not_2 $end
$var wire 1 G? in1 $end
$var wire 1 D? out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 D? in1 $end
$var wire 1 8? in2 $end
$var wire 1 H? out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 F? in1 $end
$var wire 1 H? in2 $end
$var wire 1 9? out $end
$upscope $end
$upscope $end

$scope module fullAdder1 $end
$var wire 1 27 A $end
$var wire 1 B7 B $end
$var wire 1 8? C_in $end
$var wire 1 X> S $end
$var wire 1 I? C_out $end
$var wire 1 J? nand1_out $end
$var wire 1 K? nand2_out $end
$var wire 1 L? nand3_out $end

$scope module nand1 $end
$var wire 1 27 in1 $end
$var wire 1 B7 in2 $end
$var wire 1 J? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 B7 in1 $end
$var wire 1 8? in2 $end
$var wire 1 K? out $end
$upscope $end

$scope module nand3 $end
$var wire 1 27 in1 $end
$var wire 1 8? in2 $end
$var wire 1 L? out $end
$upscope $end

$scope module nand_out $end
$var wire 1 J? in1 $end
$var wire 1 K? in2 $end
$var wire 1 L? in3 $end
$var wire 1 I? out $end
$upscope $end

$scope module xor1 $end
$var wire 1 27 in1 $end
$var wire 1 B7 in2 $end
$var wire 1 8? in3 $end
$var wire 1 X> out $end
$upscope $end
$upscope $end

$scope module carryLogic2 $end
$var wire 1 17 A $end
$var wire 1 A7 B $end
$var wire 1 9? Cin $end
$var wire 1 :? C_out $end
$var wire 1 M? P $end
$var wire 1 N? G $end
$var wire 1 O? G_inv $end
$var wire 1 P? P_nor $end
$var wire 1 Q? C_out_1 $end

$scope module nand_G $end
$var wire 1 17 in1 $end
$var wire 1 A7 in2 $end
$var wire 1 O? out $end
$upscope $end

$scope module not_1 $end
$var wire 1 O? in1 $end
$var wire 1 N? out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 17 in1 $end
$var wire 1 A7 in2 $end
$var wire 1 P? out $end
$upscope $end

$scope module not_2 $end
$var wire 1 P? in1 $end
$var wire 1 M? out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 M? in1 $end
$var wire 1 9? in2 $end
$var wire 1 Q? out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 O? in1 $end
$var wire 1 Q? in2 $end
$var wire 1 :? out $end
$upscope $end
$upscope $end

$scope module fullAdder2 $end
$var wire 1 17 A $end
$var wire 1 A7 B $end
$var wire 1 9? C_in $end
$var wire 1 W> S $end
$var wire 1 R? C_out $end
$var wire 1 S? nand1_out $end
$var wire 1 T? nand2_out $end
$var wire 1 U? nand3_out $end

$scope module nand1 $end
$var wire 1 17 in1 $end
$var wire 1 A7 in2 $end
$var wire 1 S? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 A7 in1 $end
$var wire 1 9? in2 $end
$var wire 1 T? out $end
$upscope $end

$scope module nand3 $end
$var wire 1 17 in1 $end
$var wire 1 9? in2 $end
$var wire 1 U? out $end
$upscope $end

$scope module nand_out $end
$var wire 1 S? in1 $end
$var wire 1 T? in2 $end
$var wire 1 U? in3 $end
$var wire 1 R? out $end
$upscope $end

$scope module xor1 $end
$var wire 1 17 in1 $end
$var wire 1 A7 in2 $end
$var wire 1 9? in3 $end
$var wire 1 W> out $end
$upscope $end
$upscope $end

$scope module carryLogic3 $end
$var wire 1 07 A $end
$var wire 1 @7 B $end
$var wire 1 :? Cin $end
$var wire 1 _> C_out $end
$var wire 1 d> P $end
$var wire 1 c> G $end
$var wire 1 V? G_inv $end
$var wire 1 W? P_nor $end
$var wire 1 X? C_out_1 $end

$scope module nand_G $end
$var wire 1 07 in1 $end
$var wire 1 @7 in2 $end
$var wire 1 V? out $end
$upscope $end

$scope module not_1 $end
$var wire 1 V? in1 $end
$var wire 1 c> out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 07 in1 $end
$var wire 1 @7 in2 $end
$var wire 1 W? out $end
$upscope $end

$scope module not_2 $end
$var wire 1 W? in1 $end
$var wire 1 d> out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 d> in1 $end
$var wire 1 :? in2 $end
$var wire 1 X? out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 V? in1 $end
$var wire 1 X? in2 $end
$var wire 1 _> out $end
$upscope $end
$upscope $end

$scope module fullAdder3 $end
$var wire 1 07 A $end
$var wire 1 @7 B $end
$var wire 1 :? C_in $end
$var wire 1 V> S $end
$var wire 1 Y? C_out $end
$var wire 1 Z? nand1_out $end
$var wire 1 [? nand2_out $end
$var wire 1 \? nand3_out $end

$scope module nand1 $end
$var wire 1 07 in1 $end
$var wire 1 @7 in2 $end
$var wire 1 Z? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 @7 in1 $end
$var wire 1 :? in2 $end
$var wire 1 [? out $end
$upscope $end

$scope module nand3 $end
$var wire 1 07 in1 $end
$var wire 1 :? in2 $end
$var wire 1 \? out $end
$upscope $end

$scope module nand_out $end
$var wire 1 Z? in1 $end
$var wire 1 [? in2 $end
$var wire 1 \? in3 $end
$var wire 1 Y? out $end
$upscope $end

$scope module xor1 $end
$var wire 1 07 in1 $end
$var wire 1 @7 in2 $end
$var wire 1 :? in3 $end
$var wire 1 V> out $end
$upscope $end
$upscope $end
$upscope $end

$scope module compute2 $end
$var wire 1 d> P $end
$var wire 1 c> G $end
$var wire 1 _> C_in_prev $end
$var wire 1 j> C_in $end
$var wire 1 ]? G_in $end
$var wire 1 ^? C_out_1 $end
$var wire 1 _? G_inv $end

$scope module not1 $end
$var wire 1 c> in1 $end
$var wire 1 _? out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 d> in1 $end
$var wire 1 _> in2 $end
$var wire 1 ^? out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 _? in1 $end
$var wire 1 ^? in2 $end
$var wire 1 j> out $end
$upscope $end
$upscope $end

$scope module cla_4_3 $end
$var parameter 32 `? N $end
$var wire 1 ,7 A [3] $end
$var wire 1 -7 A [2] $end
$var wire 1 .7 A [1] $end
$var wire 1 /7 A [0] $end
$var wire 1 <7 B [3] $end
$var wire 1 =7 B [2] $end
$var wire 1 >7 B [1] $end
$var wire 1 ?7 B [0] $end
$var wire 1 j> C_in $end
$var wire 1 R> S [3] $end
$var wire 1 S> S [2] $end
$var wire 1 T> S [1] $end
$var wire 1 U> S [0] $end
$var wire 1 `> C_out $end
$var wire 1 e> G $end
$var wire 1 f> P $end
$var wire 1 a? C_out0 $end
$var wire 1 b? C_out1 $end
$var wire 1 c? C_out2 $end

$scope module carryLogic0 $end
$var wire 1 /7 A $end
$var wire 1 ?7 B $end
$var wire 1 j> Cin $end
$var wire 1 a? C_out $end
$var wire 1 d? P $end
$var wire 1 e? G $end
$var wire 1 f? G_inv $end
$var wire 1 g? P_nor $end
$var wire 1 h? C_out_1 $end

$scope module nand_G $end
$var wire 1 /7 in1 $end
$var wire 1 ?7 in2 $end
$var wire 1 f? out $end
$upscope $end

$scope module not_1 $end
$var wire 1 f? in1 $end
$var wire 1 e? out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 /7 in1 $end
$var wire 1 ?7 in2 $end
$var wire 1 g? out $end
$upscope $end

$scope module not_2 $end
$var wire 1 g? in1 $end
$var wire 1 d? out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 d? in1 $end
$var wire 1 j> in2 $end
$var wire 1 h? out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 f? in1 $end
$var wire 1 h? in2 $end
$var wire 1 a? out $end
$upscope $end
$upscope $end

$scope module fullAdder0 $end
$var wire 1 /7 A $end
$var wire 1 ?7 B $end
$var wire 1 j> C_in $end
$var wire 1 U> S $end
$var wire 1 i? C_out $end
$var wire 1 j? nand1_out $end
$var wire 1 k? nand2_out $end
$var wire 1 l? nand3_out $end

$scope module nand1 $end
$var wire 1 /7 in1 $end
$var wire 1 ?7 in2 $end
$var wire 1 j? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ?7 in1 $end
$var wire 1 j> in2 $end
$var wire 1 k? out $end
$upscope $end

$scope module nand3 $end
$var wire 1 /7 in1 $end
$var wire 1 j> in2 $end
$var wire 1 l? out $end
$upscope $end

$scope module nand_out $end
$var wire 1 j? in1 $end
$var wire 1 k? in2 $end
$var wire 1 l? in3 $end
$var wire 1 i? out $end
$upscope $end

$scope module xor1 $end
$var wire 1 /7 in1 $end
$var wire 1 ?7 in2 $end
$var wire 1 j> in3 $end
$var wire 1 U> out $end
$upscope $end
$upscope $end

$scope module carryLogic1 $end
$var wire 1 .7 A $end
$var wire 1 >7 B $end
$var wire 1 a? Cin $end
$var wire 1 b? C_out $end
$var wire 1 m? P $end
$var wire 1 n? G $end
$var wire 1 o? G_inv $end
$var wire 1 p? P_nor $end
$var wire 1 q? C_out_1 $end

$scope module nand_G $end
$var wire 1 .7 in1 $end
$var wire 1 >7 in2 $end
$var wire 1 o? out $end
$upscope $end

$scope module not_1 $end
$var wire 1 o? in1 $end
$var wire 1 n? out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 .7 in1 $end
$var wire 1 >7 in2 $end
$var wire 1 p? out $end
$upscope $end

$scope module not_2 $end
$var wire 1 p? in1 $end
$var wire 1 m? out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 m? in1 $end
$var wire 1 a? in2 $end
$var wire 1 q? out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 o? in1 $end
$var wire 1 q? in2 $end
$var wire 1 b? out $end
$upscope $end
$upscope $end

$scope module fullAdder1 $end
$var wire 1 .7 A $end
$var wire 1 >7 B $end
$var wire 1 a? C_in $end
$var wire 1 T> S $end
$var wire 1 r? C_out $end
$var wire 1 s? nand1_out $end
$var wire 1 t? nand2_out $end
$var wire 1 u? nand3_out $end

$scope module nand1 $end
$var wire 1 .7 in1 $end
$var wire 1 >7 in2 $end
$var wire 1 s? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 >7 in1 $end
$var wire 1 a? in2 $end
$var wire 1 t? out $end
$upscope $end

$scope module nand3 $end
$var wire 1 .7 in1 $end
$var wire 1 a? in2 $end
$var wire 1 u? out $end
$upscope $end

$scope module nand_out $end
$var wire 1 s? in1 $end
$var wire 1 t? in2 $end
$var wire 1 u? in3 $end
$var wire 1 r? out $end
$upscope $end

$scope module xor1 $end
$var wire 1 .7 in1 $end
$var wire 1 >7 in2 $end
$var wire 1 a? in3 $end
$var wire 1 T> out $end
$upscope $end
$upscope $end

$scope module carryLogic2 $end
$var wire 1 -7 A $end
$var wire 1 =7 B $end
$var wire 1 b? Cin $end
$var wire 1 c? C_out $end
$var wire 1 v? P $end
$var wire 1 w? G $end
$var wire 1 x? G_inv $end
$var wire 1 y? P_nor $end
$var wire 1 z? C_out_1 $end

$scope module nand_G $end
$var wire 1 -7 in1 $end
$var wire 1 =7 in2 $end
$var wire 1 x? out $end
$upscope $end

$scope module not_1 $end
$var wire 1 x? in1 $end
$var wire 1 w? out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 -7 in1 $end
$var wire 1 =7 in2 $end
$var wire 1 y? out $end
$upscope $end

$scope module not_2 $end
$var wire 1 y? in1 $end
$var wire 1 v? out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 v? in1 $end
$var wire 1 b? in2 $end
$var wire 1 z? out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 x? in1 $end
$var wire 1 z? in2 $end
$var wire 1 c? out $end
$upscope $end
$upscope $end

$scope module fullAdder2 $end
$var wire 1 -7 A $end
$var wire 1 =7 B $end
$var wire 1 b? C_in $end
$var wire 1 S> S $end
$var wire 1 {? C_out $end
$var wire 1 |? nand1_out $end
$var wire 1 }? nand2_out $end
$var wire 1 ~? nand3_out $end

$scope module nand1 $end
$var wire 1 -7 in1 $end
$var wire 1 =7 in2 $end
$var wire 1 |? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 =7 in1 $end
$var wire 1 b? in2 $end
$var wire 1 }? out $end
$upscope $end

$scope module nand3 $end
$var wire 1 -7 in1 $end
$var wire 1 b? in2 $end
$var wire 1 ~? out $end
$upscope $end

$scope module nand_out $end
$var wire 1 |? in1 $end
$var wire 1 }? in2 $end
$var wire 1 ~? in3 $end
$var wire 1 {? out $end
$upscope $end

$scope module xor1 $end
$var wire 1 -7 in1 $end
$var wire 1 =7 in2 $end
$var wire 1 b? in3 $end
$var wire 1 S> out $end
$upscope $end
$upscope $end

$scope module carryLogic3 $end
$var wire 1 ,7 A $end
$var wire 1 <7 B $end
$var wire 1 c? Cin $end
$var wire 1 `> C_out $end
$var wire 1 f> P $end
$var wire 1 e> G $end
$var wire 1 !@ G_inv $end
$var wire 1 "@ P_nor $end
$var wire 1 #@ C_out_1 $end

$scope module nand_G $end
$var wire 1 ,7 in1 $end
$var wire 1 <7 in2 $end
$var wire 1 !@ out $end
$upscope $end

$scope module not_1 $end
$var wire 1 !@ in1 $end
$var wire 1 e> out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 ,7 in1 $end
$var wire 1 <7 in2 $end
$var wire 1 "@ out $end
$upscope $end

$scope module not_2 $end
$var wire 1 "@ in1 $end
$var wire 1 f> out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 f> in1 $end
$var wire 1 c? in2 $end
$var wire 1 #@ out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 !@ in1 $end
$var wire 1 #@ in2 $end
$var wire 1 `> out $end
$upscope $end
$upscope $end

$scope module fullAdder3 $end
$var wire 1 ,7 A $end
$var wire 1 <7 B $end
$var wire 1 c? C_in $end
$var wire 1 R> S $end
$var wire 1 $@ C_out $end
$var wire 1 %@ nand1_out $end
$var wire 1 &@ nand2_out $end
$var wire 1 '@ nand3_out $end

$scope module nand1 $end
$var wire 1 ,7 in1 $end
$var wire 1 <7 in2 $end
$var wire 1 %@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 <7 in1 $end
$var wire 1 c? in2 $end
$var wire 1 &@ out $end
$upscope $end

$scope module nand3 $end
$var wire 1 ,7 in1 $end
$var wire 1 c? in2 $end
$var wire 1 '@ out $end
$upscope $end

$scope module nand_out $end
$var wire 1 %@ in1 $end
$var wire 1 &@ in2 $end
$var wire 1 '@ in3 $end
$var wire 1 $@ out $end
$upscope $end

$scope module xor1 $end
$var wire 1 ,7 in1 $end
$var wire 1 <7 in2 $end
$var wire 1 c? in3 $end
$var wire 1 R> out $end
$upscope $end
$upscope $end
$upscope $end

$scope module compute3 $end
$var wire 1 f> P $end
$var wire 1 e> G $end
$var wire 1 `> C_in_prev $end
$var wire 1 k> C_in $end
$var wire 1 (@ G_in $end
$var wire 1 )@ C_out_1 $end
$var wire 1 *@ G_inv $end

$scope module not1 $end
$var wire 1 e> in1 $end
$var wire 1 *@ out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 f> in1 $end
$var wire 1 `> in2 $end
$var wire 1 )@ out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 *@ in1 $end
$var wire 1 )@ in2 $end
$var wire 1 k> out $end
$upscope $end
$upscope $end

$scope module cla_4_4 $end
$var parameter 32 +@ N $end
$var wire 1 (7 A [3] $end
$var wire 1 )7 A [2] $end
$var wire 1 *7 A [1] $end
$var wire 1 +7 A [0] $end
$var wire 1 87 B [3] $end
$var wire 1 97 B [2] $end
$var wire 1 :7 B [1] $end
$var wire 1 ;7 B [0] $end
$var wire 1 k> C_in $end
$var wire 1 N> S [3] $end
$var wire 1 O> S [2] $end
$var wire 1 P> S [1] $end
$var wire 1 Q> S [0] $end
$var wire 1 K> C_out $end
$var wire 1 g> G $end
$var wire 1 h> P $end
$var wire 1 ,@ C_out0 $end
$var wire 1 -@ C_out1 $end
$var wire 1 .@ C_out2 $end

$scope module carryLogic0 $end
$var wire 1 +7 A $end
$var wire 1 ;7 B $end
$var wire 1 k> Cin $end
$var wire 1 ,@ C_out $end
$var wire 1 /@ P $end
$var wire 1 0@ G $end
$var wire 1 1@ G_inv $end
$var wire 1 2@ P_nor $end
$var wire 1 3@ C_out_1 $end

$scope module nand_G $end
$var wire 1 +7 in1 $end
$var wire 1 ;7 in2 $end
$var wire 1 1@ out $end
$upscope $end

$scope module not_1 $end
$var wire 1 1@ in1 $end
$var wire 1 0@ out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 +7 in1 $end
$var wire 1 ;7 in2 $end
$var wire 1 2@ out $end
$upscope $end

$scope module not_2 $end
$var wire 1 2@ in1 $end
$var wire 1 /@ out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 /@ in1 $end
$var wire 1 k> in2 $end
$var wire 1 3@ out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 1@ in1 $end
$var wire 1 3@ in2 $end
$var wire 1 ,@ out $end
$upscope $end
$upscope $end

$scope module fullAdder0 $end
$var wire 1 +7 A $end
$var wire 1 ;7 B $end
$var wire 1 k> C_in $end
$var wire 1 Q> S $end
$var wire 1 4@ C_out $end
$var wire 1 5@ nand1_out $end
$var wire 1 6@ nand2_out $end
$var wire 1 7@ nand3_out $end

$scope module nand1 $end
$var wire 1 +7 in1 $end
$var wire 1 ;7 in2 $end
$var wire 1 5@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ;7 in1 $end
$var wire 1 k> in2 $end
$var wire 1 6@ out $end
$upscope $end

$scope module nand3 $end
$var wire 1 +7 in1 $end
$var wire 1 k> in2 $end
$var wire 1 7@ out $end
$upscope $end

$scope module nand_out $end
$var wire 1 5@ in1 $end
$var wire 1 6@ in2 $end
$var wire 1 7@ in3 $end
$var wire 1 4@ out $end
$upscope $end

$scope module xor1 $end
$var wire 1 +7 in1 $end
$var wire 1 ;7 in2 $end
$var wire 1 k> in3 $end
$var wire 1 Q> out $end
$upscope $end
$upscope $end

$scope module carryLogic1 $end
$var wire 1 *7 A $end
$var wire 1 :7 B $end
$var wire 1 ,@ Cin $end
$var wire 1 -@ C_out $end
$var wire 1 8@ P $end
$var wire 1 9@ G $end
$var wire 1 :@ G_inv $end
$var wire 1 ;@ P_nor $end
$var wire 1 <@ C_out_1 $end

$scope module nand_G $end
$var wire 1 *7 in1 $end
$var wire 1 :7 in2 $end
$var wire 1 :@ out $end
$upscope $end

$scope module not_1 $end
$var wire 1 :@ in1 $end
$var wire 1 9@ out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 *7 in1 $end
$var wire 1 :7 in2 $end
$var wire 1 ;@ out $end
$upscope $end

$scope module not_2 $end
$var wire 1 ;@ in1 $end
$var wire 1 8@ out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 8@ in1 $end
$var wire 1 ,@ in2 $end
$var wire 1 <@ out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 :@ in1 $end
$var wire 1 <@ in2 $end
$var wire 1 -@ out $end
$upscope $end
$upscope $end

$scope module fullAdder1 $end
$var wire 1 *7 A $end
$var wire 1 :7 B $end
$var wire 1 ,@ C_in $end
$var wire 1 P> S $end
$var wire 1 =@ C_out $end
$var wire 1 >@ nand1_out $end
$var wire 1 ?@ nand2_out $end
$var wire 1 @@ nand3_out $end

$scope module nand1 $end
$var wire 1 *7 in1 $end
$var wire 1 :7 in2 $end
$var wire 1 >@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 :7 in1 $end
$var wire 1 ,@ in2 $end
$var wire 1 ?@ out $end
$upscope $end

$scope module nand3 $end
$var wire 1 *7 in1 $end
$var wire 1 ,@ in2 $end
$var wire 1 @@ out $end
$upscope $end

$scope module nand_out $end
$var wire 1 >@ in1 $end
$var wire 1 ?@ in2 $end
$var wire 1 @@ in3 $end
$var wire 1 =@ out $end
$upscope $end

$scope module xor1 $end
$var wire 1 *7 in1 $end
$var wire 1 :7 in2 $end
$var wire 1 ,@ in3 $end
$var wire 1 P> out $end
$upscope $end
$upscope $end

$scope module carryLogic2 $end
$var wire 1 )7 A $end
$var wire 1 97 B $end
$var wire 1 -@ Cin $end
$var wire 1 .@ C_out $end
$var wire 1 A@ P $end
$var wire 1 B@ G $end
$var wire 1 C@ G_inv $end
$var wire 1 D@ P_nor $end
$var wire 1 E@ C_out_1 $end

$scope module nand_G $end
$var wire 1 )7 in1 $end
$var wire 1 97 in2 $end
$var wire 1 C@ out $end
$upscope $end

$scope module not_1 $end
$var wire 1 C@ in1 $end
$var wire 1 B@ out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 )7 in1 $end
$var wire 1 97 in2 $end
$var wire 1 D@ out $end
$upscope $end

$scope module not_2 $end
$var wire 1 D@ in1 $end
$var wire 1 A@ out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 A@ in1 $end
$var wire 1 -@ in2 $end
$var wire 1 E@ out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 C@ in1 $end
$var wire 1 E@ in2 $end
$var wire 1 .@ out $end
$upscope $end
$upscope $end

$scope module fullAdder2 $end
$var wire 1 )7 A $end
$var wire 1 97 B $end
$var wire 1 -@ C_in $end
$var wire 1 O> S $end
$var wire 1 F@ C_out $end
$var wire 1 G@ nand1_out $end
$var wire 1 H@ nand2_out $end
$var wire 1 I@ nand3_out $end

$scope module nand1 $end
$var wire 1 )7 in1 $end
$var wire 1 97 in2 $end
$var wire 1 G@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 97 in1 $end
$var wire 1 -@ in2 $end
$var wire 1 H@ out $end
$upscope $end

$scope module nand3 $end
$var wire 1 )7 in1 $end
$var wire 1 -@ in2 $end
$var wire 1 I@ out $end
$upscope $end

$scope module nand_out $end
$var wire 1 G@ in1 $end
$var wire 1 H@ in2 $end
$var wire 1 I@ in3 $end
$var wire 1 F@ out $end
$upscope $end

$scope module xor1 $end
$var wire 1 )7 in1 $end
$var wire 1 97 in2 $end
$var wire 1 -@ in3 $end
$var wire 1 O> out $end
$upscope $end
$upscope $end

$scope module carryLogic3 $end
$var wire 1 (7 A $end
$var wire 1 87 B $end
$var wire 1 .@ Cin $end
$var wire 1 K> C_out $end
$var wire 1 h> P $end
$var wire 1 g> G $end
$var wire 1 J@ G_inv $end
$var wire 1 K@ P_nor $end
$var wire 1 L@ C_out_1 $end

$scope module nand_G $end
$var wire 1 (7 in1 $end
$var wire 1 87 in2 $end
$var wire 1 J@ out $end
$upscope $end

$scope module not_1 $end
$var wire 1 J@ in1 $end
$var wire 1 g> out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 (7 in1 $end
$var wire 1 87 in2 $end
$var wire 1 K@ out $end
$upscope $end

$scope module not_2 $end
$var wire 1 K@ in1 $end
$var wire 1 h> out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 h> in1 $end
$var wire 1 .@ in2 $end
$var wire 1 L@ out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 J@ in1 $end
$var wire 1 L@ in2 $end
$var wire 1 K> out $end
$upscope $end
$upscope $end

$scope module fullAdder3 $end
$var wire 1 (7 A $end
$var wire 1 87 B $end
$var wire 1 .@ C_in $end
$var wire 1 N> S $end
$var wire 1 M@ C_out $end
$var wire 1 N@ nand1_out $end
$var wire 1 O@ nand2_out $end
$var wire 1 P@ nand3_out $end

$scope module nand1 $end
$var wire 1 (7 in1 $end
$var wire 1 87 in2 $end
$var wire 1 N@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 87 in1 $end
$var wire 1 .@ in2 $end
$var wire 1 O@ out $end
$upscope $end

$scope module nand3 $end
$var wire 1 (7 in1 $end
$var wire 1 .@ in2 $end
$var wire 1 P@ out $end
$upscope $end

$scope module nand_out $end
$var wire 1 N@ in1 $end
$var wire 1 O@ in2 $end
$var wire 1 P@ in3 $end
$var wire 1 M@ out $end
$upscope $end

$scope module xor1 $end
$var wire 1 (7 in1 $end
$var wire 1 87 in2 $end
$var wire 1 .@ in3 $end
$var wire 1 N> out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module SEQ $end
$var wire 1 (7 A [15] $end
$var wire 1 )7 A [14] $end
$var wire 1 *7 A [13] $end
$var wire 1 +7 A [12] $end
$var wire 1 ,7 A [11] $end
$var wire 1 -7 A [10] $end
$var wire 1 .7 A [9] $end
$var wire 1 /7 A [8] $end
$var wire 1 07 A [7] $end
$var wire 1 17 A [6] $end
$var wire 1 27 A [5] $end
$var wire 1 37 A [4] $end
$var wire 1 47 A [3] $end
$var wire 1 57 A [2] $end
$var wire 1 67 A [1] $end
$var wire 1 77 A [0] $end
$var wire 1 87 B [15] $end
$var wire 1 97 B [14] $end
$var wire 1 :7 B [13] $end
$var wire 1 ;7 B [12] $end
$var wire 1 <7 B [11] $end
$var wire 1 =7 B [10] $end
$var wire 1 >7 B [9] $end
$var wire 1 ?7 B [8] $end
$var wire 1 @7 B [7] $end
$var wire 1 A7 B [6] $end
$var wire 1 B7 B [5] $end
$var wire 1 C7 B [4] $end
$var wire 1 D7 B [3] $end
$var wire 1 E7 B [2] $end
$var wire 1 F7 B [1] $end
$var wire 1 G7 B [0] $end
$var wire 1 j8 Out [15] $end
$var wire 1 k8 Out [14] $end
$var wire 1 l8 Out [13] $end
$var wire 1 m8 Out [12] $end
$var wire 1 n8 Out [11] $end
$var wire 1 o8 Out [10] $end
$var wire 1 p8 Out [9] $end
$var wire 1 q8 Out [8] $end
$var wire 1 r8 Out [7] $end
$var wire 1 s8 Out [6] $end
$var wire 1 t8 Out [5] $end
$var wire 1 u8 Out [4] $end
$var wire 1 v8 Out [3] $end
$var wire 1 w8 Out [2] $end
$var wire 1 x8 Out [1] $end
$var wire 1 y8 Out [0] $end
$var wire 1 Q@ compare $end
$upscope $end

$scope module SLBI $end
$var wire 1 (7 A [15] $end
$var wire 1 )7 A [14] $end
$var wire 1 *7 A [13] $end
$var wire 1 +7 A [12] $end
$var wire 1 ,7 A [11] $end
$var wire 1 -7 A [10] $end
$var wire 1 .7 A [9] $end
$var wire 1 /7 A [8] $end
$var wire 1 07 A [7] $end
$var wire 1 17 A [6] $end
$var wire 1 27 A [5] $end
$var wire 1 37 A [4] $end
$var wire 1 47 A [3] $end
$var wire 1 57 A [2] $end
$var wire 1 67 A [1] $end
$var wire 1 77 A [0] $end
$var wire 1 87 B [15] $end
$var wire 1 97 B [14] $end
$var wire 1 :7 B [13] $end
$var wire 1 ;7 B [12] $end
$var wire 1 <7 B [11] $end
$var wire 1 =7 B [10] $end
$var wire 1 >7 B [9] $end
$var wire 1 ?7 B [8] $end
$var wire 1 @7 B [7] $end
$var wire 1 A7 B [6] $end
$var wire 1 B7 B [5] $end
$var wire 1 C7 B [4] $end
$var wire 1 D7 B [3] $end
$var wire 1 E7 B [2] $end
$var wire 1 F7 B [1] $end
$var wire 1 G7 B [0] $end
$var wire 1 Z8 Out [15] $end
$var wire 1 [8 Out [14] $end
$var wire 1 \8 Out [13] $end
$var wire 1 ]8 Out [12] $end
$var wire 1 ^8 Out [11] $end
$var wire 1 _8 Out [10] $end
$var wire 1 `8 Out [9] $end
$var wire 1 a8 Out [8] $end
$var wire 1 b8 Out [7] $end
$var wire 1 c8 Out [6] $end
$var wire 1 d8 Out [5] $end
$var wire 1 e8 Out [4] $end
$var wire 1 f8 Out [3] $end
$var wire 1 g8 Out [2] $end
$var wire 1 h8 Out [1] $end
$var wire 1 i8 Out [0] $end
$upscope $end

$scope module CLA_16 $end
$var parameter 32 R@ N $end
$var wire 1 (7 A [15] $end
$var wire 1 )7 A [14] $end
$var wire 1 *7 A [13] $end
$var wire 1 +7 A [12] $end
$var wire 1 ,7 A [11] $end
$var wire 1 -7 A [10] $end
$var wire 1 .7 A [9] $end
$var wire 1 /7 A [8] $end
$var wire 1 07 A [7] $end
$var wire 1 17 A [6] $end
$var wire 1 27 A [5] $end
$var wire 1 37 A [4] $end
$var wire 1 47 A [3] $end
$var wire 1 57 A [2] $end
$var wire 1 67 A [1] $end
$var wire 1 77 A [0] $end
$var wire 1 87 B [15] $end
$var wire 1 97 B [14] $end
$var wire 1 :7 B [13] $end
$var wire 1 ;7 B [12] $end
$var wire 1 <7 B [11] $end
$var wire 1 =7 B [10] $end
$var wire 1 >7 B [9] $end
$var wire 1 ?7 B [8] $end
$var wire 1 @7 B [7] $end
$var wire 1 A7 B [6] $end
$var wire 1 B7 B [5] $end
$var wire 1 C7 B [4] $end
$var wire 1 D7 B [3] $end
$var wire 1 E7 B [2] $end
$var wire 1 F7 B [1] $end
$var wire 1 G7 B [0] $end
$var wire 1 q6 C_in $end
$var wire 1 u6 S [15] $end
$var wire 1 v6 S [14] $end
$var wire 1 w6 S [13] $end
$var wire 1 x6 S [12] $end
$var wire 1 y6 S [11] $end
$var wire 1 z6 S [10] $end
$var wire 1 {6 S [9] $end
$var wire 1 |6 S [8] $end
$var wire 1 }6 S [7] $end
$var wire 1 ~6 S [6] $end
$var wire 1 !7 S [5] $end
$var wire 1 "7 S [4] $end
$var wire 1 #7 S [3] $end
$var wire 1 $7 S [2] $end
$var wire 1 %7 S [1] $end
$var wire 1 &7 S [0] $end
$var wire 1 '7 C_out $end
$var wire 1 S@ C_out0 $end
$var wire 1 T@ C_out1 $end
$var wire 1 U@ C_out2 $end
$var wire 1 V@ G0 $end
$var wire 1 W@ P0 $end
$var wire 1 X@ G1 $end
$var wire 1 Y@ P1 $end
$var wire 1 Z@ G2 $end
$var wire 1 [@ P2 $end
$var wire 1 \@ G3 $end
$var wire 1 ]@ P3 $end
$var wire 1 ^@ C_in1 $end
$var wire 1 _@ C_in2 $end
$var wire 1 `@ C_in3 $end

$scope module cla_4_1 $end
$var parameter 32 a@ N $end
$var wire 1 47 A [3] $end
$var wire 1 57 A [2] $end
$var wire 1 67 A [1] $end
$var wire 1 77 A [0] $end
$var wire 1 D7 B [3] $end
$var wire 1 E7 B [2] $end
$var wire 1 F7 B [1] $end
$var wire 1 G7 B [0] $end
$var wire 1 q6 C_in $end
$var wire 1 #7 S [3] $end
$var wire 1 $7 S [2] $end
$var wire 1 %7 S [1] $end
$var wire 1 &7 S [0] $end
$var wire 1 S@ C_out $end
$var wire 1 V@ G $end
$var wire 1 W@ P $end
$var wire 1 b@ C_out0 $end
$var wire 1 c@ C_out1 $end
$var wire 1 d@ C_out2 $end

$scope module carryLogic0 $end
$var wire 1 77 A $end
$var wire 1 G7 B $end
$var wire 1 q6 Cin $end
$var wire 1 b@ C_out $end
$var wire 1 e@ P $end
$var wire 1 f@ G $end
$var wire 1 g@ G_inv $end
$var wire 1 h@ P_nor $end
$var wire 1 i@ C_out_1 $end

$scope module nand_G $end
$var wire 1 77 in1 $end
$var wire 1 G7 in2 $end
$var wire 1 g@ out $end
$upscope $end

$scope module not_1 $end
$var wire 1 g@ in1 $end
$var wire 1 f@ out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 77 in1 $end
$var wire 1 G7 in2 $end
$var wire 1 h@ out $end
$upscope $end

$scope module not_2 $end
$var wire 1 h@ in1 $end
$var wire 1 e@ out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 e@ in1 $end
$var wire 1 q6 in2 $end
$var wire 1 i@ out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 g@ in1 $end
$var wire 1 i@ in2 $end
$var wire 1 b@ out $end
$upscope $end
$upscope $end

$scope module fullAdder0 $end
$var wire 1 77 A $end
$var wire 1 G7 B $end
$var wire 1 q6 C_in $end
$var wire 1 &7 S $end
$var wire 1 j@ C_out $end
$var wire 1 k@ nand1_out $end
$var wire 1 l@ nand2_out $end
$var wire 1 m@ nand3_out $end

$scope module nand1 $end
$var wire 1 77 in1 $end
$var wire 1 G7 in2 $end
$var wire 1 k@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 G7 in1 $end
$var wire 1 q6 in2 $end
$var wire 1 l@ out $end
$upscope $end

$scope module nand3 $end
$var wire 1 77 in1 $end
$var wire 1 q6 in2 $end
$var wire 1 m@ out $end
$upscope $end

$scope module nand_out $end
$var wire 1 k@ in1 $end
$var wire 1 l@ in2 $end
$var wire 1 m@ in3 $end
$var wire 1 j@ out $end
$upscope $end

$scope module xor1 $end
$var wire 1 77 in1 $end
$var wire 1 G7 in2 $end
$var wire 1 q6 in3 $end
$var wire 1 &7 out $end
$upscope $end
$upscope $end

$scope module carryLogic1 $end
$var wire 1 67 A $end
$var wire 1 F7 B $end
$var wire 1 b@ Cin $end
$var wire 1 c@ C_out $end
$var wire 1 n@ P $end
$var wire 1 o@ G $end
$var wire 1 p@ G_inv $end
$var wire 1 q@ P_nor $end
$var wire 1 r@ C_out_1 $end

$scope module nand_G $end
$var wire 1 67 in1 $end
$var wire 1 F7 in2 $end
$var wire 1 p@ out $end
$upscope $end

$scope module not_1 $end
$var wire 1 p@ in1 $end
$var wire 1 o@ out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 67 in1 $end
$var wire 1 F7 in2 $end
$var wire 1 q@ out $end
$upscope $end

$scope module not_2 $end
$var wire 1 q@ in1 $end
$var wire 1 n@ out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 n@ in1 $end
$var wire 1 b@ in2 $end
$var wire 1 r@ out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 p@ in1 $end
$var wire 1 r@ in2 $end
$var wire 1 c@ out $end
$upscope $end
$upscope $end

$scope module fullAdder1 $end
$var wire 1 67 A $end
$var wire 1 F7 B $end
$var wire 1 b@ C_in $end
$var wire 1 %7 S $end
$var wire 1 s@ C_out $end
$var wire 1 t@ nand1_out $end
$var wire 1 u@ nand2_out $end
$var wire 1 v@ nand3_out $end

$scope module nand1 $end
$var wire 1 67 in1 $end
$var wire 1 F7 in2 $end
$var wire 1 t@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 F7 in1 $end
$var wire 1 b@ in2 $end
$var wire 1 u@ out $end
$upscope $end

$scope module nand3 $end
$var wire 1 67 in1 $end
$var wire 1 b@ in2 $end
$var wire 1 v@ out $end
$upscope $end

$scope module nand_out $end
$var wire 1 t@ in1 $end
$var wire 1 u@ in2 $end
$var wire 1 v@ in3 $end
$var wire 1 s@ out $end
$upscope $end

$scope module xor1 $end
$var wire 1 67 in1 $end
$var wire 1 F7 in2 $end
$var wire 1 b@ in3 $end
$var wire 1 %7 out $end
$upscope $end
$upscope $end

$scope module carryLogic2 $end
$var wire 1 57 A $end
$var wire 1 E7 B $end
$var wire 1 c@ Cin $end
$var wire 1 d@ C_out $end
$var wire 1 w@ P $end
$var wire 1 x@ G $end
$var wire 1 y@ G_inv $end
$var wire 1 z@ P_nor $end
$var wire 1 {@ C_out_1 $end

$scope module nand_G $end
$var wire 1 57 in1 $end
$var wire 1 E7 in2 $end
$var wire 1 y@ out $end
$upscope $end

$scope module not_1 $end
$var wire 1 y@ in1 $end
$var wire 1 x@ out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 57 in1 $end
$var wire 1 E7 in2 $end
$var wire 1 z@ out $end
$upscope $end

$scope module not_2 $end
$var wire 1 z@ in1 $end
$var wire 1 w@ out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 w@ in1 $end
$var wire 1 c@ in2 $end
$var wire 1 {@ out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 y@ in1 $end
$var wire 1 {@ in2 $end
$var wire 1 d@ out $end
$upscope $end
$upscope $end

$scope module fullAdder2 $end
$var wire 1 57 A $end
$var wire 1 E7 B $end
$var wire 1 c@ C_in $end
$var wire 1 $7 S $end
$var wire 1 |@ C_out $end
$var wire 1 }@ nand1_out $end
$var wire 1 ~@ nand2_out $end
$var wire 1 !A nand3_out $end

$scope module nand1 $end
$var wire 1 57 in1 $end
$var wire 1 E7 in2 $end
$var wire 1 }@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 E7 in1 $end
$var wire 1 c@ in2 $end
$var wire 1 ~@ out $end
$upscope $end

$scope module nand3 $end
$var wire 1 57 in1 $end
$var wire 1 c@ in2 $end
$var wire 1 !A out $end
$upscope $end

$scope module nand_out $end
$var wire 1 }@ in1 $end
$var wire 1 ~@ in2 $end
$var wire 1 !A in3 $end
$var wire 1 |@ out $end
$upscope $end

$scope module xor1 $end
$var wire 1 57 in1 $end
$var wire 1 E7 in2 $end
$var wire 1 c@ in3 $end
$var wire 1 $7 out $end
$upscope $end
$upscope $end

$scope module carryLogic3 $end
$var wire 1 47 A $end
$var wire 1 D7 B $end
$var wire 1 d@ Cin $end
$var wire 1 S@ C_out $end
$var wire 1 W@ P $end
$var wire 1 V@ G $end
$var wire 1 "A G_inv $end
$var wire 1 #A P_nor $end
$var wire 1 $A C_out_1 $end

$scope module nand_G $end
$var wire 1 47 in1 $end
$var wire 1 D7 in2 $end
$var wire 1 "A out $end
$upscope $end

$scope module not_1 $end
$var wire 1 "A in1 $end
$var wire 1 V@ out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 47 in1 $end
$var wire 1 D7 in2 $end
$var wire 1 #A out $end
$upscope $end

$scope module not_2 $end
$var wire 1 #A in1 $end
$var wire 1 W@ out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 W@ in1 $end
$var wire 1 d@ in2 $end
$var wire 1 $A out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 "A in1 $end
$var wire 1 $A in2 $end
$var wire 1 S@ out $end
$upscope $end
$upscope $end

$scope module fullAdder3 $end
$var wire 1 47 A $end
$var wire 1 D7 B $end
$var wire 1 d@ C_in $end
$var wire 1 #7 S $end
$var wire 1 %A C_out $end
$var wire 1 &A nand1_out $end
$var wire 1 'A nand2_out $end
$var wire 1 (A nand3_out $end

$scope module nand1 $end
$var wire 1 47 in1 $end
$var wire 1 D7 in2 $end
$var wire 1 &A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 D7 in1 $end
$var wire 1 d@ in2 $end
$var wire 1 'A out $end
$upscope $end

$scope module nand3 $end
$var wire 1 47 in1 $end
$var wire 1 d@ in2 $end
$var wire 1 (A out $end
$upscope $end

$scope module nand_out $end
$var wire 1 &A in1 $end
$var wire 1 'A in2 $end
$var wire 1 (A in3 $end
$var wire 1 %A out $end
$upscope $end

$scope module xor1 $end
$var wire 1 47 in1 $end
$var wire 1 D7 in2 $end
$var wire 1 d@ in3 $end
$var wire 1 #7 out $end
$upscope $end
$upscope $end
$upscope $end

$scope module compute1 $end
$var wire 1 W@ P $end
$var wire 1 V@ G $end
$var wire 1 S@ C_in_prev $end
$var wire 1 ^@ C_in $end
$var wire 1 )A G_in $end
$var wire 1 *A C_out_1 $end
$var wire 1 +A G_inv $end

$scope module not1 $end
$var wire 1 V@ in1 $end
$var wire 1 +A out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 W@ in1 $end
$var wire 1 S@ in2 $end
$var wire 1 *A out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 +A in1 $end
$var wire 1 *A in2 $end
$var wire 1 ^@ out $end
$upscope $end
$upscope $end

$scope module cla_4_2 $end
$var parameter 32 ,A N $end
$var wire 1 07 A [3] $end
$var wire 1 17 A [2] $end
$var wire 1 27 A [1] $end
$var wire 1 37 A [0] $end
$var wire 1 @7 B [3] $end
$var wire 1 A7 B [2] $end
$var wire 1 B7 B [1] $end
$var wire 1 C7 B [0] $end
$var wire 1 ^@ C_in $end
$var wire 1 }6 S [3] $end
$var wire 1 ~6 S [2] $end
$var wire 1 !7 S [1] $end
$var wire 1 "7 S [0] $end
$var wire 1 T@ C_out $end
$var wire 1 X@ G $end
$var wire 1 Y@ P $end
$var wire 1 -A C_out0 $end
$var wire 1 .A C_out1 $end
$var wire 1 /A C_out2 $end

$scope module carryLogic0 $end
$var wire 1 37 A $end
$var wire 1 C7 B $end
$var wire 1 ^@ Cin $end
$var wire 1 -A C_out $end
$var wire 1 0A P $end
$var wire 1 1A G $end
$var wire 1 2A G_inv $end
$var wire 1 3A P_nor $end
$var wire 1 4A C_out_1 $end

$scope module nand_G $end
$var wire 1 37 in1 $end
$var wire 1 C7 in2 $end
$var wire 1 2A out $end
$upscope $end

$scope module not_1 $end
$var wire 1 2A in1 $end
$var wire 1 1A out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 37 in1 $end
$var wire 1 C7 in2 $end
$var wire 1 3A out $end
$upscope $end

$scope module not_2 $end
$var wire 1 3A in1 $end
$var wire 1 0A out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 0A in1 $end
$var wire 1 ^@ in2 $end
$var wire 1 4A out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 2A in1 $end
$var wire 1 4A in2 $end
$var wire 1 -A out $end
$upscope $end
$upscope $end

$scope module fullAdder0 $end
$var wire 1 37 A $end
$var wire 1 C7 B $end
$var wire 1 ^@ C_in $end
$var wire 1 "7 S $end
$var wire 1 5A C_out $end
$var wire 1 6A nand1_out $end
$var wire 1 7A nand2_out $end
$var wire 1 8A nand3_out $end

$scope module nand1 $end
$var wire 1 37 in1 $end
$var wire 1 C7 in2 $end
$var wire 1 6A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 C7 in1 $end
$var wire 1 ^@ in2 $end
$var wire 1 7A out $end
$upscope $end

$scope module nand3 $end
$var wire 1 37 in1 $end
$var wire 1 ^@ in2 $end
$var wire 1 8A out $end
$upscope $end

$scope module nand_out $end
$var wire 1 6A in1 $end
$var wire 1 7A in2 $end
$var wire 1 8A in3 $end
$var wire 1 5A out $end
$upscope $end

$scope module xor1 $end
$var wire 1 37 in1 $end
$var wire 1 C7 in2 $end
$var wire 1 ^@ in3 $end
$var wire 1 "7 out $end
$upscope $end
$upscope $end

$scope module carryLogic1 $end
$var wire 1 27 A $end
$var wire 1 B7 B $end
$var wire 1 -A Cin $end
$var wire 1 .A C_out $end
$var wire 1 9A P $end
$var wire 1 :A G $end
$var wire 1 ;A G_inv $end
$var wire 1 <A P_nor $end
$var wire 1 =A C_out_1 $end

$scope module nand_G $end
$var wire 1 27 in1 $end
$var wire 1 B7 in2 $end
$var wire 1 ;A out $end
$upscope $end

$scope module not_1 $end
$var wire 1 ;A in1 $end
$var wire 1 :A out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 27 in1 $end
$var wire 1 B7 in2 $end
$var wire 1 <A out $end
$upscope $end

$scope module not_2 $end
$var wire 1 <A in1 $end
$var wire 1 9A out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 9A in1 $end
$var wire 1 -A in2 $end
$var wire 1 =A out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 ;A in1 $end
$var wire 1 =A in2 $end
$var wire 1 .A out $end
$upscope $end
$upscope $end

$scope module fullAdder1 $end
$var wire 1 27 A $end
$var wire 1 B7 B $end
$var wire 1 -A C_in $end
$var wire 1 !7 S $end
$var wire 1 >A C_out $end
$var wire 1 ?A nand1_out $end
$var wire 1 @A nand2_out $end
$var wire 1 AA nand3_out $end

$scope module nand1 $end
$var wire 1 27 in1 $end
$var wire 1 B7 in2 $end
$var wire 1 ?A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 B7 in1 $end
$var wire 1 -A in2 $end
$var wire 1 @A out $end
$upscope $end

$scope module nand3 $end
$var wire 1 27 in1 $end
$var wire 1 -A in2 $end
$var wire 1 AA out $end
$upscope $end

$scope module nand_out $end
$var wire 1 ?A in1 $end
$var wire 1 @A in2 $end
$var wire 1 AA in3 $end
$var wire 1 >A out $end
$upscope $end

$scope module xor1 $end
$var wire 1 27 in1 $end
$var wire 1 B7 in2 $end
$var wire 1 -A in3 $end
$var wire 1 !7 out $end
$upscope $end
$upscope $end

$scope module carryLogic2 $end
$var wire 1 17 A $end
$var wire 1 A7 B $end
$var wire 1 .A Cin $end
$var wire 1 /A C_out $end
$var wire 1 BA P $end
$var wire 1 CA G $end
$var wire 1 DA G_inv $end
$var wire 1 EA P_nor $end
$var wire 1 FA C_out_1 $end

$scope module nand_G $end
$var wire 1 17 in1 $end
$var wire 1 A7 in2 $end
$var wire 1 DA out $end
$upscope $end

$scope module not_1 $end
$var wire 1 DA in1 $end
$var wire 1 CA out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 17 in1 $end
$var wire 1 A7 in2 $end
$var wire 1 EA out $end
$upscope $end

$scope module not_2 $end
$var wire 1 EA in1 $end
$var wire 1 BA out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 BA in1 $end
$var wire 1 .A in2 $end
$var wire 1 FA out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 DA in1 $end
$var wire 1 FA in2 $end
$var wire 1 /A out $end
$upscope $end
$upscope $end

$scope module fullAdder2 $end
$var wire 1 17 A $end
$var wire 1 A7 B $end
$var wire 1 .A C_in $end
$var wire 1 ~6 S $end
$var wire 1 GA C_out $end
$var wire 1 HA nand1_out $end
$var wire 1 IA nand2_out $end
$var wire 1 JA nand3_out $end

$scope module nand1 $end
$var wire 1 17 in1 $end
$var wire 1 A7 in2 $end
$var wire 1 HA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 A7 in1 $end
$var wire 1 .A in2 $end
$var wire 1 IA out $end
$upscope $end

$scope module nand3 $end
$var wire 1 17 in1 $end
$var wire 1 .A in2 $end
$var wire 1 JA out $end
$upscope $end

$scope module nand_out $end
$var wire 1 HA in1 $end
$var wire 1 IA in2 $end
$var wire 1 JA in3 $end
$var wire 1 GA out $end
$upscope $end

$scope module xor1 $end
$var wire 1 17 in1 $end
$var wire 1 A7 in2 $end
$var wire 1 .A in3 $end
$var wire 1 ~6 out $end
$upscope $end
$upscope $end

$scope module carryLogic3 $end
$var wire 1 07 A $end
$var wire 1 @7 B $end
$var wire 1 /A Cin $end
$var wire 1 T@ C_out $end
$var wire 1 Y@ P $end
$var wire 1 X@ G $end
$var wire 1 KA G_inv $end
$var wire 1 LA P_nor $end
$var wire 1 MA C_out_1 $end

$scope module nand_G $end
$var wire 1 07 in1 $end
$var wire 1 @7 in2 $end
$var wire 1 KA out $end
$upscope $end

$scope module not_1 $end
$var wire 1 KA in1 $end
$var wire 1 X@ out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 07 in1 $end
$var wire 1 @7 in2 $end
$var wire 1 LA out $end
$upscope $end

$scope module not_2 $end
$var wire 1 LA in1 $end
$var wire 1 Y@ out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 Y@ in1 $end
$var wire 1 /A in2 $end
$var wire 1 MA out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 KA in1 $end
$var wire 1 MA in2 $end
$var wire 1 T@ out $end
$upscope $end
$upscope $end

$scope module fullAdder3 $end
$var wire 1 07 A $end
$var wire 1 @7 B $end
$var wire 1 /A C_in $end
$var wire 1 }6 S $end
$var wire 1 NA C_out $end
$var wire 1 OA nand1_out $end
$var wire 1 PA nand2_out $end
$var wire 1 QA nand3_out $end

$scope module nand1 $end
$var wire 1 07 in1 $end
$var wire 1 @7 in2 $end
$var wire 1 OA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 @7 in1 $end
$var wire 1 /A in2 $end
$var wire 1 PA out $end
$upscope $end

$scope module nand3 $end
$var wire 1 07 in1 $end
$var wire 1 /A in2 $end
$var wire 1 QA out $end
$upscope $end

$scope module nand_out $end
$var wire 1 OA in1 $end
$var wire 1 PA in2 $end
$var wire 1 QA in3 $end
$var wire 1 NA out $end
$upscope $end

$scope module xor1 $end
$var wire 1 07 in1 $end
$var wire 1 @7 in2 $end
$var wire 1 /A in3 $end
$var wire 1 }6 out $end
$upscope $end
$upscope $end
$upscope $end

$scope module compute2 $end
$var wire 1 Y@ P $end
$var wire 1 X@ G $end
$var wire 1 T@ C_in_prev $end
$var wire 1 _@ C_in $end
$var wire 1 RA G_in $end
$var wire 1 SA C_out_1 $end
$var wire 1 TA G_inv $end

$scope module not1 $end
$var wire 1 X@ in1 $end
$var wire 1 TA out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 Y@ in1 $end
$var wire 1 T@ in2 $end
$var wire 1 SA out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 TA in1 $end
$var wire 1 SA in2 $end
$var wire 1 _@ out $end
$upscope $end
$upscope $end

$scope module cla_4_3 $end
$var parameter 32 UA N $end
$var wire 1 ,7 A [3] $end
$var wire 1 -7 A [2] $end
$var wire 1 .7 A [1] $end
$var wire 1 /7 A [0] $end
$var wire 1 <7 B [3] $end
$var wire 1 =7 B [2] $end
$var wire 1 >7 B [1] $end
$var wire 1 ?7 B [0] $end
$var wire 1 _@ C_in $end
$var wire 1 y6 S [3] $end
$var wire 1 z6 S [2] $end
$var wire 1 {6 S [1] $end
$var wire 1 |6 S [0] $end
$var wire 1 U@ C_out $end
$var wire 1 Z@ G $end
$var wire 1 [@ P $end
$var wire 1 VA C_out0 $end
$var wire 1 WA C_out1 $end
$var wire 1 XA C_out2 $end

$scope module carryLogic0 $end
$var wire 1 /7 A $end
$var wire 1 ?7 B $end
$var wire 1 _@ Cin $end
$var wire 1 VA C_out $end
$var wire 1 YA P $end
$var wire 1 ZA G $end
$var wire 1 [A G_inv $end
$var wire 1 \A P_nor $end
$var wire 1 ]A C_out_1 $end

$scope module nand_G $end
$var wire 1 /7 in1 $end
$var wire 1 ?7 in2 $end
$var wire 1 [A out $end
$upscope $end

$scope module not_1 $end
$var wire 1 [A in1 $end
$var wire 1 ZA out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 /7 in1 $end
$var wire 1 ?7 in2 $end
$var wire 1 \A out $end
$upscope $end

$scope module not_2 $end
$var wire 1 \A in1 $end
$var wire 1 YA out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 YA in1 $end
$var wire 1 _@ in2 $end
$var wire 1 ]A out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 [A in1 $end
$var wire 1 ]A in2 $end
$var wire 1 VA out $end
$upscope $end
$upscope $end

$scope module fullAdder0 $end
$var wire 1 /7 A $end
$var wire 1 ?7 B $end
$var wire 1 _@ C_in $end
$var wire 1 |6 S $end
$var wire 1 ^A C_out $end
$var wire 1 _A nand1_out $end
$var wire 1 `A nand2_out $end
$var wire 1 aA nand3_out $end

$scope module nand1 $end
$var wire 1 /7 in1 $end
$var wire 1 ?7 in2 $end
$var wire 1 _A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ?7 in1 $end
$var wire 1 _@ in2 $end
$var wire 1 `A out $end
$upscope $end

$scope module nand3 $end
$var wire 1 /7 in1 $end
$var wire 1 _@ in2 $end
$var wire 1 aA out $end
$upscope $end

$scope module nand_out $end
$var wire 1 _A in1 $end
$var wire 1 `A in2 $end
$var wire 1 aA in3 $end
$var wire 1 ^A out $end
$upscope $end

$scope module xor1 $end
$var wire 1 /7 in1 $end
$var wire 1 ?7 in2 $end
$var wire 1 _@ in3 $end
$var wire 1 |6 out $end
$upscope $end
$upscope $end

$scope module carryLogic1 $end
$var wire 1 .7 A $end
$var wire 1 >7 B $end
$var wire 1 VA Cin $end
$var wire 1 WA C_out $end
$var wire 1 bA P $end
$var wire 1 cA G $end
$var wire 1 dA G_inv $end
$var wire 1 eA P_nor $end
$var wire 1 fA C_out_1 $end

$scope module nand_G $end
$var wire 1 .7 in1 $end
$var wire 1 >7 in2 $end
$var wire 1 dA out $end
$upscope $end

$scope module not_1 $end
$var wire 1 dA in1 $end
$var wire 1 cA out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 .7 in1 $end
$var wire 1 >7 in2 $end
$var wire 1 eA out $end
$upscope $end

$scope module not_2 $end
$var wire 1 eA in1 $end
$var wire 1 bA out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 bA in1 $end
$var wire 1 VA in2 $end
$var wire 1 fA out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 dA in1 $end
$var wire 1 fA in2 $end
$var wire 1 WA out $end
$upscope $end
$upscope $end

$scope module fullAdder1 $end
$var wire 1 .7 A $end
$var wire 1 >7 B $end
$var wire 1 VA C_in $end
$var wire 1 {6 S $end
$var wire 1 gA C_out $end
$var wire 1 hA nand1_out $end
$var wire 1 iA nand2_out $end
$var wire 1 jA nand3_out $end

$scope module nand1 $end
$var wire 1 .7 in1 $end
$var wire 1 >7 in2 $end
$var wire 1 hA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 >7 in1 $end
$var wire 1 VA in2 $end
$var wire 1 iA out $end
$upscope $end

$scope module nand3 $end
$var wire 1 .7 in1 $end
$var wire 1 VA in2 $end
$var wire 1 jA out $end
$upscope $end

$scope module nand_out $end
$var wire 1 hA in1 $end
$var wire 1 iA in2 $end
$var wire 1 jA in3 $end
$var wire 1 gA out $end
$upscope $end

$scope module xor1 $end
$var wire 1 .7 in1 $end
$var wire 1 >7 in2 $end
$var wire 1 VA in3 $end
$var wire 1 {6 out $end
$upscope $end
$upscope $end

$scope module carryLogic2 $end
$var wire 1 -7 A $end
$var wire 1 =7 B $end
$var wire 1 WA Cin $end
$var wire 1 XA C_out $end
$var wire 1 kA P $end
$var wire 1 lA G $end
$var wire 1 mA G_inv $end
$var wire 1 nA P_nor $end
$var wire 1 oA C_out_1 $end

$scope module nand_G $end
$var wire 1 -7 in1 $end
$var wire 1 =7 in2 $end
$var wire 1 mA out $end
$upscope $end

$scope module not_1 $end
$var wire 1 mA in1 $end
$var wire 1 lA out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 -7 in1 $end
$var wire 1 =7 in2 $end
$var wire 1 nA out $end
$upscope $end

$scope module not_2 $end
$var wire 1 nA in1 $end
$var wire 1 kA out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 kA in1 $end
$var wire 1 WA in2 $end
$var wire 1 oA out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 mA in1 $end
$var wire 1 oA in2 $end
$var wire 1 XA out $end
$upscope $end
$upscope $end

$scope module fullAdder2 $end
$var wire 1 -7 A $end
$var wire 1 =7 B $end
$var wire 1 WA C_in $end
$var wire 1 z6 S $end
$var wire 1 pA C_out $end
$var wire 1 qA nand1_out $end
$var wire 1 rA nand2_out $end
$var wire 1 sA nand3_out $end

$scope module nand1 $end
$var wire 1 -7 in1 $end
$var wire 1 =7 in2 $end
$var wire 1 qA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 =7 in1 $end
$var wire 1 WA in2 $end
$var wire 1 rA out $end
$upscope $end

$scope module nand3 $end
$var wire 1 -7 in1 $end
$var wire 1 WA in2 $end
$var wire 1 sA out $end
$upscope $end

$scope module nand_out $end
$var wire 1 qA in1 $end
$var wire 1 rA in2 $end
$var wire 1 sA in3 $end
$var wire 1 pA out $end
$upscope $end

$scope module xor1 $end
$var wire 1 -7 in1 $end
$var wire 1 =7 in2 $end
$var wire 1 WA in3 $end
$var wire 1 z6 out $end
$upscope $end
$upscope $end

$scope module carryLogic3 $end
$var wire 1 ,7 A $end
$var wire 1 <7 B $end
$var wire 1 XA Cin $end
$var wire 1 U@ C_out $end
$var wire 1 [@ P $end
$var wire 1 Z@ G $end
$var wire 1 tA G_inv $end
$var wire 1 uA P_nor $end
$var wire 1 vA C_out_1 $end

$scope module nand_G $end
$var wire 1 ,7 in1 $end
$var wire 1 <7 in2 $end
$var wire 1 tA out $end
$upscope $end

$scope module not_1 $end
$var wire 1 tA in1 $end
$var wire 1 Z@ out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 ,7 in1 $end
$var wire 1 <7 in2 $end
$var wire 1 uA out $end
$upscope $end

$scope module not_2 $end
$var wire 1 uA in1 $end
$var wire 1 [@ out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 [@ in1 $end
$var wire 1 XA in2 $end
$var wire 1 vA out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 tA in1 $end
$var wire 1 vA in2 $end
$var wire 1 U@ out $end
$upscope $end
$upscope $end

$scope module fullAdder3 $end
$var wire 1 ,7 A $end
$var wire 1 <7 B $end
$var wire 1 XA C_in $end
$var wire 1 y6 S $end
$var wire 1 wA C_out $end
$var wire 1 xA nand1_out $end
$var wire 1 yA nand2_out $end
$var wire 1 zA nand3_out $end

$scope module nand1 $end
$var wire 1 ,7 in1 $end
$var wire 1 <7 in2 $end
$var wire 1 xA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 <7 in1 $end
$var wire 1 XA in2 $end
$var wire 1 yA out $end
$upscope $end

$scope module nand3 $end
$var wire 1 ,7 in1 $end
$var wire 1 XA in2 $end
$var wire 1 zA out $end
$upscope $end

$scope module nand_out $end
$var wire 1 xA in1 $end
$var wire 1 yA in2 $end
$var wire 1 zA in3 $end
$var wire 1 wA out $end
$upscope $end

$scope module xor1 $end
$var wire 1 ,7 in1 $end
$var wire 1 <7 in2 $end
$var wire 1 XA in3 $end
$var wire 1 y6 out $end
$upscope $end
$upscope $end
$upscope $end

$scope module compute3 $end
$var wire 1 [@ P $end
$var wire 1 Z@ G $end
$var wire 1 U@ C_in_prev $end
$var wire 1 `@ C_in $end
$var wire 1 {A G_in $end
$var wire 1 |A C_out_1 $end
$var wire 1 }A G_inv $end

$scope module not1 $end
$var wire 1 Z@ in1 $end
$var wire 1 }A out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 [@ in1 $end
$var wire 1 U@ in2 $end
$var wire 1 |A out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 }A in1 $end
$var wire 1 |A in2 $end
$var wire 1 `@ out $end
$upscope $end
$upscope $end

$scope module cla_4_4 $end
$var parameter 32 ~A N $end
$var wire 1 (7 A [3] $end
$var wire 1 )7 A [2] $end
$var wire 1 *7 A [1] $end
$var wire 1 +7 A [0] $end
$var wire 1 87 B [3] $end
$var wire 1 97 B [2] $end
$var wire 1 :7 B [1] $end
$var wire 1 ;7 B [0] $end
$var wire 1 `@ C_in $end
$var wire 1 u6 S [3] $end
$var wire 1 v6 S [2] $end
$var wire 1 w6 S [1] $end
$var wire 1 x6 S [0] $end
$var wire 1 '7 C_out $end
$var wire 1 \@ G $end
$var wire 1 ]@ P $end
$var wire 1 !B C_out0 $end
$var wire 1 "B C_out1 $end
$var wire 1 #B C_out2 $end

$scope module carryLogic0 $end
$var wire 1 +7 A $end
$var wire 1 ;7 B $end
$var wire 1 `@ Cin $end
$var wire 1 !B C_out $end
$var wire 1 $B P $end
$var wire 1 %B G $end
$var wire 1 &B G_inv $end
$var wire 1 'B P_nor $end
$var wire 1 (B C_out_1 $end

$scope module nand_G $end
$var wire 1 +7 in1 $end
$var wire 1 ;7 in2 $end
$var wire 1 &B out $end
$upscope $end

$scope module not_1 $end
$var wire 1 &B in1 $end
$var wire 1 %B out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 +7 in1 $end
$var wire 1 ;7 in2 $end
$var wire 1 'B out $end
$upscope $end

$scope module not_2 $end
$var wire 1 'B in1 $end
$var wire 1 $B out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 $B in1 $end
$var wire 1 `@ in2 $end
$var wire 1 (B out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 &B in1 $end
$var wire 1 (B in2 $end
$var wire 1 !B out $end
$upscope $end
$upscope $end

$scope module fullAdder0 $end
$var wire 1 +7 A $end
$var wire 1 ;7 B $end
$var wire 1 `@ C_in $end
$var wire 1 x6 S $end
$var wire 1 )B C_out $end
$var wire 1 *B nand1_out $end
$var wire 1 +B nand2_out $end
$var wire 1 ,B nand3_out $end

$scope module nand1 $end
$var wire 1 +7 in1 $end
$var wire 1 ;7 in2 $end
$var wire 1 *B out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ;7 in1 $end
$var wire 1 `@ in2 $end
$var wire 1 +B out $end
$upscope $end

$scope module nand3 $end
$var wire 1 +7 in1 $end
$var wire 1 `@ in2 $end
$var wire 1 ,B out $end
$upscope $end

$scope module nand_out $end
$var wire 1 *B in1 $end
$var wire 1 +B in2 $end
$var wire 1 ,B in3 $end
$var wire 1 )B out $end
$upscope $end

$scope module xor1 $end
$var wire 1 +7 in1 $end
$var wire 1 ;7 in2 $end
$var wire 1 `@ in3 $end
$var wire 1 x6 out $end
$upscope $end
$upscope $end

$scope module carryLogic1 $end
$var wire 1 *7 A $end
$var wire 1 :7 B $end
$var wire 1 !B Cin $end
$var wire 1 "B C_out $end
$var wire 1 -B P $end
$var wire 1 .B G $end
$var wire 1 /B G_inv $end
$var wire 1 0B P_nor $end
$var wire 1 1B C_out_1 $end

$scope module nand_G $end
$var wire 1 *7 in1 $end
$var wire 1 :7 in2 $end
$var wire 1 /B out $end
$upscope $end

$scope module not_1 $end
$var wire 1 /B in1 $end
$var wire 1 .B out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 *7 in1 $end
$var wire 1 :7 in2 $end
$var wire 1 0B out $end
$upscope $end

$scope module not_2 $end
$var wire 1 0B in1 $end
$var wire 1 -B out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 -B in1 $end
$var wire 1 !B in2 $end
$var wire 1 1B out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 /B in1 $end
$var wire 1 1B in2 $end
$var wire 1 "B out $end
$upscope $end
$upscope $end

$scope module fullAdder1 $end
$var wire 1 *7 A $end
$var wire 1 :7 B $end
$var wire 1 !B C_in $end
$var wire 1 w6 S $end
$var wire 1 2B C_out $end
$var wire 1 3B nand1_out $end
$var wire 1 4B nand2_out $end
$var wire 1 5B nand3_out $end

$scope module nand1 $end
$var wire 1 *7 in1 $end
$var wire 1 :7 in2 $end
$var wire 1 3B out $end
$upscope $end

$scope module nand2 $end
$var wire 1 :7 in1 $end
$var wire 1 !B in2 $end
$var wire 1 4B out $end
$upscope $end

$scope module nand3 $end
$var wire 1 *7 in1 $end
$var wire 1 !B in2 $end
$var wire 1 5B out $end
$upscope $end

$scope module nand_out $end
$var wire 1 3B in1 $end
$var wire 1 4B in2 $end
$var wire 1 5B in3 $end
$var wire 1 2B out $end
$upscope $end

$scope module xor1 $end
$var wire 1 *7 in1 $end
$var wire 1 :7 in2 $end
$var wire 1 !B in3 $end
$var wire 1 w6 out $end
$upscope $end
$upscope $end

$scope module carryLogic2 $end
$var wire 1 )7 A $end
$var wire 1 97 B $end
$var wire 1 "B Cin $end
$var wire 1 #B C_out $end
$var wire 1 6B P $end
$var wire 1 7B G $end
$var wire 1 8B G_inv $end
$var wire 1 9B P_nor $end
$var wire 1 :B C_out_1 $end

$scope module nand_G $end
$var wire 1 )7 in1 $end
$var wire 1 97 in2 $end
$var wire 1 8B out $end
$upscope $end

$scope module not_1 $end
$var wire 1 8B in1 $end
$var wire 1 7B out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 )7 in1 $end
$var wire 1 97 in2 $end
$var wire 1 9B out $end
$upscope $end

$scope module not_2 $end
$var wire 1 9B in1 $end
$var wire 1 6B out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 6B in1 $end
$var wire 1 "B in2 $end
$var wire 1 :B out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 8B in1 $end
$var wire 1 :B in2 $end
$var wire 1 #B out $end
$upscope $end
$upscope $end

$scope module fullAdder2 $end
$var wire 1 )7 A $end
$var wire 1 97 B $end
$var wire 1 "B C_in $end
$var wire 1 v6 S $end
$var wire 1 ;B C_out $end
$var wire 1 <B nand1_out $end
$var wire 1 =B nand2_out $end
$var wire 1 >B nand3_out $end

$scope module nand1 $end
$var wire 1 )7 in1 $end
$var wire 1 97 in2 $end
$var wire 1 <B out $end
$upscope $end

$scope module nand2 $end
$var wire 1 97 in1 $end
$var wire 1 "B in2 $end
$var wire 1 =B out $end
$upscope $end

$scope module nand3 $end
$var wire 1 )7 in1 $end
$var wire 1 "B in2 $end
$var wire 1 >B out $end
$upscope $end

$scope module nand_out $end
$var wire 1 <B in1 $end
$var wire 1 =B in2 $end
$var wire 1 >B in3 $end
$var wire 1 ;B out $end
$upscope $end

$scope module xor1 $end
$var wire 1 )7 in1 $end
$var wire 1 97 in2 $end
$var wire 1 "B in3 $end
$var wire 1 v6 out $end
$upscope $end
$upscope $end

$scope module carryLogic3 $end
$var wire 1 (7 A $end
$var wire 1 87 B $end
$var wire 1 #B Cin $end
$var wire 1 '7 C_out $end
$var wire 1 ]@ P $end
$var wire 1 \@ G $end
$var wire 1 ?B G_inv $end
$var wire 1 @B P_nor $end
$var wire 1 AB C_out_1 $end

$scope module nand_G $end
$var wire 1 (7 in1 $end
$var wire 1 87 in2 $end
$var wire 1 ?B out $end
$upscope $end

$scope module not_1 $end
$var wire 1 ?B in1 $end
$var wire 1 \@ out $end
$upscope $end

$scope module nor_1 $end
$var wire 1 (7 in1 $end
$var wire 1 87 in2 $end
$var wire 1 @B out $end
$upscope $end

$scope module not_2 $end
$var wire 1 @B in1 $end
$var wire 1 ]@ out $end
$upscope $end

$scope module nand_C1 $end
$var wire 1 ]@ in1 $end
$var wire 1 #B in2 $end
$var wire 1 AB out $end
$upscope $end

$scope module nand_C2 $end
$var wire 1 ?B in1 $end
$var wire 1 AB in2 $end
$var wire 1 '7 out $end
$upscope $end
$upscope $end

$scope module fullAdder3 $end
$var wire 1 (7 A $end
$var wire 1 87 B $end
$var wire 1 #B C_in $end
$var wire 1 u6 S $end
$var wire 1 BB C_out $end
$var wire 1 CB nand1_out $end
$var wire 1 DB nand2_out $end
$var wire 1 EB nand3_out $end

$scope module nand1 $end
$var wire 1 (7 in1 $end
$var wire 1 87 in2 $end
$var wire 1 CB out $end
$upscope $end

$scope module nand2 $end
$var wire 1 87 in1 $end
$var wire 1 #B in2 $end
$var wire 1 DB out $end
$upscope $end

$scope module nand3 $end
$var wire 1 (7 in1 $end
$var wire 1 #B in2 $end
$var wire 1 EB out $end
$upscope $end

$scope module nand_out $end
$var wire 1 CB in1 $end
$var wire 1 DB in2 $end
$var wire 1 EB in3 $end
$var wire 1 BB out $end
$upscope $end

$scope module xor1 $end
$var wire 1 (7 in1 $end
$var wire 1 87 in2 $end
$var wire 1 #B in3 $end
$var wire 1 u6 out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module ex_mem $end
$var wire 1 ~# pc_plus_2 [15] $end
$var wire 1 !$ pc_plus_2 [14] $end
$var wire 1 "$ pc_plus_2 [13] $end
$var wire 1 #$ pc_plus_2 [12] $end
$var wire 1 $$ pc_plus_2 [11] $end
$var wire 1 %$ pc_plus_2 [10] $end
$var wire 1 &$ pc_plus_2 [9] $end
$var wire 1 '$ pc_plus_2 [8] $end
$var wire 1 ($ pc_plus_2 [7] $end
$var wire 1 )$ pc_plus_2 [6] $end
$var wire 1 *$ pc_plus_2 [5] $end
$var wire 1 +$ pc_plus_2 [4] $end
$var wire 1 ,$ pc_plus_2 [3] $end
$var wire 1 -$ pc_plus_2 [2] $end
$var wire 1 .$ pc_plus_2 [1] $end
$var wire 1 /$ pc_plus_2 [0] $end
$var wire 1 P$ readData2 [15] $end
$var wire 1 Q$ readData2 [14] $end
$var wire 1 R$ readData2 [13] $end
$var wire 1 S$ readData2 [12] $end
$var wire 1 T$ readData2 [11] $end
$var wire 1 U$ readData2 [10] $end
$var wire 1 V$ readData2 [9] $end
$var wire 1 W$ readData2 [8] $end
$var wire 1 X$ readData2 [7] $end
$var wire 1 Y$ readData2 [6] $end
$var wire 1 Z$ readData2 [5] $end
$var wire 1 [$ readData2 [4] $end
$var wire 1 \$ readData2 [3] $end
$var wire 1 ]$ readData2 [2] $end
$var wire 1 ^$ readData2 [1] $end
$var wire 1 _$ readData2 [0] $end
$var wire 1 p" aluResult [15] $end
$var wire 1 q" aluResult [14] $end
$var wire 1 r" aluResult [13] $end
$var wire 1 s" aluResult [12] $end
$var wire 1 t" aluResult [11] $end
$var wire 1 u" aluResult [10] $end
$var wire 1 v" aluResult [9] $end
$var wire 1 w" aluResult [8] $end
$var wire 1 x" aluResult [7] $end
$var wire 1 y" aluResult [6] $end
$var wire 1 z" aluResult [5] $end
$var wire 1 {" aluResult [4] $end
$var wire 1 |" aluResult [3] $end
$var wire 1 }" aluResult [2] $end
$var wire 1 ~" aluResult [1] $end
$var wire 1 !# aluResult [0] $end
$var wire 1 g$ HALT $end
$var wire 1 h$ writeR7 $end
$var wire 1 i$ memToReg $end
$var wire 1 j$ memRead $end
$var wire 1 k$ memWrite $end
$var wire 1 m$ regWrite $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 FB en $end
$var wire 1 `$ writeRegSel [2] $end
$var wire 1 a$ writeRegSel [1] $end
$var wire 1 b$ writeRegSel [0] $end
$var wire 1 ~$ pc_plus_2_XM [15] $end
$var wire 1 !% pc_plus_2_XM [14] $end
$var wire 1 "% pc_plus_2_XM [13] $end
$var wire 1 #% pc_plus_2_XM [12] $end
$var wire 1 $% pc_plus_2_XM [11] $end
$var wire 1 %% pc_plus_2_XM [10] $end
$var wire 1 &% pc_plus_2_XM [9] $end
$var wire 1 '% pc_plus_2_XM [8] $end
$var wire 1 (% pc_plus_2_XM [7] $end
$var wire 1 )% pc_plus_2_XM [6] $end
$var wire 1 *% pc_plus_2_XM [5] $end
$var wire 1 +% pc_plus_2_XM [4] $end
$var wire 1 ,% pc_plus_2_XM [3] $end
$var wire 1 -% pc_plus_2_XM [2] $end
$var wire 1 .% pc_plus_2_XM [1] $end
$var wire 1 /% pc_plus_2_XM [0] $end
$var wire 1 0% readData2_XM [15] $end
$var wire 1 1% readData2_XM [14] $end
$var wire 1 2% readData2_XM [13] $end
$var wire 1 3% readData2_XM [12] $end
$var wire 1 4% readData2_XM [11] $end
$var wire 1 5% readData2_XM [10] $end
$var wire 1 6% readData2_XM [9] $end
$var wire 1 7% readData2_XM [8] $end
$var wire 1 8% readData2_XM [7] $end
$var wire 1 9% readData2_XM [6] $end
$var wire 1 :% readData2_XM [5] $end
$var wire 1 ;% readData2_XM [4] $end
$var wire 1 <% readData2_XM [3] $end
$var wire 1 =% readData2_XM [2] $end
$var wire 1 >% readData2_XM [1] $end
$var wire 1 ?% readData2_XM [0] $end
$var wire 1 n$ aluResult_XM [15] $end
$var wire 1 o$ aluResult_XM [14] $end
$var wire 1 p$ aluResult_XM [13] $end
$var wire 1 q$ aluResult_XM [12] $end
$var wire 1 r$ aluResult_XM [11] $end
$var wire 1 s$ aluResult_XM [10] $end
$var wire 1 t$ aluResult_XM [9] $end
$var wire 1 u$ aluResult_XM [8] $end
$var wire 1 v$ aluResult_XM [7] $end
$var wire 1 w$ aluResult_XM [6] $end
$var wire 1 x$ aluResult_XM [5] $end
$var wire 1 y$ aluResult_XM [4] $end
$var wire 1 z$ aluResult_XM [3] $end
$var wire 1 {$ aluResult_XM [2] $end
$var wire 1 |$ aluResult_XM [1] $end
$var wire 1 }$ aluResult_XM [0] $end
$var wire 1 C% HALT_XM $end
$var wire 1 D% writeR7_XM $end
$var wire 1 E% memToReg_XM $end
$var wire 1 F% memRead_XM $end
$var wire 1 G% memWrite_XM $end
$var wire 1 H% regWrite_XM $end
$var wire 1 @% writeRegSel_XM [2] $end
$var wire 1 A% writeRegSel_XM [1] $end
$var wire 1 B% writeRegSel_XM [0] $end

$scope module pc_plus_2_XM_reg $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 FB en $end
$var wire 1 ~# data_in [15] $end
$var wire 1 !$ data_in [14] $end
$var wire 1 "$ data_in [13] $end
$var wire 1 #$ data_in [12] $end
$var wire 1 $$ data_in [11] $end
$var wire 1 %$ data_in [10] $end
$var wire 1 &$ data_in [9] $end
$var wire 1 '$ data_in [8] $end
$var wire 1 ($ data_in [7] $end
$var wire 1 )$ data_in [6] $end
$var wire 1 *$ data_in [5] $end
$var wire 1 +$ data_in [4] $end
$var wire 1 ,$ data_in [3] $end
$var wire 1 -$ data_in [2] $end
$var wire 1 .$ data_in [1] $end
$var wire 1 /$ data_in [0] $end
$var wire 1 ~$ state [15] $end
$var wire 1 !% state [14] $end
$var wire 1 "% state [13] $end
$var wire 1 #% state [12] $end
$var wire 1 $% state [11] $end
$var wire 1 %% state [10] $end
$var wire 1 &% state [9] $end
$var wire 1 '% state [8] $end
$var wire 1 (% state [7] $end
$var wire 1 )% state [6] $end
$var wire 1 *% state [5] $end
$var wire 1 +% state [4] $end
$var wire 1 ,% state [3] $end
$var wire 1 -% state [2] $end
$var wire 1 .% state [1] $end
$var wire 1 /% state [0] $end

$scope module dff0 $end
$var wire 1 FB en $end
$var wire 1 /$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 /% q $end
$var wire 1 GB data $end

$scope module DFF $end
$var wire 1 /% q $end
$var wire 1 GB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 HB state $end
$upscope $end
$upscope $end

$scope module dff1 $end
$var wire 1 FB en $end
$var wire 1 .$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 .% q $end
$var wire 1 IB data $end

$scope module DFF $end
$var wire 1 .% q $end
$var wire 1 IB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 JB state $end
$upscope $end
$upscope $end

$scope module dff2 $end
$var wire 1 FB en $end
$var wire 1 -$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 -% q $end
$var wire 1 KB data $end

$scope module DFF $end
$var wire 1 -% q $end
$var wire 1 KB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 LB state $end
$upscope $end
$upscope $end

$scope module dff3 $end
$var wire 1 FB en $end
$var wire 1 ,$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ,% q $end
$var wire 1 MB data $end

$scope module DFF $end
$var wire 1 ,% q $end
$var wire 1 MB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 NB state $end
$upscope $end
$upscope $end

$scope module dff4 $end
$var wire 1 FB en $end
$var wire 1 +$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 +% q $end
$var wire 1 OB data $end

$scope module DFF $end
$var wire 1 +% q $end
$var wire 1 OB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 PB state $end
$upscope $end
$upscope $end

$scope module dff5 $end
$var wire 1 FB en $end
$var wire 1 *$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 *% q $end
$var wire 1 QB data $end

$scope module DFF $end
$var wire 1 *% q $end
$var wire 1 QB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 RB state $end
$upscope $end
$upscope $end

$scope module dff6 $end
$var wire 1 FB en $end
$var wire 1 )$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 )% q $end
$var wire 1 SB data $end

$scope module DFF $end
$var wire 1 )% q $end
$var wire 1 SB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 TB state $end
$upscope $end
$upscope $end

$scope module dff7 $end
$var wire 1 FB en $end
$var wire 1 ($ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 (% q $end
$var wire 1 UB data $end

$scope module DFF $end
$var wire 1 (% q $end
$var wire 1 UB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 VB state $end
$upscope $end
$upscope $end

$scope module dff8 $end
$var wire 1 FB en $end
$var wire 1 '$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 '% q $end
$var wire 1 WB data $end

$scope module DFF $end
$var wire 1 '% q $end
$var wire 1 WB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 XB state $end
$upscope $end
$upscope $end

$scope module dff9 $end
$var wire 1 FB en $end
$var wire 1 &$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 &% q $end
$var wire 1 YB data $end

$scope module DFF $end
$var wire 1 &% q $end
$var wire 1 YB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ZB state $end
$upscope $end
$upscope $end

$scope module dff10 $end
$var wire 1 FB en $end
$var wire 1 %$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 %% q $end
$var wire 1 [B data $end

$scope module DFF $end
$var wire 1 %% q $end
$var wire 1 [B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \B state $end
$upscope $end
$upscope $end

$scope module dff11 $end
$var wire 1 FB en $end
$var wire 1 $$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 $% q $end
$var wire 1 ]B data $end

$scope module DFF $end
$var wire 1 $% q $end
$var wire 1 ]B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^B state $end
$upscope $end
$upscope $end

$scope module dff12 $end
$var wire 1 FB en $end
$var wire 1 #$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 #% q $end
$var wire 1 _B data $end

$scope module DFF $end
$var wire 1 #% q $end
$var wire 1 _B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `B state $end
$upscope $end
$upscope $end

$scope module dff13 $end
$var wire 1 FB en $end
$var wire 1 "$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 "% q $end
$var wire 1 aB data $end

$scope module DFF $end
$var wire 1 "% q $end
$var wire 1 aB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 bB state $end
$upscope $end
$upscope $end

$scope module dff14 $end
$var wire 1 FB en $end
$var wire 1 !$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 !% q $end
$var wire 1 cB data $end

$scope module DFF $end
$var wire 1 !% q $end
$var wire 1 cB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 dB state $end
$upscope $end
$upscope $end

$scope module dff15 $end
$var wire 1 FB en $end
$var wire 1 ~# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~$ q $end
$var wire 1 eB data $end

$scope module DFF $end
$var wire 1 ~$ q $end
$var wire 1 eB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 fB state $end
$upscope $end
$upscope $end
$upscope $end

$scope module readData2_XM_reg $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 FB en $end
$var wire 1 P$ data_in [15] $end
$var wire 1 Q$ data_in [14] $end
$var wire 1 R$ data_in [13] $end
$var wire 1 S$ data_in [12] $end
$var wire 1 T$ data_in [11] $end
$var wire 1 U$ data_in [10] $end
$var wire 1 V$ data_in [9] $end
$var wire 1 W$ data_in [8] $end
$var wire 1 X$ data_in [7] $end
$var wire 1 Y$ data_in [6] $end
$var wire 1 Z$ data_in [5] $end
$var wire 1 [$ data_in [4] $end
$var wire 1 \$ data_in [3] $end
$var wire 1 ]$ data_in [2] $end
$var wire 1 ^$ data_in [1] $end
$var wire 1 _$ data_in [0] $end
$var wire 1 0% state [15] $end
$var wire 1 1% state [14] $end
$var wire 1 2% state [13] $end
$var wire 1 3% state [12] $end
$var wire 1 4% state [11] $end
$var wire 1 5% state [10] $end
$var wire 1 6% state [9] $end
$var wire 1 7% state [8] $end
$var wire 1 8% state [7] $end
$var wire 1 9% state [6] $end
$var wire 1 :% state [5] $end
$var wire 1 ;% state [4] $end
$var wire 1 <% state [3] $end
$var wire 1 =% state [2] $end
$var wire 1 >% state [1] $end
$var wire 1 ?% state [0] $end

$scope module dff0 $end
$var wire 1 FB en $end
$var wire 1 _$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ?% q $end
$var wire 1 gB data $end

$scope module DFF $end
$var wire 1 ?% q $end
$var wire 1 gB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 hB state $end
$upscope $end
$upscope $end

$scope module dff1 $end
$var wire 1 FB en $end
$var wire 1 ^$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 >% q $end
$var wire 1 iB data $end

$scope module DFF $end
$var wire 1 >% q $end
$var wire 1 iB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 jB state $end
$upscope $end
$upscope $end

$scope module dff2 $end
$var wire 1 FB en $end
$var wire 1 ]$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 =% q $end
$var wire 1 kB data $end

$scope module DFF $end
$var wire 1 =% q $end
$var wire 1 kB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 lB state $end
$upscope $end
$upscope $end

$scope module dff3 $end
$var wire 1 FB en $end
$var wire 1 \$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <% q $end
$var wire 1 mB data $end

$scope module DFF $end
$var wire 1 <% q $end
$var wire 1 mB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 nB state $end
$upscope $end
$upscope $end

$scope module dff4 $end
$var wire 1 FB en $end
$var wire 1 [$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ;% q $end
$var wire 1 oB data $end

$scope module DFF $end
$var wire 1 ;% q $end
$var wire 1 oB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 pB state $end
$upscope $end
$upscope $end

$scope module dff5 $end
$var wire 1 FB en $end
$var wire 1 Z$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 :% q $end
$var wire 1 qB data $end

$scope module DFF $end
$var wire 1 :% q $end
$var wire 1 qB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 rB state $end
$upscope $end
$upscope $end

$scope module dff6 $end
$var wire 1 FB en $end
$var wire 1 Y$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9% q $end
$var wire 1 sB data $end

$scope module DFF $end
$var wire 1 9% q $end
$var wire 1 sB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 tB state $end
$upscope $end
$upscope $end

$scope module dff7 $end
$var wire 1 FB en $end
$var wire 1 X$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 8% q $end
$var wire 1 uB data $end

$scope module DFF $end
$var wire 1 8% q $end
$var wire 1 uB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 vB state $end
$upscope $end
$upscope $end

$scope module dff8 $end
$var wire 1 FB en $end
$var wire 1 W$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 7% q $end
$var wire 1 wB data $end

$scope module DFF $end
$var wire 1 7% q $end
$var wire 1 wB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 xB state $end
$upscope $end
$upscope $end

$scope module dff9 $end
$var wire 1 FB en $end
$var wire 1 V$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 6% q $end
$var wire 1 yB data $end

$scope module DFF $end
$var wire 1 6% q $end
$var wire 1 yB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 zB state $end
$upscope $end
$upscope $end

$scope module dff10 $end
$var wire 1 FB en $end
$var wire 1 U$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 5% q $end
$var wire 1 {B data $end

$scope module DFF $end
$var wire 1 5% q $end
$var wire 1 {B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 |B state $end
$upscope $end
$upscope $end

$scope module dff11 $end
$var wire 1 FB en $end
$var wire 1 T$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 4% q $end
$var wire 1 }B data $end

$scope module DFF $end
$var wire 1 4% q $end
$var wire 1 }B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ~B state $end
$upscope $end
$upscope $end

$scope module dff12 $end
$var wire 1 FB en $end
$var wire 1 S$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 3% q $end
$var wire 1 !C data $end

$scope module DFF $end
$var wire 1 3% q $end
$var wire 1 !C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 "C state $end
$upscope $end
$upscope $end

$scope module dff13 $end
$var wire 1 FB en $end
$var wire 1 R$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 2% q $end
$var wire 1 #C data $end

$scope module DFF $end
$var wire 1 2% q $end
$var wire 1 #C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 $C state $end
$upscope $end
$upscope $end

$scope module dff14 $end
$var wire 1 FB en $end
$var wire 1 Q$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 1% q $end
$var wire 1 %C data $end

$scope module DFF $end
$var wire 1 1% q $end
$var wire 1 %C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 &C state $end
$upscope $end
$upscope $end

$scope module dff15 $end
$var wire 1 FB en $end
$var wire 1 P$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 0% q $end
$var wire 1 'C data $end

$scope module DFF $end
$var wire 1 0% q $end
$var wire 1 'C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 (C state $end
$upscope $end
$upscope $end
$upscope $end

$scope module aluResult_reg $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 FB en $end
$var wire 1 p" data_in [15] $end
$var wire 1 q" data_in [14] $end
$var wire 1 r" data_in [13] $end
$var wire 1 s" data_in [12] $end
$var wire 1 t" data_in [11] $end
$var wire 1 u" data_in [10] $end
$var wire 1 v" data_in [9] $end
$var wire 1 w" data_in [8] $end
$var wire 1 x" data_in [7] $end
$var wire 1 y" data_in [6] $end
$var wire 1 z" data_in [5] $end
$var wire 1 {" data_in [4] $end
$var wire 1 |" data_in [3] $end
$var wire 1 }" data_in [2] $end
$var wire 1 ~" data_in [1] $end
$var wire 1 !# data_in [0] $end
$var wire 1 n$ state [15] $end
$var wire 1 o$ state [14] $end
$var wire 1 p$ state [13] $end
$var wire 1 q$ state [12] $end
$var wire 1 r$ state [11] $end
$var wire 1 s$ state [10] $end
$var wire 1 t$ state [9] $end
$var wire 1 u$ state [8] $end
$var wire 1 v$ state [7] $end
$var wire 1 w$ state [6] $end
$var wire 1 x$ state [5] $end
$var wire 1 y$ state [4] $end
$var wire 1 z$ state [3] $end
$var wire 1 {$ state [2] $end
$var wire 1 |$ state [1] $end
$var wire 1 }$ state [0] $end

$scope module dff0 $end
$var wire 1 FB en $end
$var wire 1 !# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 }$ q $end
$var wire 1 )C data $end

$scope module DFF $end
$var wire 1 }$ q $end
$var wire 1 )C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *C state $end
$upscope $end
$upscope $end

$scope module dff1 $end
$var wire 1 FB en $end
$var wire 1 ~" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 |$ q $end
$var wire 1 +C data $end

$scope module DFF $end
$var wire 1 |$ q $end
$var wire 1 +C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,C state $end
$upscope $end
$upscope $end

$scope module dff2 $end
$var wire 1 FB en $end
$var wire 1 }" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 {$ q $end
$var wire 1 -C data $end

$scope module DFF $end
$var wire 1 {$ q $end
$var wire 1 -C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 .C state $end
$upscope $end
$upscope $end

$scope module dff3 $end
$var wire 1 FB en $end
$var wire 1 |" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 z$ q $end
$var wire 1 /C data $end

$scope module DFF $end
$var wire 1 z$ q $end
$var wire 1 /C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 0C state $end
$upscope $end
$upscope $end

$scope module dff4 $end
$var wire 1 FB en $end
$var wire 1 {" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 y$ q $end
$var wire 1 1C data $end

$scope module DFF $end
$var wire 1 y$ q $end
$var wire 1 1C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 2C state $end
$upscope $end
$upscope $end

$scope module dff5 $end
$var wire 1 FB en $end
$var wire 1 z" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 x$ q $end
$var wire 1 3C data $end

$scope module DFF $end
$var wire 1 x$ q $end
$var wire 1 3C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 4C state $end
$upscope $end
$upscope $end

$scope module dff6 $end
$var wire 1 FB en $end
$var wire 1 y" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 w$ q $end
$var wire 1 5C data $end

$scope module DFF $end
$var wire 1 w$ q $end
$var wire 1 5C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 6C state $end
$upscope $end
$upscope $end

$scope module dff7 $end
$var wire 1 FB en $end
$var wire 1 x" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 v$ q $end
$var wire 1 7C data $end

$scope module DFF $end
$var wire 1 v$ q $end
$var wire 1 7C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 8C state $end
$upscope $end
$upscope $end

$scope module dff8 $end
$var wire 1 FB en $end
$var wire 1 w" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 u$ q $end
$var wire 1 9C data $end

$scope module DFF $end
$var wire 1 u$ q $end
$var wire 1 9C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :C state $end
$upscope $end
$upscope $end

$scope module dff9 $end
$var wire 1 FB en $end
$var wire 1 v" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 t$ q $end
$var wire 1 ;C data $end

$scope module DFF $end
$var wire 1 t$ q $end
$var wire 1 ;C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 <C state $end
$upscope $end
$upscope $end

$scope module dff10 $end
$var wire 1 FB en $end
$var wire 1 u" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 s$ q $end
$var wire 1 =C data $end

$scope module DFF $end
$var wire 1 s$ q $end
$var wire 1 =C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >C state $end
$upscope $end
$upscope $end

$scope module dff11 $end
$var wire 1 FB en $end
$var wire 1 t" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 r$ q $end
$var wire 1 ?C data $end

$scope module DFF $end
$var wire 1 r$ q $end
$var wire 1 ?C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @C state $end
$upscope $end
$upscope $end

$scope module dff12 $end
$var wire 1 FB en $end
$var wire 1 s" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 q$ q $end
$var wire 1 AC data $end

$scope module DFF $end
$var wire 1 q$ q $end
$var wire 1 AC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 BC state $end
$upscope $end
$upscope $end

$scope module dff13 $end
$var wire 1 FB en $end
$var wire 1 r" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 p$ q $end
$var wire 1 CC data $end

$scope module DFF $end
$var wire 1 p$ q $end
$var wire 1 CC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 DC state $end
$upscope $end
$upscope $end

$scope module dff14 $end
$var wire 1 FB en $end
$var wire 1 q" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 o$ q $end
$var wire 1 EC data $end

$scope module DFF $end
$var wire 1 o$ q $end
$var wire 1 EC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 FC state $end
$upscope $end
$upscope $end

$scope module dff15 $end
$var wire 1 FB en $end
$var wire 1 p" d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 n$ q $end
$var wire 1 GC data $end

$scope module DFF $end
$var wire 1 n$ q $end
$var wire 1 GC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 HC state $end
$upscope $end
$upscope $end
$upscope $end

$scope module HALT_XM_reg $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 FB en $end
$var wire 1 g$ data_in $end
$var wire 1 C% state $end

$scope module dff0 $end
$var wire 1 FB en $end
$var wire 1 g$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 C% q $end
$var wire 1 IC data $end

$scope module DFF $end
$var wire 1 C% q $end
$var wire 1 IC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 JC state $end
$upscope $end
$upscope $end
$upscope $end

$scope module writeR7_XM_reg $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 FB en $end
$var wire 1 h$ data_in $end
$var wire 1 D% state $end

$scope module dff0 $end
$var wire 1 FB en $end
$var wire 1 h$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 D% q $end
$var wire 1 KC data $end

$scope module DFF $end
$var wire 1 D% q $end
$var wire 1 KC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 LC state $end
$upscope $end
$upscope $end
$upscope $end

$scope module memToReg_XM_reg $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 FB en $end
$var wire 1 i$ data_in $end
$var wire 1 E% state $end

$scope module dff0 $end
$var wire 1 FB en $end
$var wire 1 i$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 E% q $end
$var wire 1 MC data $end

$scope module DFF $end
$var wire 1 E% q $end
$var wire 1 MC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 NC state $end
$upscope $end
$upscope $end
$upscope $end

$scope module memRead_XM_reg $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 FB en $end
$var wire 1 j$ data_in $end
$var wire 1 F% state $end

$scope module dff0 $end
$var wire 1 FB en $end
$var wire 1 j$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 F% q $end
$var wire 1 OC data $end

$scope module DFF $end
$var wire 1 F% q $end
$var wire 1 OC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 PC state $end
$upscope $end
$upscope $end
$upscope $end

$scope module memWrite_XM_reg $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 FB en $end
$var wire 1 k$ data_in $end
$var wire 1 G% state $end

$scope module dff0 $end
$var wire 1 FB en $end
$var wire 1 k$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 G% q $end
$var wire 1 QC data $end

$scope module DFF $end
$var wire 1 G% q $end
$var wire 1 QC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 RC state $end
$upscope $end
$upscope $end
$upscope $end

$scope module regWrite_XM_reg $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 FB en $end
$var wire 1 m$ data_in $end
$var wire 1 H% state $end

$scope module dff0 $end
$var wire 1 FB en $end
$var wire 1 m$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 H% q $end
$var wire 1 SC data $end

$scope module DFF $end
$var wire 1 H% q $end
$var wire 1 SC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 TC state $end
$upscope $end
$upscope $end
$upscope $end

$scope module writeRegSel_XM_reg $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 FB en $end
$var wire 1 `$ data_in [2] $end
$var wire 1 a$ data_in [1] $end
$var wire 1 b$ data_in [0] $end
$var wire 1 @% state [2] $end
$var wire 1 A% state [1] $end
$var wire 1 B% state [0] $end

$scope module dff0 $end
$var wire 1 FB en $end
$var wire 1 b$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 B% q $end
$var wire 1 UC data $end

$scope module DFF $end
$var wire 1 B% q $end
$var wire 1 UC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 VC state $end
$upscope $end
$upscope $end

$scope module dff1 $end
$var wire 1 FB en $end
$var wire 1 a$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 A% q $end
$var wire 1 WC data $end

$scope module DFF $end
$var wire 1 A% q $end
$var wire 1 WC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 XC state $end
$upscope $end
$upscope $end

$scope module dff2 $end
$var wire 1 FB en $end
$var wire 1 `$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 @% q $end
$var wire 1 YC data $end

$scope module DFF $end
$var wire 1 @% q $end
$var wire 1 YC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ZC state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module memory0 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 G% memWrite $end
$var wire 1 F% memRead $end
$var wire 1 0% writeData [15] $end
$var wire 1 1% writeData [14] $end
$var wire 1 2% writeData [13] $end
$var wire 1 3% writeData [12] $end
$var wire 1 4% writeData [11] $end
$var wire 1 5% writeData [10] $end
$var wire 1 6% writeData [9] $end
$var wire 1 7% writeData [8] $end
$var wire 1 8% writeData [7] $end
$var wire 1 9% writeData [6] $end
$var wire 1 :% writeData [5] $end
$var wire 1 ;% writeData [4] $end
$var wire 1 <% writeData [3] $end
$var wire 1 =% writeData [2] $end
$var wire 1 >% writeData [1] $end
$var wire 1 ?% writeData [0] $end
$var wire 1 n$ aluResult [15] $end
$var wire 1 o$ aluResult [14] $end
$var wire 1 p$ aluResult [13] $end
$var wire 1 q$ aluResult [12] $end
$var wire 1 r$ aluResult [11] $end
$var wire 1 s$ aluResult [10] $end
$var wire 1 t$ aluResult [9] $end
$var wire 1 u$ aluResult [8] $end
$var wire 1 v$ aluResult [7] $end
$var wire 1 w$ aluResult [6] $end
$var wire 1 x$ aluResult [5] $end
$var wire 1 y$ aluResult [4] $end
$var wire 1 z$ aluResult [3] $end
$var wire 1 {$ aluResult [2] $end
$var wire 1 |$ aluResult [1] $end
$var wire 1 }$ aluResult [0] $end
$var wire 1 !& HALT $end
$var wire 1 [C memReadorWrite $end
$var wire 1 \C mrow_i $end
$var wire 1 "# readData [15] $end
$var wire 1 ## readData [14] $end
$var wire 1 $# readData [13] $end
$var wire 1 %# readData [12] $end
$var wire 1 &# readData [11] $end
$var wire 1 '# readData [10] $end
$var wire 1 (# readData [9] $end
$var wire 1 )# readData [8] $end
$var wire 1 *# readData [7] $end
$var wire 1 +# readData [6] $end
$var wire 1 ,# readData [5] $end
$var wire 1 -# readData [4] $end
$var wire 1 .# readData [3] $end
$var wire 1 /# readData [2] $end
$var wire 1 0# readData [1] $end
$var wire 1 1# readData [0] $end

$scope module READ_OR_WRITE $end
$var wire 1 F% in1 $end
$var wire 1 G% in2 $end
$var wire 1 \C out $end
$upscope $end

$scope module NOT0 $end
$var wire 1 \C in1 $end
$var wire 1 [C out $end
$upscope $end

$scope module DATA_MEM $end
$var wire 1 "# data_out [15] $end
$var wire 1 ## data_out [14] $end
$var wire 1 $# data_out [13] $end
$var wire 1 %# data_out [12] $end
$var wire 1 &# data_out [11] $end
$var wire 1 '# data_out [10] $end
$var wire 1 (# data_out [9] $end
$var wire 1 )# data_out [8] $end
$var wire 1 *# data_out [7] $end
$var wire 1 +# data_out [6] $end
$var wire 1 ,# data_out [5] $end
$var wire 1 -# data_out [4] $end
$var wire 1 .# data_out [3] $end
$var wire 1 /# data_out [2] $end
$var wire 1 0# data_out [1] $end
$var wire 1 1# data_out [0] $end
$var wire 1 0% data_in [15] $end
$var wire 1 1% data_in [14] $end
$var wire 1 2% data_in [13] $end
$var wire 1 3% data_in [12] $end
$var wire 1 4% data_in [11] $end
$var wire 1 5% data_in [10] $end
$var wire 1 6% data_in [9] $end
$var wire 1 7% data_in [8] $end
$var wire 1 8% data_in [7] $end
$var wire 1 9% data_in [6] $end
$var wire 1 :% data_in [5] $end
$var wire 1 ;% data_in [4] $end
$var wire 1 <% data_in [3] $end
$var wire 1 =% data_in [2] $end
$var wire 1 >% data_in [1] $end
$var wire 1 ?% data_in [0] $end
$var wire 1 n$ addr [15] $end
$var wire 1 o$ addr [14] $end
$var wire 1 p$ addr [13] $end
$var wire 1 q$ addr [12] $end
$var wire 1 r$ addr [11] $end
$var wire 1 s$ addr [10] $end
$var wire 1 t$ addr [9] $end
$var wire 1 u$ addr [8] $end
$var wire 1 v$ addr [7] $end
$var wire 1 w$ addr [6] $end
$var wire 1 x$ addr [5] $end
$var wire 1 y$ addr [4] $end
$var wire 1 z$ addr [3] $end
$var wire 1 {$ addr [2] $end
$var wire 1 |$ addr [1] $end
$var wire 1 }$ addr [0] $end
$var wire 1 [C enable $end
$var wire 1 G% wr $end
$var wire 1 !& createdump $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ]C loaded $end
$var reg 17 ^C largest [16:0] $end
$var integer 32 _C mcd $end
$var integer 32 `C i $end
$upscope $end
$upscope $end

$scope module mem_wb $end
$var wire 1 ~$ pc_plus_2 [15] $end
$var wire 1 !% pc_plus_2 [14] $end
$var wire 1 "% pc_plus_2 [13] $end
$var wire 1 #% pc_plus_2 [12] $end
$var wire 1 $% pc_plus_2 [11] $end
$var wire 1 %% pc_plus_2 [10] $end
$var wire 1 &% pc_plus_2 [9] $end
$var wire 1 '% pc_plus_2 [8] $end
$var wire 1 (% pc_plus_2 [7] $end
$var wire 1 )% pc_plus_2 [6] $end
$var wire 1 *% pc_plus_2 [5] $end
$var wire 1 +% pc_plus_2 [4] $end
$var wire 1 ,% pc_plus_2 [3] $end
$var wire 1 -% pc_plus_2 [2] $end
$var wire 1 .% pc_plus_2 [1] $end
$var wire 1 /% pc_plus_2 [0] $end
$var wire 1 n$ aluResult [15] $end
$var wire 1 o$ aluResult [14] $end
$var wire 1 p$ aluResult [13] $end
$var wire 1 q$ aluResult [12] $end
$var wire 1 r$ aluResult [11] $end
$var wire 1 s$ aluResult [10] $end
$var wire 1 t$ aluResult [9] $end
$var wire 1 u$ aluResult [8] $end
$var wire 1 v$ aluResult [7] $end
$var wire 1 w$ aluResult [6] $end
$var wire 1 x$ aluResult [5] $end
$var wire 1 y$ aluResult [4] $end
$var wire 1 z$ aluResult [3] $end
$var wire 1 {$ aluResult [2] $end
$var wire 1 |$ aluResult [1] $end
$var wire 1 }$ aluResult [0] $end
$var wire 1 "# readFromMem [15] $end
$var wire 1 ## readFromMem [14] $end
$var wire 1 $# readFromMem [13] $end
$var wire 1 %# readFromMem [12] $end
$var wire 1 &# readFromMem [11] $end
$var wire 1 '# readFromMem [10] $end
$var wire 1 (# readFromMem [9] $end
$var wire 1 )# readFromMem [8] $end
$var wire 1 *# readFromMem [7] $end
$var wire 1 +# readFromMem [6] $end
$var wire 1 ,# readFromMem [5] $end
$var wire 1 -# readFromMem [4] $end
$var wire 1 .# readFromMem [3] $end
$var wire 1 /# readFromMem [2] $end
$var wire 1 0# readFromMem [1] $end
$var wire 1 1# readFromMem [0] $end
$var wire 1 D% writeR7 $end
$var wire 1 E% memToReg $end
$var wire 1 H% regWrite $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 aC en $end
$var wire 1 C% HALT $end
$var wire 1 @% writeRegSel [2] $end
$var wire 1 A% writeRegSel [1] $end
$var wire 1 B% writeRegSel [0] $end
$var wire 1 i% pc_plus_2_MWB [15] $end
$var wire 1 j% pc_plus_2_MWB [14] $end
$var wire 1 k% pc_plus_2_MWB [13] $end
$var wire 1 l% pc_plus_2_MWB [12] $end
$var wire 1 m% pc_plus_2_MWB [11] $end
$var wire 1 n% pc_plus_2_MWB [10] $end
$var wire 1 o% pc_plus_2_MWB [9] $end
$var wire 1 p% pc_plus_2_MWB [8] $end
$var wire 1 q% pc_plus_2_MWB [7] $end
$var wire 1 r% pc_plus_2_MWB [6] $end
$var wire 1 s% pc_plus_2_MWB [5] $end
$var wire 1 t% pc_plus_2_MWB [4] $end
$var wire 1 u% pc_plus_2_MWB [3] $end
$var wire 1 v% pc_plus_2_MWB [2] $end
$var wire 1 w% pc_plus_2_MWB [1] $end
$var wire 1 x% pc_plus_2_MWB [0] $end
$var wire 1 Y% aluResult_MWB [15] $end
$var wire 1 Z% aluResult_MWB [14] $end
$var wire 1 [% aluResult_MWB [13] $end
$var wire 1 \% aluResult_MWB [12] $end
$var wire 1 ]% aluResult_MWB [11] $end
$var wire 1 ^% aluResult_MWB [10] $end
$var wire 1 _% aluResult_MWB [9] $end
$var wire 1 `% aluResult_MWB [8] $end
$var wire 1 a% aluResult_MWB [7] $end
$var wire 1 b% aluResult_MWB [6] $end
$var wire 1 c% aluResult_MWB [5] $end
$var wire 1 d% aluResult_MWB [4] $end
$var wire 1 e% aluResult_MWB [3] $end
$var wire 1 f% aluResult_MWB [2] $end
$var wire 1 g% aluResult_MWB [1] $end
$var wire 1 h% aluResult_MWB [0] $end
$var wire 1 I% readFromMem_MWB [15] $end
$var wire 1 J% readFromMem_MWB [14] $end
$var wire 1 K% readFromMem_MWB [13] $end
$var wire 1 L% readFromMem_MWB [12] $end
$var wire 1 M% readFromMem_MWB [11] $end
$var wire 1 N% readFromMem_MWB [10] $end
$var wire 1 O% readFromMem_MWB [9] $end
$var wire 1 P% readFromMem_MWB [8] $end
$var wire 1 Q% readFromMem_MWB [7] $end
$var wire 1 R% readFromMem_MWB [6] $end
$var wire 1 S% readFromMem_MWB [5] $end
$var wire 1 T% readFromMem_MWB [4] $end
$var wire 1 U% readFromMem_MWB [3] $end
$var wire 1 V% readFromMem_MWB [2] $end
$var wire 1 W% readFromMem_MWB [1] $end
$var wire 1 X% readFromMem_MWB [0] $end
$var wire 1 |% writeR7_MWB $end
$var wire 1 }% memToReg_MWB $end
$var wire 1 ~% regWrite_MWB $end
$var wire 1 !& HALT_MWB $end
$var wire 1 y% writeRegSel_MWB [2] $end
$var wire 1 z% writeRegSel_MWB [1] $end
$var wire 1 {% writeRegSel_MWB [0] $end

$scope module pc_plus_2_MWB_reg $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 aC en $end
$var wire 1 ~$ data_in [15] $end
$var wire 1 !% data_in [14] $end
$var wire 1 "% data_in [13] $end
$var wire 1 #% data_in [12] $end
$var wire 1 $% data_in [11] $end
$var wire 1 %% data_in [10] $end
$var wire 1 &% data_in [9] $end
$var wire 1 '% data_in [8] $end
$var wire 1 (% data_in [7] $end
$var wire 1 )% data_in [6] $end
$var wire 1 *% data_in [5] $end
$var wire 1 +% data_in [4] $end
$var wire 1 ,% data_in [3] $end
$var wire 1 -% data_in [2] $end
$var wire 1 .% data_in [1] $end
$var wire 1 /% data_in [0] $end
$var wire 1 i% state [15] $end
$var wire 1 j% state [14] $end
$var wire 1 k% state [13] $end
$var wire 1 l% state [12] $end
$var wire 1 m% state [11] $end
$var wire 1 n% state [10] $end
$var wire 1 o% state [9] $end
$var wire 1 p% state [8] $end
$var wire 1 q% state [7] $end
$var wire 1 r% state [6] $end
$var wire 1 s% state [5] $end
$var wire 1 t% state [4] $end
$var wire 1 u% state [3] $end
$var wire 1 v% state [2] $end
$var wire 1 w% state [1] $end
$var wire 1 x% state [0] $end

$scope module dff0 $end
$var wire 1 aC en $end
$var wire 1 /% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 x% q $end
$var wire 1 bC data $end

$scope module DFF $end
$var wire 1 x% q $end
$var wire 1 bC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 cC state $end
$upscope $end
$upscope $end

$scope module dff1 $end
$var wire 1 aC en $end
$var wire 1 .% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 w% q $end
$var wire 1 dC data $end

$scope module DFF $end
$var wire 1 w% q $end
$var wire 1 dC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 eC state $end
$upscope $end
$upscope $end

$scope module dff2 $end
$var wire 1 aC en $end
$var wire 1 -% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 v% q $end
$var wire 1 fC data $end

$scope module DFF $end
$var wire 1 v% q $end
$var wire 1 fC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 gC state $end
$upscope $end
$upscope $end

$scope module dff3 $end
$var wire 1 aC en $end
$var wire 1 ,% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 u% q $end
$var wire 1 hC data $end

$scope module DFF $end
$var wire 1 u% q $end
$var wire 1 hC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 iC state $end
$upscope $end
$upscope $end

$scope module dff4 $end
$var wire 1 aC en $end
$var wire 1 +% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 t% q $end
$var wire 1 jC data $end

$scope module DFF $end
$var wire 1 t% q $end
$var wire 1 jC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 kC state $end
$upscope $end
$upscope $end

$scope module dff5 $end
$var wire 1 aC en $end
$var wire 1 *% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 s% q $end
$var wire 1 lC data $end

$scope module DFF $end
$var wire 1 s% q $end
$var wire 1 lC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 mC state $end
$upscope $end
$upscope $end

$scope module dff6 $end
$var wire 1 aC en $end
$var wire 1 )% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 r% q $end
$var wire 1 nC data $end

$scope module DFF $end
$var wire 1 r% q $end
$var wire 1 nC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 oC state $end
$upscope $end
$upscope $end

$scope module dff7 $end
$var wire 1 aC en $end
$var wire 1 (% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 q% q $end
$var wire 1 pC data $end

$scope module DFF $end
$var wire 1 q% q $end
$var wire 1 pC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 qC state $end
$upscope $end
$upscope $end

$scope module dff8 $end
$var wire 1 aC en $end
$var wire 1 '% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 p% q $end
$var wire 1 rC data $end

$scope module DFF $end
$var wire 1 p% q $end
$var wire 1 rC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 sC state $end
$upscope $end
$upscope $end

$scope module dff9 $end
$var wire 1 aC en $end
$var wire 1 &% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 o% q $end
$var wire 1 tC data $end

$scope module DFF $end
$var wire 1 o% q $end
$var wire 1 tC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 uC state $end
$upscope $end
$upscope $end

$scope module dff10 $end
$var wire 1 aC en $end
$var wire 1 %% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 n% q $end
$var wire 1 vC data $end

$scope module DFF $end
$var wire 1 n% q $end
$var wire 1 vC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 wC state $end
$upscope $end
$upscope $end

$scope module dff11 $end
$var wire 1 aC en $end
$var wire 1 $% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 m% q $end
$var wire 1 xC data $end

$scope module DFF $end
$var wire 1 m% q $end
$var wire 1 xC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 yC state $end
$upscope $end
$upscope $end

$scope module dff12 $end
$var wire 1 aC en $end
$var wire 1 #% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 l% q $end
$var wire 1 zC data $end

$scope module DFF $end
$var wire 1 l% q $end
$var wire 1 zC d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 {C state $end
$upscope $end
$upscope $end

$scope module dff13 $end
$var wire 1 aC en $end
$var wire 1 "% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 k% q $end
$var wire 1 |C data $end

$scope module DFF $end
$var wire 1 k% q $end
$var wire 1 |C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 }C state $end
$upscope $end
$upscope $end

$scope module dff14 $end
$var wire 1 aC en $end
$var wire 1 !% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 j% q $end
$var wire 1 ~C data $end

$scope module DFF $end
$var wire 1 j% q $end
$var wire 1 ~C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 !D state $end
$upscope $end
$upscope $end

$scope module dff15 $end
$var wire 1 aC en $end
$var wire 1 ~$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 i% q $end
$var wire 1 "D data $end

$scope module DFF $end
$var wire 1 i% q $end
$var wire 1 "D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 #D state $end
$upscope $end
$upscope $end
$upscope $end

$scope module readFromMem_MWB_reg $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 aC en $end
$var wire 1 "# data_in [15] $end
$var wire 1 ## data_in [14] $end
$var wire 1 $# data_in [13] $end
$var wire 1 %# data_in [12] $end
$var wire 1 &# data_in [11] $end
$var wire 1 '# data_in [10] $end
$var wire 1 (# data_in [9] $end
$var wire 1 )# data_in [8] $end
$var wire 1 *# data_in [7] $end
$var wire 1 +# data_in [6] $end
$var wire 1 ,# data_in [5] $end
$var wire 1 -# data_in [4] $end
$var wire 1 .# data_in [3] $end
$var wire 1 /# data_in [2] $end
$var wire 1 0# data_in [1] $end
$var wire 1 1# data_in [0] $end
$var wire 1 I% state [15] $end
$var wire 1 J% state [14] $end
$var wire 1 K% state [13] $end
$var wire 1 L% state [12] $end
$var wire 1 M% state [11] $end
$var wire 1 N% state [10] $end
$var wire 1 O% state [9] $end
$var wire 1 P% state [8] $end
$var wire 1 Q% state [7] $end
$var wire 1 R% state [6] $end
$var wire 1 S% state [5] $end
$var wire 1 T% state [4] $end
$var wire 1 U% state [3] $end
$var wire 1 V% state [2] $end
$var wire 1 W% state [1] $end
$var wire 1 X% state [0] $end

$scope module dff0 $end
$var wire 1 aC en $end
$var wire 1 1# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 X% q $end
$var wire 1 $D data $end

$scope module DFF $end
$var wire 1 X% q $end
$var wire 1 $D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 %D state $end
$upscope $end
$upscope $end

$scope module dff1 $end
$var wire 1 aC en $end
$var wire 1 0# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 W% q $end
$var wire 1 &D data $end

$scope module DFF $end
$var wire 1 W% q $end
$var wire 1 &D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 'D state $end
$upscope $end
$upscope $end

$scope module dff2 $end
$var wire 1 aC en $end
$var wire 1 /# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 V% q $end
$var wire 1 (D data $end

$scope module DFF $end
$var wire 1 V% q $end
$var wire 1 (D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 )D state $end
$upscope $end
$upscope $end

$scope module dff3 $end
$var wire 1 aC en $end
$var wire 1 .# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U% q $end
$var wire 1 *D data $end

$scope module DFF $end
$var wire 1 U% q $end
$var wire 1 *D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 +D state $end
$upscope $end
$upscope $end

$scope module dff4 $end
$var wire 1 aC en $end
$var wire 1 -# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 T% q $end
$var wire 1 ,D data $end

$scope module DFF $end
$var wire 1 T% q $end
$var wire 1 ,D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 -D state $end
$upscope $end
$upscope $end

$scope module dff5 $end
$var wire 1 aC en $end
$var wire 1 ,# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 S% q $end
$var wire 1 .D data $end

$scope module DFF $end
$var wire 1 S% q $end
$var wire 1 .D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 /D state $end
$upscope $end
$upscope $end

$scope module dff6 $end
$var wire 1 aC en $end
$var wire 1 +# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 R% q $end
$var wire 1 0D data $end

$scope module DFF $end
$var wire 1 R% q $end
$var wire 1 0D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 1D state $end
$upscope $end
$upscope $end

$scope module dff7 $end
$var wire 1 aC en $end
$var wire 1 *# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 Q% q $end
$var wire 1 2D data $end

$scope module DFF $end
$var wire 1 Q% q $end
$var wire 1 2D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 3D state $end
$upscope $end
$upscope $end

$scope module dff8 $end
$var wire 1 aC en $end
$var wire 1 )# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 P% q $end
$var wire 1 4D data $end

$scope module DFF $end
$var wire 1 P% q $end
$var wire 1 4D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 5D state $end
$upscope $end
$upscope $end

$scope module dff9 $end
$var wire 1 aC en $end
$var wire 1 (# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 O% q $end
$var wire 1 6D data $end

$scope module DFF $end
$var wire 1 O% q $end
$var wire 1 6D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 7D state $end
$upscope $end
$upscope $end

$scope module dff10 $end
$var wire 1 aC en $end
$var wire 1 '# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 N% q $end
$var wire 1 8D data $end

$scope module DFF $end
$var wire 1 N% q $end
$var wire 1 8D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 9D state $end
$upscope $end
$upscope $end

$scope module dff11 $end
$var wire 1 aC en $end
$var wire 1 &# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 M% q $end
$var wire 1 :D data $end

$scope module DFF $end
$var wire 1 M% q $end
$var wire 1 :D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ;D state $end
$upscope $end
$upscope $end

$scope module dff12 $end
$var wire 1 aC en $end
$var wire 1 %# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 L% q $end
$var wire 1 <D data $end

$scope module DFF $end
$var wire 1 L% q $end
$var wire 1 <D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 =D state $end
$upscope $end
$upscope $end

$scope module dff13 $end
$var wire 1 aC en $end
$var wire 1 $# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 K% q $end
$var wire 1 >D data $end

$scope module DFF $end
$var wire 1 K% q $end
$var wire 1 >D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ?D state $end
$upscope $end
$upscope $end

$scope module dff14 $end
$var wire 1 aC en $end
$var wire 1 ## d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 J% q $end
$var wire 1 @D data $end

$scope module DFF $end
$var wire 1 J% q $end
$var wire 1 @D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 AD state $end
$upscope $end
$upscope $end

$scope module dff15 $end
$var wire 1 aC en $end
$var wire 1 "# d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 I% q $end
$var wire 1 BD data $end

$scope module DFF $end
$var wire 1 I% q $end
$var wire 1 BD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 CD state $end
$upscope $end
$upscope $end
$upscope $end

$scope module aluResult_MWB_reg $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 aC en $end
$var wire 1 n$ data_in [15] $end
$var wire 1 o$ data_in [14] $end
$var wire 1 p$ data_in [13] $end
$var wire 1 q$ data_in [12] $end
$var wire 1 r$ data_in [11] $end
$var wire 1 s$ data_in [10] $end
$var wire 1 t$ data_in [9] $end
$var wire 1 u$ data_in [8] $end
$var wire 1 v$ data_in [7] $end
$var wire 1 w$ data_in [6] $end
$var wire 1 x$ data_in [5] $end
$var wire 1 y$ data_in [4] $end
$var wire 1 z$ data_in [3] $end
$var wire 1 {$ data_in [2] $end
$var wire 1 |$ data_in [1] $end
$var wire 1 }$ data_in [0] $end
$var wire 1 Y% state [15] $end
$var wire 1 Z% state [14] $end
$var wire 1 [% state [13] $end
$var wire 1 \% state [12] $end
$var wire 1 ]% state [11] $end
$var wire 1 ^% state [10] $end
$var wire 1 _% state [9] $end
$var wire 1 `% state [8] $end
$var wire 1 a% state [7] $end
$var wire 1 b% state [6] $end
$var wire 1 c% state [5] $end
$var wire 1 d% state [4] $end
$var wire 1 e% state [3] $end
$var wire 1 f% state [2] $end
$var wire 1 g% state [1] $end
$var wire 1 h% state [0] $end

$scope module dff0 $end
$var wire 1 aC en $end
$var wire 1 }$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 h% q $end
$var wire 1 DD data $end

$scope module DFF $end
$var wire 1 h% q $end
$var wire 1 DD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ED state $end
$upscope $end
$upscope $end

$scope module dff1 $end
$var wire 1 aC en $end
$var wire 1 |$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 g% q $end
$var wire 1 FD data $end

$scope module DFF $end
$var wire 1 g% q $end
$var wire 1 FD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 GD state $end
$upscope $end
$upscope $end

$scope module dff2 $end
$var wire 1 aC en $end
$var wire 1 {$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 f% q $end
$var wire 1 HD data $end

$scope module DFF $end
$var wire 1 f% q $end
$var wire 1 HD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ID state $end
$upscope $end
$upscope $end

$scope module dff3 $end
$var wire 1 aC en $end
$var wire 1 z$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 e% q $end
$var wire 1 JD data $end

$scope module DFF $end
$var wire 1 e% q $end
$var wire 1 JD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 KD state $end
$upscope $end
$upscope $end

$scope module dff4 $end
$var wire 1 aC en $end
$var wire 1 y$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 d% q $end
$var wire 1 LD data $end

$scope module DFF $end
$var wire 1 d% q $end
$var wire 1 LD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 MD state $end
$upscope $end
$upscope $end

$scope module dff5 $end
$var wire 1 aC en $end
$var wire 1 x$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 c% q $end
$var wire 1 ND data $end

$scope module DFF $end
$var wire 1 c% q $end
$var wire 1 ND d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 OD state $end
$upscope $end
$upscope $end

$scope module dff6 $end
$var wire 1 aC en $end
$var wire 1 w$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 b% q $end
$var wire 1 PD data $end

$scope module DFF $end
$var wire 1 b% q $end
$var wire 1 PD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 QD state $end
$upscope $end
$upscope $end

$scope module dff7 $end
$var wire 1 aC en $end
$var wire 1 v$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 a% q $end
$var wire 1 RD data $end

$scope module DFF $end
$var wire 1 a% q $end
$var wire 1 RD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 SD state $end
$upscope $end
$upscope $end

$scope module dff8 $end
$var wire 1 aC en $end
$var wire 1 u$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 `% q $end
$var wire 1 TD data $end

$scope module DFF $end
$var wire 1 `% q $end
$var wire 1 TD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 UD state $end
$upscope $end
$upscope $end

$scope module dff9 $end
$var wire 1 aC en $end
$var wire 1 t$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 _% q $end
$var wire 1 VD data $end

$scope module DFF $end
$var wire 1 _% q $end
$var wire 1 VD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 WD state $end
$upscope $end
$upscope $end

$scope module dff10 $end
$var wire 1 aC en $end
$var wire 1 s$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ^% q $end
$var wire 1 XD data $end

$scope module DFF $end
$var wire 1 ^% q $end
$var wire 1 XD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 YD state $end
$upscope $end
$upscope $end

$scope module dff11 $end
$var wire 1 aC en $end
$var wire 1 r$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ]% q $end
$var wire 1 ZD data $end

$scope module DFF $end
$var wire 1 ]% q $end
$var wire 1 ZD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 [D state $end
$upscope $end
$upscope $end

$scope module dff12 $end
$var wire 1 aC en $end
$var wire 1 q$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 \% q $end
$var wire 1 \D data $end

$scope module DFF $end
$var wire 1 \% q $end
$var wire 1 \D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ]D state $end
$upscope $end
$upscope $end

$scope module dff13 $end
$var wire 1 aC en $end
$var wire 1 p$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 [% q $end
$var wire 1 ^D data $end

$scope module DFF $end
$var wire 1 [% q $end
$var wire 1 ^D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 _D state $end
$upscope $end
$upscope $end

$scope module dff14 $end
$var wire 1 aC en $end
$var wire 1 o$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 Z% q $end
$var wire 1 `D data $end

$scope module DFF $end
$var wire 1 Z% q $end
$var wire 1 `D d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 aD state $end
$upscope $end
$upscope $end

$scope module dff15 $end
$var wire 1 aC en $end
$var wire 1 n$ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 Y% q $end
$var wire 1 bD data $end

$scope module DFF $end
$var wire 1 Y% q $end
$var wire 1 bD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 cD state $end
$upscope $end
$upscope $end
$upscope $end

$scope module writeR7_MWB_reg $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 aC en $end
$var wire 1 D% data_in $end
$var wire 1 |% state $end

$scope module dff0 $end
$var wire 1 aC en $end
$var wire 1 D% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 |% q $end
$var wire 1 dD data $end

$scope module DFF $end
$var wire 1 |% q $end
$var wire 1 dD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 eD state $end
$upscope $end
$upscope $end
$upscope $end

$scope module memToReg_MWB_reg $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 aC en $end
$var wire 1 E% data_in $end
$var wire 1 }% state $end

$scope module dff0 $end
$var wire 1 aC en $end
$var wire 1 E% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 }% q $end
$var wire 1 fD data $end

$scope module DFF $end
$var wire 1 }% q $end
$var wire 1 fD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 gD state $end
$upscope $end
$upscope $end
$upscope $end

$scope module regWrite_MWB_reg $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 aC en $end
$var wire 1 H% data_in $end
$var wire 1 ~% state $end

$scope module dff0 $end
$var wire 1 aC en $end
$var wire 1 H% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 ~% q $end
$var wire 1 hD data $end

$scope module DFF $end
$var wire 1 ~% q $end
$var wire 1 hD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 iD state $end
$upscope $end
$upscope $end
$upscope $end

$scope module halt_MWB_reg $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 aC en $end
$var wire 1 C% data_in $end
$var wire 1 !& state $end

$scope module dff0 $end
$var wire 1 aC en $end
$var wire 1 C% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 !& q $end
$var wire 1 jD data $end

$scope module DFF $end
$var wire 1 !& q $end
$var wire 1 jD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 kD state $end
$upscope $end
$upscope $end
$upscope $end

$scope module writeRegSel_MWB_reg $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 aC en $end
$var wire 1 @% data_in [2] $end
$var wire 1 A% data_in [1] $end
$var wire 1 B% data_in [0] $end
$var wire 1 y% state [2] $end
$var wire 1 z% state [1] $end
$var wire 1 {% state [0] $end

$scope module dff0 $end
$var wire 1 aC en $end
$var wire 1 B% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 {% q $end
$var wire 1 lD data $end

$scope module DFF $end
$var wire 1 {% q $end
$var wire 1 lD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 mD state $end
$upscope $end
$upscope $end

$scope module dff1 $end
$var wire 1 aC en $end
$var wire 1 A% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 z% q $end
$var wire 1 nD data $end

$scope module DFF $end
$var wire 1 z% q $end
$var wire 1 nD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 oD state $end
$upscope $end
$upscope $end

$scope module dff2 $end
$var wire 1 aC en $end
$var wire 1 @% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 y% q $end
$var wire 1 pD data $end

$scope module DFF $end
$var wire 1 y% q $end
$var wire 1 pD d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 qD state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module wb0 $end
$var wire 1 I% readData [15] $end
$var wire 1 J% readData [14] $end
$var wire 1 K% readData [13] $end
$var wire 1 L% readData [12] $end
$var wire 1 M% readData [11] $end
$var wire 1 N% readData [10] $end
$var wire 1 O% readData [9] $end
$var wire 1 P% readData [8] $end
$var wire 1 Q% readData [7] $end
$var wire 1 R% readData [6] $end
$var wire 1 S% readData [5] $end
$var wire 1 T% readData [4] $end
$var wire 1 U% readData [3] $end
$var wire 1 V% readData [2] $end
$var wire 1 W% readData [1] $end
$var wire 1 X% readData [0] $end
$var wire 1 Y% aluResult [15] $end
$var wire 1 Z% aluResult [14] $end
$var wire 1 [% aluResult [13] $end
$var wire 1 \% aluResult [12] $end
$var wire 1 ]% aluResult [11] $end
$var wire 1 ^% aluResult [10] $end
$var wire 1 _% aluResult [9] $end
$var wire 1 `% aluResult [8] $end
$var wire 1 a% aluResult [7] $end
$var wire 1 b% aluResult [6] $end
$var wire 1 c% aluResult [5] $end
$var wire 1 d% aluResult [4] $end
$var wire 1 e% aluResult [3] $end
$var wire 1 f% aluResult [2] $end
$var wire 1 g% aluResult [1] $end
$var wire 1 h% aluResult [0] $end
$var wire 1 i% nextPC [15] $end
$var wire 1 j% nextPC [14] $end
$var wire 1 k% nextPC [13] $end
$var wire 1 l% nextPC [12] $end
$var wire 1 m% nextPC [11] $end
$var wire 1 n% nextPC [10] $end
$var wire 1 o% nextPC [9] $end
$var wire 1 p% nextPC [8] $end
$var wire 1 q% nextPC [7] $end
$var wire 1 r% nextPC [6] $end
$var wire 1 s% nextPC [5] $end
$var wire 1 t% nextPC [4] $end
$var wire 1 u% nextPC [3] $end
$var wire 1 v% nextPC [2] $end
$var wire 1 w% nextPC [1] $end
$var wire 1 x% nextPC [0] $end
$var wire 1 C! memRead $end
$var wire 1 }% memToReg $end
$var wire 1 |% writeR7 $end
$var wire 1 ~% writeEn $end
$var wire 1 y% writeRegSel [2] $end
$var wire 1 z% writeRegSel [1] $end
$var wire 1 {% writeRegSel [0] $end
$var wire 1 `" writeData [15] $end
$var wire 1 a" writeData [14] $end
$var wire 1 b" writeData [13] $end
$var wire 1 c" writeData [12] $end
$var wire 1 d" writeData [11] $end
$var wire 1 e" writeData [10] $end
$var wire 1 f" writeData [9] $end
$var wire 1 g" writeData [8] $end
$var wire 1 h" writeData [7] $end
$var wire 1 i" writeData [6] $end
$var wire 1 j" writeData [5] $end
$var wire 1 k" writeData [4] $end
$var wire 1 l" writeData [3] $end
$var wire 1 m" writeData [2] $end
$var wire 1 n" writeData [1] $end
$var wire 1 o" writeData [0] $end
$var wire 1 {# writeReg [2] $end
$var wire 1 |# writeReg [1] $end
$var wire 1 }# writeReg [0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0t*
xw*
xx*
bx ~*
xV+
xW+
xX+
xY+
xZ+
x[+
x\+
x]+
bx ^+
x_+
x`+
xa+
bx b+
bx c+
bx i+
bx j+
bx r+
bx s+
bx t+
bx u+
bx #,
bx J,
bx K,
bx 4/
bx 5/
x6/
07/
08/
09/
0:/
0;/
0</
0=/
0>/
0?/
0@/
0A/
0B/
0C/
0D/
0E/
0F/
0G/
0H/
0I/
0J/
0K/
0L/
0M/
0N/
0O/
0P/
0Q/
0R/
0S/
0T/
0U/
0V/
0W/
0X/
0Y/
0Z/
0[/
0\/
0]/
0^/
0_/
0`/
0a/
0b/
0c/
0d/
0e/
0f/
0g/
0h/
0i/
0j/
0k/
0l/
0m/
0n/
0o/
0p/
0q/
0r/
0s/
0t/
0u/
0v/
0w/
0x/
0y/
0z/
0{/
0|/
0}/
0~/
0!0
0"0
0#0
0$0
0%0
0&0
0'0
0(0
0)0
0*0
0+0
0,0
0-0
0.0
0/0
000
010
020
030
040
050
060
070
080
090
0:0
0;0
0<0
0=0
0>0
0?0
0@0
0A0
0B0
0C0
0D0
0E0
0F0
0G0
0H0
0I0
0J0
0K0
0L0
0M0
0N0
0O0
0P0
0Q0
0R0
0S0
0T0
0U0
0V0
0W0
0X0
xw4
0z4
0|4
0~4
0"5
0$5
0&5
0(5
0*5
0,5
0.5
005
025
045
065
085
0:5
0<5
0>5
0@5
0B5
0D5
0F5
0H5
0J5
0L5
0N5
0P5
0R5
0T5
0V5
0X5
0Z5
0\5
0^5
0`5
0b5
0d5
0f5
0h5
0j5
0l5
0n5
0p5
0r5
0t5
0v5
0x5
0z5
0|5
0~5
0"6
0$6
0&6
0(6
0*6
0,6
0.6
006
026
046
066
086
0:6
0<6
0>6
0@6
0B6
0D6
0F6
0H6
0J6
0L6
0N6
0P6
0R6
0T6
0V6
0X6
xz8
bx {8
bx -9
bx n9
bx !:
bx ":
bx 3:
bx I:
bx ,;
bx =;
bx >;
bx O;
bx e;
bx H<
bx Y<
bx Z<
bx k<
bx #=
bx d=
bx u=
bx v=
bx )>
bx :>
0HB
0JB
0LB
0NB
0PB
0RB
0TB
0VB
0XB
0ZB
0\B
0^B
0`B
0bB
0dB
0fB
0hB
0jB
0lB
0nB
0pB
0rB
0tB
0vB
0xB
0zB
0|B
0~B
0"C
0$C
0&C
0(C
0*C
0,C
0.C
00C
02C
04C
18!
19!
0D&
0F&
0H&
0J&
0L&
0N&
0P&
0R&
0T&
0V&
0X&
0Z&
0\&
0^&
0`&
0b&
18'
b0 9'
xe)
xh)
xk)
xn)
xq)
xt)
xw)
xz)
x})
x"*
x%*
x(*
x+*
x.*
x1*
x4*
06*
08*
0:*
0<*
0>*
0@*
0B*
0D*
0F*
0H*
0J*
0L*
0N*
0P*
0R*
0T*
0V*
0X*
0Z*
0\*
0^*
0`*
0b*
0d*
0f*
0h*
0j*
0l*
0n*
0p*
0r*
06C
08C
0:C
0<C
0>C
0@C
0BC
0DC
0FC
0HC
0JC
0LC
0NC
0PC
0RC
0TC
0VC
0XC
0ZC
1]C
b0 ^C
0cC
0eC
0gC
0iC
0kC
0mC
0oC
0qC
0sC
0uC
0wC
0yC
0{C
0}C
0!D
0#D
0%D
0'D
0)D
0+D
0-D
0/D
01D
03D
05D
07D
09D
0;D
0=D
0?D
0AD
0CD
0ED
0GD
0ID
0KD
0MD
0OD
0QD
0SD
0UD
0WD
0YD
0[D
0]D
0_D
0aD
0cD
0eD
0gD
0iD
0kD
0mD
0oD
0qD
b10000 <'
b100 ]'
b100 ((
b100 Q(
b100 z(
b10000 Y0
b100 j0
b100 51
b100 ^1
b100 )2
b10000 $3
b100 43
b100 ]3
b100 (4
b100 Q4
b10000 r6
b100 s6
b10000 (9
b100 )9
b10 *9
b10000 D:
b100 E:
b10 F:
b10000 `;
b100 a;
b10 b;
b10000 |<
b100 }<
b10 ~<
b10000 L>
b100 l>
b100 7?
b100 `?
b100 +@
b10000 R@
b100 a@
b100 ,A
b100 UA
b100 ~A
b0 .!
b10 /!
b100 0!
b0 1!
b0 2!
b0 3!
b0 4!
b1 :!
bx :'
b10000000000000000 ;'
bx _C
b10000000000000000 `C
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
x%
x$
x#
x"
x!
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
15
04
03
02
01
xA
xD
xC
xB
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xU
xV
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
x(!
x'!
x&!
x%!
x$!
x#!
x"!
x!!
x~
x}
x|
x{
xz
xy
xx
xw
z)!
z*!
z+!
z,!
x-!
15!
z6!
17!
x;!
x<!
x=!
x>!
x?!
x@!
xA!
xB!
xC!
xG!
xF!
xE!
xD!
xH!
xI!
xJ!
zL!
zK!
xM!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xm!
xl!
xk!
xj!
xi!
xh!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x_!
x^!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
xq!
xp!
xo!
xn!
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x~!
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
1T"
0S"
0R"
0Q"
0P"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x!#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
zq#
zp#
zo#
zn#
zm#
zl#
zk#
zj#
zi#
zh#
zg#
zf#
ze#
zd#
zc#
zb#
xt#
xs#
xr#
xw#
xv#
xu#
xz#
xy#
xx#
x}#
x|#
x{#
x/$
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x?$
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
xO$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
xF$
xE$
xD$
xC$
xB$
xA$
x@$
x_$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xb$
xa$
x`$
xf$
xe$
xd$
xc$
xg$
xh$
xi$
xj$
xk$
xl$
xm$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
x/%
x.%
x-%
x,%
x+%
x*%
x)%
x(%
x'%
x&%
x%%
x$%
x#%
x"%
x!%
x~$
x?%
x>%
x=%
x<%
x;%
x:%
x9%
x8%
x7%
x6%
x5%
x4%
x3%
x2%
x1%
x0%
xB%
xA%
x@%
xC%
xD%
xE%
xF%
xG%
xH%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
xP%
xO%
xN%
xM%
xL%
xK%
xJ%
xI%
xh%
xg%
xf%
xe%
xd%
xc%
xb%
xa%
x`%
x_%
x^%
x]%
x\%
x[%
xZ%
xY%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
xm%
xl%
xk%
xj%
xi%
x{%
xz%
xy%
x|%
x}%
x~%
x!&
x1&
x0&
x/&
x.&
x-&
x,&
x+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
0A&
0@&
0?&
0>&
0=&
0<&
0;&
0:&
09&
08&
07&
16&
05&
04&
03&
02&
xC&
xE&
xG&
xI&
xK&
xM&
xO&
xQ&
xS&
xU&
xW&
xY&
x[&
x]&
x_&
xa&
xr&
xq&
xp&
xo&
xn&
xm&
xl&
xk&
xj&
xi&
xh&
xg&
xf&
xe&
xd&
xc&
x$'
x#'
x"'
x!'
x~&
x}&
x|&
x{&
xz&
xy&
xx&
xw&
xv&
xu&
xt&
xs&
xO'
xP'
xQ'
0R'
xS'
0T'
xU'
0V'
xW'
0X'
xY'
xZ'
x['
x\'
0^'
x_'
x`'
1c'
xd'
1e'
1g'
1h'
1i'
xl'
0m'
1n'
xp'
1q'
1r'
1u'
xv'
xw'
1y'
1z'
x{'
1|'
x}'
x~'
1"(
1#(
x$(
z%(
x&(
1'(
x)(
x*(
x+(
1.(
x/(
x0(
12(
13(
x4(
17(
x8(
x9(
1;(
1<(
x=(
1@(
xA(
xB(
1D(
1E(
xF(
1G(
xH(
xI(
1K(
1L(
xM(
zN(
xO(
1P(
xR(
xS(
xT(
1W(
xX(
xY(
1[(
1\(
x](
1`(
xa(
xb(
1d(
1e(
xf(
1i(
xj(
xk(
1m(
1n(
xo(
1p(
xq(
xr(
1t(
1u(
xv(
zw(
xx(
1y(
x{(
x|(
x}(
1")
x#)
x$)
1&)
1')
x()
1+)
x,)
x-)
1/)
10)
x1)
14)
x5)
x6)
18)
19)
x:)
1;)
x<)
x=)
1?)
1@)
xA)
zR)
zQ)
zP)
zO)
zN)
zM)
zL)
zK)
zJ)
zI)
zH)
zG)
zF)
zE)
zD)
zC)
0b)
0a)
0`)
0_)
0^)
0])
0\)
0[)
0Z)
0Y)
0X)
1W)
0V)
0U)
0T)
0S)
xd)
xg)
xj)
xm)
xp)
xs)
xv)
xy)
x|)
x!*
x$*
x'*
x**
x-*
x0*
x3*
x5*
x7*
x9*
x;*
x=*
x?*
xA*
xC*
xE*
xG*
xI*
xK*
xM*
xO*
xQ*
xS*
xU*
xW*
xY*
x[*
x]*
x_*
xa*
xc*
xe*
xg*
xi*
xk*
xm*
xo*
xq*
xs*
xv*
xu*
x}*
x|*
x{*
xz*
xy*
x"+
x!+
z#+
x3+
x2+
x1+
x0+
x/+
x.+
x-+
x,+
x++
x*+
x)+
x(+
x'+
x&+
x%+
x$+
xC+
xB+
xA+
x@+
x?+
x>+
x=+
x<+
x;+
x:+
x9+
x8+
x7+
x6+
x5+
x4+
xS+
xR+
xQ+
xP+
xO+
xN+
xM+
xL+
xK+
xJ+
xI+
xH+
xG+
xF+
xE+
xD+
xT+
xU+
xh+
xg+
xf+
xe+
xd+
xl+
xk+
xq+
xp+
xo+
xn+
xm+
xz+
xy+
xx+
xw+
xv+
x{+
x|+
x}+
x~+
x!,
x",
x(,
x',
x&,
x%,
x$,
x9,
x8,
x7,
x6,
x5,
x4,
x3,
x2,
x1,
x0,
x/,
x.,
x-,
x,,
x+,
x*,
xI,
xH,
xG,
xF,
xE,
xD,
xC,
xB,
xA,
x@,
x?,
x>,
x=,
x<,
x;,
x:,
xL,
xM,
x],
x\,
x[,
xZ,
xY,
xX,
xW,
xV,
xU,
xT,
xS,
xR,
xQ,
xP,
xO,
xN,
xm,
xl,
xk,
xj,
xi,
xh,
xg,
xf,
xe,
xd,
xc,
xb,
xa,
x`,
x_,
x^,
x},
x|,
x{,
xz,
xy,
xx,
xw,
xv,
xu,
xt,
xs,
xr,
xq,
xp,
xo,
xn,
x/-
x.-
x--
x,-
x+-
x*-
x)-
x(-
x'-
x&-
x%-
x$-
x#-
x"-
x!-
x~,
x?-
x>-
x=-
x<-
x;-
x:-
x9-
x8-
x7-
x6-
x5-
x4-
x3-
x2-
x1-
x0-
xO-
xN-
xM-
xL-
xK-
xJ-
xI-
xH-
xG-
xF-
xE-
xD-
xC-
xB-
xA-
x@-
x_-
x^-
x]-
x\-
x[-
xZ-
xY-
xX-
xW-
xV-
xU-
xT-
xS-
xR-
xQ-
xP-
xo-
xn-
xm-
xl-
xk-
xj-
xi-
xh-
xg-
xf-
xe-
xd-
xc-
xb-
xa-
x`-
x!.
x~-
x}-
x|-
x{-
xz-
xy-
xx-
xw-
xv-
xu-
xt-
xs-
xr-
xq-
xp-
x1.
x0.
x/.
x..
x-.
x,.
x+.
x*.
x).
x(.
x'.
x&.
x%.
x$.
x#.
x".
xA.
x@.
x?.
x>.
x=.
x<.
x;.
x:.
x9.
x8.
x7.
x6.
x5.
x4.
x3.
x2.
xQ.
xP.
xO.
xN.
xM.
xL.
xK.
xJ.
xI.
xH.
xG.
xF.
xE.
xD.
xC.
xB.
xa.
x`.
x_.
x^.
x].
x\.
x[.
xZ.
xY.
xX.
xW.
xV.
xU.
xT.
xS.
xR.
xq.
xp.
xo.
xn.
xm.
xl.
xk.
xj.
xi.
xh.
xg.
xf.
xe.
xd.
xc.
xb.
x#/
x"/
x!/
x~.
x}.
x|.
x{.
xz.
xy.
xx.
xw.
xv.
xu.
xt.
xs.
xr.
x3/
x2/
x1/
x0/
x//
x./
x-/
x,/
x+/
x*/
x)/
x(/
x'/
x&/
x%/
x$/
x\0
x]0
x^0
x_0
x`0
xa0
xb0
xc0
xd0
xe0
xf0
xg0
xh0
xi0
xk0
xl0
xm0
xp0
xq0
1r0
xt0
1u0
1v0
xy0
xz0
x{0
x}0
x~0
x!1
x$1
x%1
x&1
x(1
x)1
x*1
x+1
x,1
x-1
x/1
x01
x11
z21
x31
x41
x61
x71
x81
x;1
x<1
x=1
x?1
x@1
xA1
xD1
xE1
xF1
xH1
xI1
xJ1
xM1
xN1
xO1
xQ1
xR1
xS1
xT1
xU1
xV1
xX1
xY1
xZ1
z[1
x\1
x]1
x_1
x`1
xa1
xd1
xe1
xf1
xh1
xi1
xj1
xm1
xn1
xo1
xq1
xr1
xs1
xv1
xw1
xx1
xz1
x{1
x|1
x}1
x~1
x!2
x#2
x$2
x%2
z&2
x'2
x(2
x*2
x+2
x,2
x/2
x02
x12
x32
x42
x52
x82
x92
x:2
x<2
x=2
x>2
xA2
xB2
xC2
xE2
xF2
xG2
xH2
xI2
xJ2
xL2
xM2
xN2
x^2
x]2
x\2
x[2
xZ2
xY2
xX2
xW2
xV2
xU2
xT2
xS2
xR2
xQ2
xP2
xO2
xn2
xm2
xl2
xk2
xj2
xi2
xh2
xg2
xf2
xe2
xd2
xc2
xb2
xa2
x`2
x_2
x~2
x}2
x|2
x{2
xz2
xy2
xx2
xw2
xv2
xu2
xt2
xs2
xr2
xq2
xp2
xo2
x!3
x"3
x#3
x&3
x'3
x(3
x)3
x*3
x+3
x,3
x-3
x.3
x/3
x03
x13
x23
x33
x53
x63
x73
x:3
x;3
1<3
x>3
1?3
1@3
xC3
xD3
xE3
xG3
xH3
xI3
xL3
xM3
xN3
xP3
xQ3
xR3
xS3
xT3
xU3
xW3
xX3
xY3
zZ3
x[3
x\3
x^3
x_3
x`3
xc3
xd3
xe3
xg3
xh3
xi3
xl3
xm3
xn3
xp3
xq3
xr3
xu3
xv3
xw3
xy3
xz3
x{3
x|3
x}3
x~3
x"4
x#4
x$4
z%4
x&4
x'4
x)4
x*4
x+4
x.4
x/4
x04
x24
x34
x44
x74
x84
x94
x;4
x<4
x=4
x@4
xA4
xB4
xD4
xE4
xF4
xG4
xH4
xI4
xK4
xL4
xM4
zN4
xO4
xP4
xR4
xS4
xT4
xW4
xX4
xY4
x[4
x\4
x]4
x`4
xa4
xb4
xd4
xe4
xf4
xi4
xj4
xk4
xm4
xn4
xo4
xp4
xq4
xr4
xt4
xu4
xv4
xy4
x{4
x}4
x!5
x#5
x%5
x'5
x)5
x+5
x-5
x/5
x15
x35
x55
x75
x95
x;5
x=5
x?5
xA5
xC5
xE5
xG5
xI5
xK5
xM5
xO5
xQ5
xS5
xU5
xW5
xY5
x[5
x]5
x_5
xa5
xc5
xe5
xg5
xi5
xk5
xm5
xo5
xq5
xs5
xu5
xw5
xy5
x{5
x}5
x!6
x#6
x%6
x'6
x)6
x+6
x-6
x/6
x16
x36
x56
x76
x96
x;6
x=6
x?6
xA6
xC6
xE6
xG6
xI6
xK6
xM6
xO6
xQ6
xS6
xU6
xW6
xj6
xi6
xh6
xg6
xf6
xe6
xd6
xc6
xb6
xa6
x`6
x_6
x^6
x]6
x\6
x[6
xk6
xl6
xm6
xn6
xo6
xp6
xq6
x&7
x%7
x$7
x#7
x"7
x!7
x~6
x}6
x|6
x{6
xz6
xy6
xx6
xw6
xv6
xu6
x'7
x77
x67
x57
x47
x37
x27
x17
x07
x/7
x.7
x-7
x,7
x+7
x*7
x)7
x(7
xG7
xF7
xE7
xD7
xC7
xB7
xA7
x@7
x?7
x>7
x=7
x<7
x;7
x:7
x97
x87
xW7
xV7
xU7
xT7
xS7
xR7
xQ7
xP7
xO7
xN7
xM7
xL7
xK7
xJ7
xI7
xH7
xg7
xf7
xe7
xd7
xc7
xb7
xa7
x`7
x_7
x^7
x]7
x\7
x[7
xZ7
xY7
xX7
xw7
xv7
xu7
xt7
xs7
xr7
xq7
xp7
xo7
xn7
xm7
xl7
xk7
xj7
xi7
xh7
x)8
x(8
x'8
x&8
x%8
x$8
x#8
x"8
x!8
x~7
x}7
x|7
x{7
xz7
xy7
xx7
x98
x88
x78
x68
x58
x48
x38
x28
x18
x08
x/8
x.8
x-8
x,8
x+8
x*8
xI8
xH8
xG8
xF8
xE8
xD8
xC8
xB8
xA8
x@8
x?8
x>8
x=8
x<8
x;8
x:8
xY8
0X8
0W8
0V8
0U8
0T8
0S8
0R8
0Q8
0P8
0O8
0N8
0M8
0L8
0K8
0J8
xi8
xh8
xg8
xf8
xe8
xd8
xc8
xb8
xa8
x`8
x_8
x^8
x]8
x\8
x[8
xZ8
xy8
0x8
0w8
0v8
0u8
0t8
0s8
0r8
0q8
0p8
0o8
0n8
0m8
0l8
0k8
0j8
x|8
x}8
z~8
x!9
x=9
x<9
x;9
x:9
x99
x89
x79
x69
x59
x49
x39
x29
x19
x09
x/9
x.9
xM9
xL9
xK9
xJ9
xI9
xH9
xG9
xF9
xE9
xD9
xC9
xB9
xA9
x@9
x?9
x>9
x]9
x\9
x[9
xZ9
xY9
xX9
xW9
xV9
xU9
xT9
xS9
xR9
xQ9
xP9
xO9
xN9
xm9
xl9
xk9
xj9
xi9
xh9
xg9
xf9
xe9
xd9
xc9
xb9
xa9
x`9
x_9
x^9
z~9
z}9
z|9
z{9
zz9
zy9
zx9
zw9
zv9
zu9
zt9
zs9
zr9
zq9
zp9
zo9
z2:
z1:
z0:
z/:
z.:
z-:
z,:
z+:
z*:
z):
z(:
z':
z&:
z%:
z$:
z#:
zC:
zB:
zA:
z@:
z?:
z>:
z=:
z<:
z;:
z::
z9:
z8:
z7:
z6:
z5:
z4:
xY:
xX:
xW:
xV:
xU:
xT:
xS:
xR:
xQ:
xP:
xO:
xN:
xM:
xL:
xK:
xJ:
xi:
xh:
xg:
xf:
xe:
xd:
xc:
xb:
xa:
x`:
x_:
x^:
x]:
x\:
x[:
xZ:
xy:
xx:
xw:
xv:
xu:
xt:
xs:
xr:
xq:
xp:
xo:
xn:
xm:
xl:
xk:
xj:
x+;
x*;
x);
x(;
x';
x&;
x%;
x$;
x#;
x";
x!;
x~:
x}:
x|:
x{:
xz:
z<;
z;;
z:;
z9;
z8;
z7;
z6;
z5;
z4;
z3;
z2;
z1;
z0;
z/;
z.;
z-;
zN;
zM;
zL;
zK;
zJ;
zI;
zH;
zG;
zF;
zE;
zD;
zC;
zB;
zA;
z@;
z?;
z_;
z^;
z];
z\;
z[;
zZ;
zY;
zX;
zW;
zV;
zU;
zT;
zS;
zR;
zQ;
zP;
xu;
xt;
xs;
xr;
xq;
xp;
xo;
xn;
xm;
xl;
xk;
xj;
xi;
xh;
xg;
xf;
x'<
x&<
x%<
x$<
x#<
x"<
x!<
x~;
x};
x|;
x{;
xz;
xy;
xx;
xw;
xv;
x7<
x6<
x5<
x4<
x3<
x2<
x1<
x0<
x/<
x.<
x-<
x,<
x+<
x*<
x)<
x(<
xG<
xF<
xE<
xD<
xC<
xB<
xA<
x@<
x?<
x><
x=<
x<<
x;<
x:<
x9<
x8<
zX<
zW<
zV<
zU<
zT<
zS<
zR<
zQ<
zP<
zO<
zN<
zM<
zL<
zK<
zJ<
zI<
zj<
zi<
zh<
zg<
zf<
ze<
zd<
zc<
zb<
za<
z`<
z_<
z^<
z]<
z\<
z[<
z{<
zz<
zy<
zx<
zw<
zv<
zu<
zt<
zs<
zr<
zq<
zp<
zo<
zn<
zm<
zl<
x3=
x2=
x1=
x0=
x/=
x.=
x-=
x,=
x+=
x*=
x)=
x(=
x'=
x&=
x%=
x$=
xC=
xB=
xA=
x@=
x?=
x>=
x==
x<=
x;=
x:=
x9=
x8=
x7=
x6=
x5=
x4=
xS=
xR=
xQ=
xP=
xO=
xN=
xM=
xL=
xK=
xJ=
xI=
xH=
xG=
xF=
xE=
xD=
xc=
xb=
xa=
x`=
x_=
x^=
x]=
x\=
x[=
xZ=
xY=
xX=
xW=
xV=
xU=
xT=
zt=
zs=
zr=
zq=
zp=
zo=
zn=
zm=
zl=
zk=
zj=
zi=
zh=
zg=
zf=
ze=
z(>
z'>
z&>
z%>
z$>
z#>
z">
z!>
z~=
z}=
z|=
z{=
zz=
zy=
zx=
zw=
z9>
z8>
z7>
z6>
z5>
z4>
z3>
z2>
z1>
z0>
z/>
z.>
z->
z,>
z+>
z*>
zJ>
zI>
zH>
zG>
zF>
zE>
zD>
zC>
zB>
zA>
z@>
z?>
z>>
z=>
z<>
z;>
xK>
x^>
x_>
x`>
xa>
xb>
xc>
xd>
xe>
xf>
xg>
xh>
xi>
xj>
xk>
xm>
xn>
xo>
xr>
xs>
1t>
xv>
1w>
1x>
x{>
x|>
x}>
x!?
x"?
x#?
x&?
x'?
x(?
x*?
x+?
x,?
x-?
x.?
x/?
x1?
x2?
x3?
z4?
x5?
x6?
x8?
x9?
x:?
x=?
x>?
x??
xA?
xB?
xC?
xF?
xG?
xH?
xJ?
xK?
xL?
xO?
xP?
xQ?
xS?
xT?
xU?
xV?
xW?
xX?
xZ?
x[?
x\?
z]?
x^?
x_?
xa?
xb?
xc?
xf?
xg?
xh?
xj?
xk?
xl?
xo?
xp?
xq?
xs?
xt?
xu?
xx?
xy?
xz?
x|?
x}?
x~?
x!@
x"@
x#@
x%@
x&@
x'@
z(@
x)@
x*@
x,@
x-@
x.@
x1@
x2@
x3@
x5@
x6@
x7@
x:@
x;@
x<@
x>@
x?@
x@@
xC@
xD@
xE@
xG@
xH@
xI@
xJ@
xK@
xL@
xN@
xO@
xP@
xQ@
xS@
xT@
xU@
xV@
xW@
xX@
xY@
xZ@
x[@
x\@
x]@
x^@
x_@
x`@
xb@
xc@
xd@
xg@
xh@
xi@
xk@
xl@
xm@
xp@
xq@
xr@
xt@
xu@
xv@
xy@
xz@
x{@
x}@
x~@
x!A
x"A
x#A
x$A
x&A
x'A
x(A
z)A
x*A
x+A
x-A
x.A
x/A
x2A
x3A
x4A
x6A
x7A
x8A
x;A
x<A
x=A
x?A
x@A
xAA
xDA
xEA
xFA
xHA
xIA
xJA
xKA
xLA
xMA
xOA
xPA
xQA
zRA
xSA
xTA
xVA
xWA
xXA
x[A
x\A
x]A
x_A
x`A
xaA
xdA
xeA
xfA
xhA
xiA
xjA
xmA
xnA
xoA
xqA
xrA
xsA
xtA
xuA
xvA
xxA
xyA
xzA
z{A
x|A
x}A
x!B
x"B
x#B
x&B
x'B
x(B
x*B
x+B
x,B
x/B
x0B
x1B
x3B
x4B
x5B
x8B
x9B
x:B
x<B
x=B
x>B
x?B
x@B
xAB
xCB
xDB
xEB
x"9
x#9
x$9
x%9
x&9
x'9
xGB
xIB
xKB
xMB
xOB
xQB
xSB
xUB
xWB
xYB
x[B
x]B
x_B
xaB
xcB
xeB
xgB
xiB
xkB
xmB
xoB
xqB
xsB
xuB
xwB
xyB
x{B
x}B
x!C
x#C
x%C
x'C
x)C
x+C
x-C
x/C
x1C
x3C
x5C
x7C
x9C
x;C
x=C
x?C
xAC
xCC
xEC
xGC
xIC
xKC
xMC
xOC
xQC
xSC
xUC
xWC
xYC
x[C
x\C
xbC
xdC
xfC
xhC
xjC
xlC
xnC
xpC
xrC
xtC
xvC
xxC
xzC
x|C
x~C
x"D
x$D
x&D
x(D
x*D
x,D
x.D
x0D
x2D
x4D
x6D
x8D
x:D
x<D
x>D
x@D
xBD
xDD
xFD
xHD
xJD
xLD
xND
xPD
xRD
xTD
xVD
xXD
xZD
x\D
x^D
x`D
xbD
xdD
xfD
xhD
xjD
xlD
xnD
xpD
1aC
1FB
1x4
xB)
xB&
0M'
0L'
1K'
0J'
0I'
0H'
0G'
0F'
0E'
0D'
0C'
0B'
0A'
0@'
0?'
0>'
0='
07'
06'
15'
04'
03'
02'
01'
00'
0/'
0.'
0-'
0,'
0+'
0*'
0)'
0('
0''
0&'
0%'
xN'
xa'
0b'
0f'
1j'
xk'
xo'
xs'
0t'
xx'
x!(
x,(
0-(
x1(
x5(
06(
x:(
x>(
0?(
xC(
xJ(
xU(
0V(
xZ(
x^(
0_(
xc(
xg(
0h(
xl(
xs(
x~(
0!)
x%)
x))
0*)
x.)
x2)
03)
x7)
x>)
02*
0/*
0,*
0)*
0&*
0#*
0~)
0{)
0x)
0u)
0r)
0o)
0l)
0i)
0f)
0c)
0Z0
x),
x[0
xn0
xo0
xs0
xw0
xx0
x|0
x"1
x#1
x'1
x.1
x91
x:1
x>1
xB1
xC1
xG1
xK1
xL1
xP1
xW1
xb1
xc1
xg1
xk1
xl1
xp1
xt1
xu1
xy1
x"2
x-2
x.2
x22
x62
x72
x;2
x?2
x@2
xD2
xK2
0%3
x83
x93
x=3
xA3
xB3
xF3
xJ3
xK3
xO3
xV3
xa3
xb3
xf3
xj3
xk3
xo3
xs3
xt3
xx3
x!4
x,4
x-4
x14
x54
x64
x:4
x>4
x?4
xC4
xJ4
xU4
xV4
xZ4
x^4
x_4
xc4
xg4
xh4
xl4
xs4
xY6
xZ6
1t6
1"=
1!=
0d;
1c;
1H:
0G:
0,9
0+9
0M>
x]>
x\>
x[>
xZ>
xY>
xX>
xW>
xV>
xU>
xT>
xS>
xR>
xQ>
xP>
xO>
xN>
xp>
xq>
xu>
xy>
xz>
x~>
x$?
x%?
x)?
x0?
x;?
x<?
x@?
xD?
xE?
xI?
xM?
xN?
xR?
xY?
xd?
xe?
xi?
xm?
xn?
xr?
xv?
xw?
x{?
x$@
x/@
x0@
x4@
x8@
x9@
x=@
xA@
xB@
xF@
xM@
xe@
xf@
xj@
xn@
xo@
xs@
xw@
xx@
x|@
x%A
x0A
x1A
x5A
x9A
x:A
x>A
xBA
xCA
xGA
xNA
xYA
xZA
x^A
xbA
xcA
xgA
xkA
xlA
xpA
xwA
x$B
x%B
x)B
x-B
x.B
x2B
x6B
x7B
x;B
xBB
$end
#1
0y%
0z%
0{%
0!&
0~%
0}%
0|%
0Y%
0Z%
0[%
0\%
0]%
0^%
0_%
0`%
0a%
0b%
0c%
0d%
0e%
0f%
0g%
0h%
0I%
0J%
0K%
0L%
0M%
0N%
0O%
0P%
0Q%
0R%
0S%
0T%
0U%
0V%
0W%
0X%
0i%
0j%
0k%
0l%
0m%
0n%
0o%
0p%
0q%
0r%
0s%
0t%
0u%
0v%
0w%
0x%
0@%
0A%
0B%
0H%
0G%
0F%
0E%
0D%
0C%
0n$
0o$
0p$
0q$
0r$
0s$
0t$
0u$
0v$
0w$
0x$
0y$
0z$
0{$
0|$
0}$
00%
01%
02%
03%
04%
05%
06%
07%
08%
09%
0:%
0;%
0<%
0=%
0>%
0?%
0~$
0!%
0"%
0#%
0$%
0%%
0&%
0'%
0(%
0)%
0*%
0+%
0,%
0-%
0.%
0/%
0`$
0a$
0b$
0c$
0d$
0e$
0f$
0m$
0l$
0k$
0j$
0i$
0h$
0g$
0@$
0A$
0B$
0C$
0D$
0E$
0F$
0G$
0H$
0I$
0J$
0K$
0L$
0M$
0N$
0O$
0P$
0Q$
0R$
0S$
0T$
0U$
0V$
0W$
0X$
0Y$
0Z$
0[$
0\$
0]$
0^$
0_$
00$
01$
02$
03$
04$
05$
06$
07$
08$
09$
0:$
0;$
0<$
0=$
0>$
0?$
0~#
0!$
0"$
0#$
0$$
0%$
0&$
0'$
0($
0)$
0*$
0+$
0,$
0-$
0.$
0/$
0`-
0a-
0b-
0c-
0d-
0e-
0f-
0g-
0h-
0i-
0j-
0k-
0l-
0m-
0n-
0o-
0P-
0Q-
0R-
0S-
0T-
0U-
0V-
0W-
0X-
0Y-
0Z-
0[-
0\-
0]-
0^-
0_-
0@-
0A-
0B-
0C-
0D-
0E-
0F-
0G-
0H-
0I-
0J-
0K-
0L-
0M-
0N-
0O-
00-
01-
02-
03-
04-
05-
06-
07-
08-
09-
0:-
0;-
0<-
0=-
0>-
0?-
0~,
0!-
0"-
0#-
0$-
0%-
0&-
0'-
0(-
0)-
0*-
0+-
0,-
0--
0.-
0/-
0n,
0o,
0p,
0q,
0r,
0s,
0t,
0u,
0v,
0w,
0x,
0y,
0z,
0{,
0|,
0},
0^,
0_,
0`,
0a,
0b,
0c,
0d,
0e,
0f,
0g,
0h,
0i,
0j,
0k,
0l,
0m,
0N,
0O,
0P,
0Q,
0R,
0S,
0T,
0U,
0V,
0W,
0X,
0Y,
0Z,
0[,
0\,
0],
0R#
0S#
0T#
0U#
0V#
0W#
0X#
0Y#
0Z#
0[#
0\#
0]#
0^#
0_#
0`#
0a#
0B#
0C#
0D#
0E#
0F#
0G#
0H#
0I#
0J#
0K#
0L#
0M#
0N#
0O#
0P#
0Q#
0~!
0!"
0""
0#"
0$"
0%"
0&"
0'"
0("
0)"
0*"
0+"
0,"
0-"
0."
0/"
1d'
0r&
0U*
1l'
1p'
1q&
0W*
1v'
1{'
0Y*
1}'
1$(
0[*
1/(
14(
0]*
18(
1=(
0_*
1A(
1F(
0a*
1H(
1M(
0c*
1X(
1](
0e*
1a(
1f(
0g*
1j(
1o(
0i*
1q(
1v(
0k*
1#)
1()
0m*
1,)
11)
0o*
15)
1:)
0q*
1<)
1A)
0s*
1:3
1>3
0y4
1C3
1G3
1I3
0{4
1L3
1P3
1R3
0}4
1S3
1W3
1Y3
0!5
1c3
1g3
1i3
0#5
1l3
1p3
1r3
0%5
1u3
1y3
1{3
0'5
1|3
1"4
1$4
0)5
1.4
124
144
0+5
174
1;4
1=4
0-5
1@4
1D4
1F4
0/5
1G4
1K4
1M4
015
1W4
1[4
1]4
035
1`4
1d4
1f4
055
1i4
1m4
1o4
075
1p4
1t4
1v4
095
0GB
0IB
0KB
0MB
0OB
0QB
0SB
0UB
0WB
0YB
0[B
0]B
0_B
0aB
0cB
0eB
0gB
0iB
0kB
0mB
0oB
0qB
0sB
0uB
0wB
0yB
0{B
0}B
0!C
0#C
0%C
0'C
0IC
0KC
0MC
0OC
0QC
0SC
0UC
0WC
0YC
0bC
0dC
0fC
0hC
0jC
0lC
0nC
0pC
0rC
0tC
0vC
0xC
0zC
0|C
0~C
0"D
0DD
0FD
0HD
0JD
0LD
0ND
0PD
0RD
0TD
0VD
0XD
0ZD
0\D
0^D
0`D
0bD
0jD
0dD
0fD
1\C
0hD
0lD
0nD
0pD
0[C
0/3
0h4
0_4
0V4
0-3
0?4
064
0-4
0+3
0t3
0k3
0b3
0)3
0K3
0B3
0=3
093
053
0>)
0Y'
07)
02)
0.)
0))
0%)
0~(
0s(
0W'
0l(
0g(
0c(
0^(
0Z(
0U(
0J(
0U'
0C(
0>(
0:(
05(
01(
0,(
0!(
0S'
0x'
0s'
0o'
0k'
0_'
0a'
0p&
1w'
1~'
1&(
10(
19(
1B(
1I(
1O(
1Y(
1b(
1k(
1r(
1x(
1$)
1-)
16)
1=)
1E3
1H3
1\3
1'4
1P4
0F3
063
0N'
0}(
0|(
0{(
0\'
0Q'
0T(
0S(
0R(
0['
0P'
0+(
0*(
0)(
0Z'
0O'
0`'
0o&
0n&
0m&
0l&
0k&
0j&
0i&
0h&
0g&
0f&
0e&
0d&
0c&
1N3
1Q3
0O3
073
1U3
1X3
0V3
0&3
1[3
013
1e3
1h3
0f3
0^3
1n3
1q3
0o3
0_3
1w3
1z3
0x3
0`3
1~3
1#4
0!4
0'3
1&4
023
104
134
014
0)4
194
1<4
0:4
0*4
1B4
1E4
0C4
0+4
1I4
1L4
0J4
0(3
1O4
033
1Y4
1\4
0Z4
0R4
1b4
1e4
0c4
0S4
1k4
1n4
0l4
0T4
1r4
1u4
0s4
0#3
0-!
0A
0;!
0U
0V
1p6
1o6
1n6
1m6
0$'
0#'
0"'
0!'
1~&
0}&
0|&
0{&
0z&
1y&
0x&
0w&
0v&
0u&
1t&
1s&
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0$
0#
0"
0!
0j6
0i6
0h6
0g6
0f6
0e6
0d6
0c6
0b6
0a6
0`6
0_6
0^6
0]6
0\6
0[6
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!.
0~-
0}-
0|-
0{-
0z-
0y-
0x-
0w-
0v-
0u-
0t-
0s-
0r-
0q-
0p-
01.
00.
0/.
0..
0-.
0,.
0+.
0*.
0).
0(.
0'.
0&.
0%.
0$.
0#.
0".
0A.
0@.
0?.
0>.
0=.
0<.
0;.
0:.
09.
08.
07.
06.
05.
04.
03.
02.
0Q.
0P.
0O.
0N.
0M.
0L.
0K.
0J.
0I.
0H.
0G.
0F.
0E.
0D.
0C.
0B.
0a.
0`.
0_.
0^.
0].
0\.
0[.
0Z.
0Y.
0X.
0W.
0V.
0U.
0T.
0S.
0R.
0q.
0p.
0o.
0n.
0m.
0l.
0k.
0j.
0i.
0h.
0g.
0f.
0e.
0d.
0c.
0b.
0#/
0"/
0!/
0~.
0}.
0|.
0{.
0z.
0y.
0x.
0w.
0v.
0u.
0t.
0s.
0r.
03/
02/
01/
00/
0//
0./
0-/
0,/
0+/
0*/
0)/
0(/
0'/
0&/
0%/
0$/
0}#
0|#
0{#
0D
0C
0B
0BD
0@D
0>D
0<D
0:D
08D
06D
04D
02D
00D
0.D
0,D
0*D
0(D
0&D
0$D
0S*
0Q*
0O*
0M*
0K*
0I*
0G*
0E*
0C*
0A*
0?*
0=*
0;*
09*
07*
05*
0q6
0l6
0k6
1B)
1B&
0d)
0g)
0j)
0m)
0p)
0s)
0v)
0y)
0|)
0!*
0$*
1'*
0**
0-*
00*
03*
1i@
1l@
1m@
0(!
0'!
0&!
0%!
0$!
0#!
0"!
0!!
0~
0}
0|
0{
0z
0y
0x
0w
0G7
0F7
0E7
0D7
0C7
0B7
0A7
0@7
0?7
0>7
0=7
0<7
0;7
0:7
097
087
077
067
057
047
037
027
017
007
0/7
0.7
0-7
0,7
0+7
0*7
0)7
0(7
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
1K@
1P@
1@B
1EB
1$9
1D@
1I@
19B
1>B
1;@
1@@
10B
15B
12@
17@
1'B
1,B
1"@
1'@
1uA
1zA
1y?
1~?
1nA
1sA
1p?
1u?
1eA
1jA
1g?
1l?
1\A
1aA
1W?
1\?
1LA
1QA
1P?
1U?
1EA
1JA
1G?
1L?
1<A
1AA
1>?
1C?
13A
18A
1.?
13?
1#A
1(A
1'?
1,?
1z@
1!A
1|>
1#?
1q@
1v@
1s>
0]>
1h@
1J@
1N@
1O@
1?B
1CB
1DB
0%9
1C@
1G@
1H@
18B
1<B
1=B
1:@
1>@
1?@
1/B
13B
14B
11@
15@
16@
1&B
1*B
1+B
1!@
1%@
1&@
1tA
1xA
1yA
1x?
1|?
1}?
1mA
1qA
1rA
1o?
1s?
1t?
1dA
1hA
1iA
1f?
1j?
1k?
1[A
1_A
1`A
1V?
1Z?
1[?
1KA
1OA
1PA
1O?
1S?
1T?
1DA
1HA
1IA
1F?
1J?
1K?
1;A
1?A
1@A
1=?
1A?
1B?
12A
16A
17A
1-?
11?
12?
1"A
1&A
1'A
1&?
1*?
1+?
1y@
1}@
1~@
1{>
1!?
1"?
1p@
1t@
1u@
1r>
1v>
1g@
1k@
0j@
0f@
0b@
0u>
0q>
0m>
0s@
0o@
0~>
0z>
0|@
0x@
0)?
0%?
0%A
0V@
00?
0a>
05A
01A
0@?
0<?
0>A
0:A
0I?
0E?
0GA
0CA
0R?
0N?
0NA
0X@
0Y?
0c>
0^A
0ZA
0i?
0e?
0gA
0cA
0r?
0n?
0pA
0lA
0{?
0w?
0wA
0Z@
0$@
0e>
0)B
0%B
04@
00@
02B
0.B
0=@
09@
0;B
07B
0F@
0B@
0BB
0\@
0M@
0g>
0e@
0p>
0n@
0y>
0w@
0$?
0W@
0b>
00A
0;?
09A
0D?
0BA
0M?
0Y@
0d>
0YA
0d?
0bA
0m?
0kA
0v?
0[@
0f>
0$B
0/@
0-B
08@
06B
0A@
0]@
0h>
1L@
1AB
1E@
1:B
1<@
11B
13@
1(B
1#@
1)@
1vA
1|A
1z?
1oA
1q?
1fA
1h?
1]A
1X?
1^?
1MA
1SA
1Q?
1FA
1H?
1=A
1??
14A
1/?
15?
1$A
1*A
1(?
1{@
1*@
1}A
1_?
1TA
16?
1+A
1}>
0\>
1r@
0c@
0n>
0^@
0i>
0_@
0j>
0`@
0k>
0d@
0o>
0S@
0^>
0-A
08?
0.A
09?
0/A
0:?
0T@
0_>
0VA
0a?
0WA
0b?
0XA
0c?
0U@
0`>
0!B
0,@
0"B
0-@
0#B
0.@
0K>
0N>
0O>
0P>
0R>
0S>
0T>
0V>
0W>
0X>
0Z>
0Q>
0U>
0Y>
0[>
0Q@
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0&7
0#9
0'9
0%7
0'7
0$7
0"7
0|6
0x6
0#7
0!7
0~6
0}6
0{6
0z6
0y6
0w6
0v6
0u6
1y8
0Y8
0I8
0H8
0G8
0F8
0E8
0D8
0C8
0B8
0A8
0@8
0?8
0>8
0=8
0<8
0;8
0:8
0i8
0h8
0g8
0f8
0e8
0d8
0c8
0b8
0a8
0`8
0_8
0^8
0]8
0\8
0[8
0Z8
1Y6
0!9
0"9
0&9
0|8
1}8
b0 n9
b0 !:
b0 ":
b0 3:
b0 ,;
b0 =;
b0 >;
b0 O;
b0 H<
b0 Y<
b0 Z<
b0 k<
b0 d=
b0 u=
b0 v=
b0 )>
b0 :>
16/
b0 {8
0z8
1),
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0Z6
0GC
0EC
0CC
0AC
0?C
0=C
0;C
09C
07C
05C
03C
01C
0/C
0-C
0+C
0)C
098
088
078
068
058
048
038
028
018
008
0/8
0.8
0-8
0,8
0+8
0*8
0c=
0b=
0a=
0`=
0_=
0^=
0]=
0\=
0[=
0Z=
0Y=
0X=
0W=
0V=
0U=
0T=
0S=
0R=
0Q=
0P=
0O=
0N=
0M=
0L=
0K=
0J=
0I=
0H=
0G=
0F=
0E=
0D=
0C=
0B=
0A=
0@=
0?=
0>=
0==
0<=
0;=
0:=
09=
08=
07=
06=
05=
04=
03=
02=
01=
00=
0/=
0.=
0-=
0,=
0+=
0*=
0)=
0(=
0'=
0&=
0%=
0$=
0G<
0F<
0E<
0D<
0C<
0B<
0A<
0@<
0?<
0><
0=<
0<<
0;<
0:<
09<
08<
07<
06<
05<
04<
03<
02<
01<
00<
0/<
0.<
0-<
0,<
0+<
0*<
0)<
0(<
0'<
0&<
0%<
0$<
0#<
0"<
0!<
0~;
0};
0|;
0{;
0z;
0y;
0x;
0w;
0v;
0u;
0t;
0s;
0r;
0q;
0p;
0o;
0n;
0m;
0l;
0k;
0j;
0i;
0h;
0g;
0f;
0+;
0*;
0);
0(;
0';
0&;
0%;
0$;
0#;
0";
0!;
0~:
0}:
0|:
0{:
0z:
0y:
0x:
0w:
0v:
0u:
0t:
0s:
0r:
0q:
0p:
0o:
0n:
0m:
0l:
0k:
0j:
0i:
0h:
0g:
0f:
0e:
0d:
0c:
0b:
0a:
0`:
0_:
0^:
0]:
0\:
0[:
0Z:
0Y:
0X:
0W:
0V:
0U:
0T:
0S:
0R:
0Q:
0P:
0O:
0N:
0M:
0L:
0K:
0J:
0m9
0l9
0k9
0j9
0i9
0h9
0g9
0f9
0e9
0d9
0c9
0b9
0a9
0`9
0_9
0^9
0]9
0\9
0[9
0Z9
0Y9
0X9
0W9
0V9
0U9
0T9
0S9
0R9
0Q9
0P9
0O9
0N9
0M9
0L9
0K9
0J9
0I9
0H9
0G9
0F9
0E9
0D9
0C9
0B9
0A9
0@9
0?9
0>9
0=9
0<9
0;9
0:9
099
089
079
069
059
049
039
029
019
009
0/9
0.9
b0 #=
b0 e;
b0 I:
b0 -9
0w7
0v7
0u7
0t7
0s7
0r7
0q7
0p7
0o7
0n7
0m7
0l7
0k7
0j7
0i7
0h7
0g7
0f7
0e7
0d7
0c7
0b7
0a7
0`7
0_7
0^7
0]7
0\7
0[7
0Z7
0Y7
0X7
0W7
0V7
0U7
0T7
0S7
0R7
0Q7
0P7
0O7
0N7
0M7
0L7
0K7
0J7
0I7
0H7
0)8
0(8
0'8
0&8
0%8
0$8
0#8
0"8
0!8
0~7
0}7
0|7
0{7
0z7
0y7
0x7
#50
08!
05!
#100
18!
15!
0e)
0h)
0k)
0n)
0q)
0t)
0w)
0z)
0})
0"*
0%*
1(*
0+*
0.*
01*
04*
b10 :!
#101
02#
03#
04#
05#
16#
07#
08#
09#
0:#
0;#
0<#
0=#
0>#
0?#
0@#
0A#
0S+
0R+
0Q+
0P+
0O+
0N+
0M+
0L+
0K+
0J+
0I+
1H+
0G+
0F+
0E+
0D+
1z+
0y+
0x+
0w+
0v+
1h+
0g+
0f+
0e+
0d+
0l+
0k+
1}*
0|*
0{*
0z*
0y*
1q+
0p+
0o+
0n+
0m+
1(,
0',
0&,
0%,
0$,
1",
1!,
1~+
1}+
1|+
1{+
b0 r+
b0 ~*
b0 i+
b10 j+
b0 b+
0V+
1W+
0X+
0Y+
0Z+
0[+
0\+
0]+
b0 ^+
0_+
0`+
0a+
b0 c+
b0 #,
0w4
0<!
1=!
0>!
0?!
0@!
0A!
0B!
0C!
0H!
0I!
0J!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
0t!
0s!
0r!
0q!
0p!
0o!
0n!
0G!
0F!
0E!
0D!
0"3
0Q6
0O6
0M6
0K6
1H2
1L2
1N2
0Y5
1A2
1E2
1G2
0W5
182
1<2
1>2
0U5
1/2
132
152
0S5
1}1
1#2
1%2
0Q5
1v1
1z1
1|1
0O5
1m1
1q1
1s1
0M5
1d1
1h1
1j1
0K5
1T1
1X1
1Z1
0I5
1M1
1Q1
1S1
0G5
1D1
1H1
1J1
0E5
1;1
1?1
1A1
0C5
1+1
1/1
111
0A5
1$1
1(1
1*1
0?5
1y0
1}0
1!1
0=5
1p0
1t0
0;5
0I6
0G6
0E6
0C6
0A6
1U+
0!3
0?6
0=6
0T+
0s0
0o0
0k0
0x0
0#1
0_0
0:1
0C1
0L1
0a0
0c1
0l1
0u1
0c0
0.2
072
0@2
0e0
1(2
1]1
141
1{0
1~0
0|0
0l0
1&1
1)1
0'1
0m0
1-1
101
0.1
0\0
131
0g0
1=1
1@1
0>1
061
1F1
1I1
0G1
071
1O1
1R1
0P1
081
1V1
1Y1
0W1
0]0
1\1
0h0
1f1
1i1
0g1
0_1
1o1
1r1
0p1
0`1
1x1
1{1
0y1
0a1
1!2
1$2
0"2
0^0
1'2
0i0
112
142
022
0*2
1:2
1=2
0;2
0+2
1C2
1F2
0D2
0,2
1J2
1M2
0K2
0[0
0^2
0]2
0\2
0[2
0Z2
0Y2
0X2
0W2
0V2
0U2
0T2
0S2
0R2
0Q2
0P2
0O2
03+
02+
01+
00+
0/+
0.+
0-+
0,+
0++
0*+
0)+
0(+
0'+
0&+
0%+
0$+
0M!
1q4
0_2
1j4
0`2
1a4
0a2
1X4
0b2
1H4
0c2
1A4
0d2
184
0e2
1/4
0f2
1}3
0g2
1v3
0h2
1m3
0i2
1d3
0j2
1T3
0k2
1M3
0l2
1D3
0m2
1;3
0n2
083
0A3
0J3
0*3
0a3
0j3
0s3
0,3
0,4
054
0>4
0.3
0U4
0^4
0g4
003
0~2
0}2
0|2
0{2
0z2
0y2
0x2
0w2
0v2
0u2
0t2
0s2
0r2
0q2
0p2
0o2
01&
00&
0/&
0.&
0-&
0,&
0+&
0*&
0)&
0(&
0'&
0&&
0%&
0$&
0#&
0"&
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0a&
0_&
0]&
0[&
0Y&
0W&
0U&
0S&
0Q&
0O&
0M&
0K&
0I&
0G&
0E&
0C&
0v*
0u*
0"+
0!+
b0 u+
b0 s+
b0 t+
0w*
0x*
0t#
0s#
0r#
0W6
0U6
0S6
0z#
0y#
0x#
0w#
0v#
0u#
0M,
0L,
06/
b0 4/
b0 5/
0),
0I,
0H,
0G,
0F,
0E,
0D,
0C,
0B,
0A,
0@,
0?,
0>,
0=,
0<,
0;,
0:,
09,
08,
07,
06,
05,
04,
03,
02,
01,
00,
0/,
0.,
0-,
0,,
0+,
0*,
b0 J,
b0 K,
0m!
0l!
0k!
0j!
0i!
0h!
0g!
0f!
0e!
0d!
0c!
0b!
0a!
0`!
0_!
0^!
0y5
0w5
0u5
0s5
0q5
0o5
0m5
0k5
0i5
0g5
0e5
0c5
0a5
0_5
0]5
0[5
0]!
0\!
0[!
0Z!
0Y!
0X!
0W!
0V!
0U!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
1I2
04+
0;6
1B2
05+
096
192
06+
076
102
07+
056
1~1
08+
036
1w1
09+
016
1n1
0:+
0/6
1e1
0;+
0-6
1U1
0<+
0+6
1N1
0=+
0)6
1E1
0>+
0'6
1<1
0?+
0%6
1,1
0@+
0#6
1%1
0A+
0!6
1z0
0B+
0}5
1q0
0C+
0{5
0n0
0w0
0"1
0`0
091
0B1
0K1
0b0
0b1
0k1
0t1
0d0
0-2
062
0?2
0f0
#150
08!
05!
#200
18!
15!
b11 :!
#201
09!
07!
1N"
1["
1V"
0T"
1Q"
1P"
17*
1=&
18&
06&
13&
12&
1<
17
05
12
11
10&
1E&
1^)
1Y)
0W)
1T)
1S)
13*
10*
0'*
1!*
1p)
#250
08!
05!
#300
18!
15!
1F&
1q)
1"*
0(*
11*
14*
18*
b100 :!
#301
1P#
12#
13#
06#
18#
1=#
1."
0l'
0p'
0q&
1W*
0D3
1m2
1{4
1A3
1o'
1k'
1_'
1p&
1}2
1#'
1!'
0~&
1z&
0N"
1M"
1/
1O+
1J+
0H+
1E+
1D+
0z+
1w+
1v+
12+
19*
07*
1>"
00&
1/&
1^"
1\"
0["
1W"
1G&
0E&
1@&
1>&
0=&
19&
1?
1=
0<
18
1a)
1_)
0^)
1Z)
1|)
0p)
1m)
1g)
0h+
1e+
1d+
0}*
1z*
1y*
0q+
1n+
1m+
0(,
1%,
1$,
0~+
b10 r+
b10 b+
0W+
b1110 ^+
1`+
1a+
b10000 #,
0=!
1I!
1J!
1y!
1F!
1E!
1D!
1Q6
1O6
1M6
0<1
1?+
1C5
1I6
1G6
191
1Z2
0d3
1j2
1a3
1z2
1!+
b10 s+
b10 u+
1s#
1U6
1v#
1L,
#350
08!
05!
#400
18!
15!
0F&
1H&
1h)
1n)
0q)
1})
08*
1:*
1X*
1|4
1D5
1H6
1J6
1N6
1P6
1R6
1V6
b101 :!
#401
1a$
1c$
1d$
1e$
1m$
1l$
1;$
1.$
1`#
1O#
0P#
19#
0=#
1>#
1@#
1-"
0."
1l'
1p'
1q&
0W*
0v'
0{'
0p&
1Y*
1D3
0m2
0{4
0M3
1l2
1}4
1IB
1SC
1WC
1J3
0A3
1x'
1s'
0o'
0k'
0_'
1{'
1p&
0x'
0}2
1|2
1$'
1"'
0!'
0z&
0y&
1x&
1N"
0/
1.
1R+
1P+
0O+
1K+
02+
11+
1f6
17*
0>"
1="
10&
1_"
1]"
0\"
0W"
0V"
1U"
1E&
1A&
1?&
0>&
09&
08&
17&
1@
1>
0=
08
07
16
1b)
1`)
0_)
0Z)
0Y)
1X)
1$*
0!*
0|)
0m)
1j)
1d)
1C7
1k+
0>?
1Y>
03A
10A
1;?
1Q@
1"7
0y8
1e8
0Y6
1!9
0}8
b111 i+
b11 j+
b11 s+
b11 u+
b1010 #,
b10000 {8
1{"
1|!
1z!
0y!
1t#
1S6
1<1
0?+
0C5
0,1
1@+
1A5
0z0
1B+
1=5
11C
1w0
1`0
091
1]2
1[2
0Z2
1d3
0j2
0T3
1k2
0D3
1m2
1A3
1*3
0a3
1}2
1{2
0z2
1w#
#450
08!
05!
#500
18!
15!
1F&
1e)
1k)
0n)
0})
0"*
1%*
18*
0X*
1Z*
0|4
1~4
1>5
1B5
0D5
1T6
1JB
12C
1TC
1XC
b110 :!
#501
1A%
1H%
1y$
1.%
1b$
0;$
1<$
1>$
1-$
0.$
1_#
0`#
1P#
17#
08#
09#
0>#
1?#
1A#
1."
0l'
0p'
0q&
1W*
0C3
0G3
0m2
1{4
0IB
1KB
1UC
1dC
1LD
1hD
1nD
1F3
1B3
163
1o'
1k'
1_'
0w'
0{'
0p&
0N3
0R3
0l2
1O3
173
1x'
1`'
1o&
0U3
0X3
0k2
1V3
1&3
0[3
113
1j2
0}2
0|2
0{2
1z2
0$'
0#'
0"'
1{&
1z&
1y&
0x&
0t&
0N"
0M"
1L"
1/
1S+
1Q+
0P+
0K+
0J+
1I+
12+
1i6
1g6
0f6
1b
1;*
09*
07*
1>"
00&
0/&
1.&
0_"
0^"
0]"
1X"
1W"
1V"
0U"
0Q"
1I&
0G&
0E&
0A&
0@&
0?&
1:&
19&
18&
07&
03&
0@
0?
0>
19
18
17
06
02
0b)
0a)
0`)
1[)
1Z)
1Y)
0X)
0T)
00*
0$*
1!*
1|)
1y)
0j)
0g)
0d)
1F7
1D7
0C7
1l+
1>?
0Y>
13A
0.?
1Z>
0#A
0|>
1\>
0q@
1n@
1y>
1W@
1b>
00A
0;?
1%7
1h8
1f8
0e8
1#7
0"7
b1101 i+
b101 j+
b1010 {8
b100 s+
b100 u+
b111 #,
1}!
1{!
0z!
0t#
0s#
1r#
1~"
1|"
0{"
01C
1/C
1+C
1W6
0U6
0S6
1,1
0@+
0A5
0%1
1A+
1?5
0q0
1C+
1;5
1n0
1"1
0`0
1^2
1\2
0[2
1T3
1X3
1k2
0L3
0P3
0Q3
1l2
0;3
1n2
183
1K3
0V3
0*3
1U3
1[3
013
0&3
0j2
1~2
1|2
1{2
0z2
0w#
0v#
1u#
#550
08!
05!
#600
18!
15!
0F&
0H&
1J&
0e)
0h)
0k)
1z)
1})
1"*
0%*
01*
08*
0:*
1<*
1X*
1|4
1<5
1@5
0B5
0T6
0V6
1X6
0JB
1LB
1,C
10C
02C
1VC
1eC
1MD
1iD
1oD
b111 :!
#601
1z%
1~%
1d%
1w%
1B%
0y$
1z$
1|$
1-%
0.%
1`$
0a$
0b$
0<$
1=$
1?$
1.$
1`#
1N#
0O#
0P#
03#
07#
18#
19#
1:#
0?#
0@#
0A#
1,"
0-"
0."
1l'
1p'
1q&
0W*
1v'
1{'
1p&
0Y*
0}'
0$(
0o&
1[*
1C3
1G3
1m2
0{4
1L3
1P3
1R3
0l2
0}4
0T3
0Y3
0k2
1!5
1IB
0UC
0WC
1YC
0dC
1fC
1FD
1JD
0LD
1lD
1V3
1*3
0K3
0F3
0B3
063
1!(
1S'
0x'
0s'
0o'
0k'
0_'
0p&
1w'
0~'
1N3
1Q3
1l2
0U3
1&3
0O3
073
1O'
0`'
1~'
1$(
1o&
0&(
1U3
1Y3
1k2
0[3
113
0V3
0&3
1Z'
0!(
0O'
1&(
1n&
1[3
1j2
013
0Z'
0n&
0j2
1A
1}2
1}&
0{&
1w&
1N"
0/
0.
1-
0S+
0R+
0Q+
1L+
1K+
1J+
0I+
0E+
0w+
02+
01+
10+
1j6
1h6
0g6
1e
1c
0b
1|#
1C
17*
0>"
0="
1<"
10&
1Z"
0X"
1T"
1E&
1<&
0:&
16&
1;
09
15
1])
0[)
1W)
1'*
0y)
1s)
0!,
1~+
1G7
1E7
0D7
0e+
0l+
0k+
0z*
0n+
0%,
1k"
1M,
1.?
0Z>
1#A
0'?
1[>
0z@
0s>
1]>
0h@
1e@
1p>
1w@
1$?
0W@
0b>
1=.
1P
1&7
1i8
1g8
0f8
1$7
0#7
b1 r+
b10 ~*
b0 i+
b10 j+
b1 b+
b0 ^+
1_+
0a+
b10 c+
b111 {8
b11 s+
b0 u+
b0 #,
1H!
0J!
0}!
0|!
0{!
0r#
1!#
1}"
0|"
0F!
0E!
0D!
0Q6
0O6
0M6
0/C
1-C
1)C
0W6
1%1
0A+
0?5
1z0
0B+
0=5
1q0
0C+
0;5
0I6
1E6
0n0
0w0
0"1
0^2
0]2
0\2
1M3
0l2
1D3
0m2
1;3
0n2
083
0A3
0J3
0~2
0}2
0|2
1w#
1v#
0u#
1u*
1"+
0!+
b100 u+
b100 t+
1w*
1x*
1r#
1;!
0B)
0B&
1W6
0E&
0s)
1y)
0'*
07*
1W*
1Y*
0[*
0L+
0K+
0J+
1H+
0D+
1h+
0d+
1x#
b0 b+
1W+
0_+
0`+
b0 c+
1=!
0H!
0I!
0G6
0E6
#650
08!
05!
#700
18!
15!
1[/
0|4
0~4
1"5
0<5
0>5
0@5
0H6
0J6
0N6
0P6
0R6
1JB
1*C
1.C
00C
0VC
0XC
1ZC
0eC
1gC
1GD
1KD
0MD
1mD
b1000 :!
b1 .!
#701
1{%
0d%
1e%
1g%
1v%
0w%
1@%
0A%
0B%
0z$
1{$
1}$
1.%
0c$
0d$
0e$
0m$
0l$
0=$
0>$
0?$
1,$
0-$
0.$
1y,
0IB
0KB
1MB
0SC
1dC
1DD
1HD
0JD
0lD
0nD
1pD
0j6
0i6
0h6
1f
1d
0c
1}#
1D
1M.
0G7
0F7
0E7
1n"
1l"
0k"
0L,
1'?
0[>
1z@
1|>
0\>
1q@
1s>
0]>
1h@
0e@
0p>
0n@
0y>
0w@
0$?
0Q@
1P.
1N.
0M.
1S
1Q
0P
0&7
0%7
0$7
1y8
0i8
0h8
0g8
1Y6
0!9
1}8
b1010 J,
b0 {8
0!#
0~"
0}"
0-C
0+C
0)C
1\!
1Z!
0,1
1@+
1#6
0z0
1B+
1}5
1w0
1`0
#750
08!
05!
#800
18!
15!
1h/
1j/
1~5
1$6
0JB
0LB
1NB
0*C
0,C
0.C
0TC
1eC
1ED
1ID
0KD
0mD
0oD
1qD
b1001 :!
b10 .!
#801
1y%
0z%
0{%
0e%
1f%
1h%
1w%
0H%
0{$
0|$
0}$
1,%
0-%
0.%
1L$
1N$
1,-
1.-
0dC
0fC
1hC
0DD
0FD
0HD
0hD
0;!
0f
0e
0d
0}#
0|#
1{#
0D
0C
1B
1B)
1B&
1E&
1s)
0y)
1'*
17*
0W*
0Y*
1[*
1`.
1^.
1L+
1K+
1J+
0H+
1D+
0M,
1L,
0h+
1d+
167
147
1o"
1m"
0l"
0.?
1Z>
0#A
0|>
1\>
0q@
1n@
1y>
1W@
1b>
1Q@
1a.
1_.
0^.
1T
1R
0Q
1%7
1#7
0y8
1=8
1;8
1`8
1^8
0Y6
1!9
0}8
b1010 {8
b1010 :>
b1010 )>
b1010 v=
b1010 u=
b1010 d=
b1010 k<
b1010 Z<
b1010 Y<
b1010 H<
b1010 O;
b1010 >;
b1010 =;
b1010 ,;
b1010 3:
b1010 ":
b1010 !:
b1010 n9
b1 b+
0W+
1_+
1`+
b10 c+
b0 J,
b111 K,
b1010 4/
0=!
1H!
1I!
1m!
1l!
1k!
1~"
1|"
1/C
1+C
1_5
1]5
1[5
1G6
1E6
18,
16,
0\!
0Z!
1<9
1:9
1L9
1J9
1\9
1Z9
1l9
1j9
1X:
1V:
1h:
1f:
1x:
1v:
1*;
1(;
1t;
1r;
1&<
1$<
16<
14<
1F<
1D<
12=
10=
1B=
1@=
1R=
1P=
1b=
1`=
188
168
1,1
0@+
0#6
1z0
0B+
0}5
0w0
0`0
b1010 -9
b1010 I:
b1010 e;
b1010 #=
b1010 J,
1v7
1t7
1\!
1Z!
1(8
1&8
1V7
1T7
1f7
1d7
0,1
1@+
1#6
0z0
1B+
1}5
1w0
1`0
#850
08!
05!
#900
18!
15!
1F&
1t)
0z)
1(*
18*
0X*
0Z*
1\*
1w/
1x/
1y/
1\5
1^5
1`5
1F6
1H6
1,C
10C
0eC
0gC
1iC
0ED
0GD
0ID
0iD
b1010 :!
b11 .!
#901
0~%
0f%
0g%
0h%
1u%
0v%
0w%
1z$
1|$
1l$
1k$
1]$
1^$
1_$
1=-
1>-
1?-
1^#
0_#
0`#
1P#
16#
0:#
1<#
1."
0l'
0p'
0q&
1W*
0D3
1m2
1{4
1gB
1iB
1kB
1QC
1FD
1JD
1A3
1o'
1k'
1_'
1p&
0A
1}2
0z&
0w&
0N"
1M"
1/
1N+
0L+
1H+
1z+
12+
1e
1c
19*
07*
1>"
00&
1/&
0W"
0T"
1G&
0E&
09&
06&
08
05
0Z)
0W)
0'*
0|)
1h+
1}*
1q+
1(,
0o"
0n"
0m"
1!,
0T
0S
0R
b1 ~*
1\+
1]+
0_+
1a+
b1 c+
b1 u+
b0 t+
b111 5/
b0 K,
1B!
1C!
0H!
1J!
0m!
0l!
0k!
1t#
0r#
0W6
1S6
0_5
0]5
0[5
1I6
0E6
1C6
1A6
1I,
1H,
1G,
0x#
1v*
0u*
1M,
0x*
b0 5/
b111 K,
1m!
1l!
1k!
1_5
1]5
1[5
0I,
0H,
0G,
b0 K,
0m!
0l!
0k!
0_5
0]5
0[5
#950
08!
05!
#1000
18!
15!
0F&
1H&
0})
0(*
08*
1:*
1X*
1|4
0\5
0^5
0`5
1B6
1D6
0F6
1J6
1T6
0X6
1hB
1jB
1lB
1RC
1GD
1KD
b1011 :!
#1001
1e%
1g%
1G%
1=%
1>%
1?%
0`$
1b$
1m$
0k$
1j$
1i$
0]$
0^$
0_$
1.$
1`#
1O#
0P#
06#
09#
1-"
0."
1l'
1p'
1q&
0W*
0v'
0{'
0p&
1Y*
1D3
0m2
0{4
0M3
1l2
1}4
1IB
0gB
0iB
0kB
1MC
1OC
0QC
1SC
1UC
0YC
0\C
1[C
1J3
0A3
1x'
1s'
0o'
0k'
0_'
1{'
1p&
0x'
1U
0}2
1|2
0}&
0y&
0s&
1N"
0/
1.
0K+
0H+
0z+
02+
11+
1v
1u
1t
17*
0>"
1="
10&
0Z"
0V"
0P"
1E&
0<&
08&
02&
0;
07
01
0])
0Y)
0S)
03*
0!*
0s)
0h+
0}*
0q+
0(,
1n"
1l"
0!,
1S
1Q
b10 ~*
0\+
0]+
1_+
0a+
b10 c+
b10 s+
b1 t+
0B!
0C!
1H!
0J!
0I6
1E6
0C6
0A6
1z#
0w#
0v*
1u*
1x*
b10000 4/
1;!
0B)
0B&
0E&
1s)
1!*
13*
07*
1W*
0Y*
0N+
0J+
1H+
0D+
1h+
0d+
08,
06,
15,
b10000 J,
b0 b+
1W+
0_+
0`+
b0 c+
1=!
0H!
0I!
0G6
0E6
0\!
0Z!
1Y!
0<1
1?+
1%6
1,1
0@+
0#6
1z0
0B+
0}5
0w0
0`0
191
#1050
08!
05!
#1100
18!
15!
0|4
1~4
0~5
0$6
1&6
0B6
0D6
0H6
0J6
1JB
0hB
0jB
0lB
1NC
1PC
0RC
1TC
1VC
0ZC
b1010 ^C
b1100 :!
b100 .!
#1101
0@%
1B%
1H%
0G%
1F%
1E%
0=%
0>%
0?%
1.%
0m$
0l$
0j$
0i$
1K$
0L$
0N$
1-$
0.$
0IB
1KB
0MC
0OC
0SC
1dC
1fD
1hD
1lD
0pD
0U
1V
0v
0u
0t
11#
10#
1/#
1(D
1&D
1$D
1(!
1'!
1&!
067
047
137
0>?
1Y>
03A
1.?
0Z>
1#A
1|>
0\>
1q@
0n@
0y>
0W@
0b>
10A
1;?
0%7
1>8
0=8
0;8
0`8
0^8
1]8
0#7
1"7
b10000 {8
b10000 :>
b10000 )>
b10000 v=
b10000 u=
b10000 d=
b10000 k<
b10000 Z<
b10000 Y<
b10000 H<
b10000 O;
b10000 >;
b10000 =;
b10000 ,;
b10000 3:
b10000 ":
b10000 !:
b10000 n9
0~"
0|"
1{"
11C
0/C
0+C
0<9
0:9
199
0L9
0J9
1I9
0\9
0Z9
1Y9
0l9
0j9
1i9
0X:
0V:
1U:
0h:
0f:
1e:
0x:
0v:
1u:
0*;
0(;
1';
0t;
0r;
1q;
0&<
0$<
1#<
06<
04<
13<
0F<
0D<
1C<
02=
00=
1/=
0B=
0@=
1?=
0R=
0P=
1O=
0b=
0`=
1_=
088
068
158
b10000 -9
b10000 I:
b10000 e;
b10000 #=
0v7
0t7
1s7
0(8
0&8
1%8
0V7
0T7
1S7
0f7
0d7
1c7
#1150
08!
05!
#1200
18!
15!
0JB
1LB
0,C
00C
12C
0NC
0PC
0TC
1eC
1%D
1'D
1)D
1gD
1iD
1mD
0qD
b1101 :!
#1201
0y%
1{%
1~%
1}%
1V%
1W%
1X%
1w%
0H%
0F%
0E%
1y$
0z$
0|$
1-%
0.%
0dC
1fC
0FD
0JD
1LD
0fD
1\C
0hD
0[C
1A
0;!
0V
01#
00#
0/#
0e
0c
1b
0a.
0_.
1^.
1}#
0{#
1D
0B
0(D
0&D
0$D
1B)
1B&
1E&
0s)
0!*
03*
17*
0W*
1Y*
10.
1..
1a.
1_.
0^.
0(!
0'!
0&!
1N+
1J+
0H+
1D+
0M,
0h+
1d+
1o"
1m"
0l"
11.
1/.
0..
1T
1R
0Q
b1 b+
0W+
1_+
1`+
b10 c+
b111 K,
0=!
1H!
1I!
1m!
1l!
1k!
1_5
1]5
1[5
1G6
1E6
#1250
08!
05!
#1300
18!
15!
1F&
0t)
0"*
04*
18*
0X*
1Z*
1G/
1H/
1I/
1\5
1^5
1`5
1F6
1H6
0eC
1gC
0%D
0'D
0)D
0GD
0KD
1MD
0gD
0iD
b1110 :!
b101 .!
#1301
0~%
0}%
1d%
0e%
0g%
0V%
0W%
0X%
1v%
0w%
1l$
1k$
1]$
1^$
1_$
1k,
1l,
1m,
1_#
0`#
1P#
02#
08#
0<#
1."
0l'
0p'
0q&
1W*
0D3
1m2
1{4
1gB
1iB
1kB
1QC
1A3
1o'
1k'
1_'
0w'
0{'
0p&
1x'
1`'
0~'
0$(
0o&
1!(
1O'
0&(
1Z'
1n&
0A
1}2
0N"
0M"
0L"
1K"
1/
0N+
0J+
0D+
0v+
12+
1=*
0;*
09*
07*
1>"
00&
0/&
0.&
1-&
1K&
0I&
0G&
0E&
0d+
0y*
0m+
0$,
0o"
0n"
0m"
1k"
1!,
0T
0S
0R
1P
b0 r+
b0 ~*
b0 b+
1V+
0_+
0`+
b0 c+
b0 u+
b0 s+
b0 t+
b111 5/
b0 K,
1<!
0H!
0I!
0m!
0l!
0k!
0t#
0S6
0_5
0]5
0[5
0G6
0E6
1=6
1I,
1H,
1G,
0z#
0v#
0u*
0"+
1M,
0w*
0x*
b0 4/
b0 5/
b111 K,
1m!
1l!
1k!
1_5
1]5
1[5
0I,
0H,
0G,
05,
b0 J,
b0 K,
0m!
0l!
0k!
0_5
0]5
0[5
0Y!
1<1
0?+
0%6
091
#1350
08!
05!
#1400
18!
15!
0F&
0H&
0J&
1L&
08*
0:*
0<*
1>*
1X*
1|4
0\5
0^5
0`5
0&6
1>6
0F6
0H6
0T6
1hB
1jB
1lB
1RC
b1111 :!
#1401
1G%
1=%
1>%
1?%
0b$
0l$
0k$
1g$
0K$
0]$
0^$
0_$
1.$
1`#
1M#
0N#
0O#
0P#
1+"
0,"
0-"
0."
1l'
1p'
1q&
0W*
1v'
1{'
1p&
0Y*
1}'
1$(
1o&
0[*
0/(
04(
0n&
1]*
1D3
0m2
0{4
1M3
0l2
0}4
1T3
0k2
0!5
0d3
1j2
1#5
1IB
0gB
0iB
0kB
1IC
0QC
0UC
0\C
1[C
1a3
0*3
0J3
0A3
11(
1,(
0!(
0S'
0x'
0s'
0o'
0k'
0_'
0p&
1w'
1~'
1&(
00(
1)(
0Z'
0O'
0`'
0o&
10(
14(
1n&
1m&
01(
0)(
0m&
1U
0}2
0|2
0{2
1z2
1N"
0/
0.
0-
1,
02+
01+
00+
1/+
1v
1u
1t
17*
0>"
0="
0<"
1;"
10&
1E&
037
1>?
0Y>
13A
00A
0;?
0Q@
0"7
1y8
0>8
0]8
1Y6
0!9
1}8
b0 {8
b0 :>
b0 )>
b0 v=
b0 u=
b0 d=
b0 k<
b0 Z<
b0 Y<
b0 H<
b0 O;
b0 >;
b0 =;
b0 ,;
b0 3:
b0 ":
b0 !:
b0 n9
0{"
01C
099
0I9
0Y9
0i9
0U:
0e:
0u:
0';
0q;
0#<
03<
0C<
0/=
0?=
0O=
0_=
058
b0 -9
b0 I:
b0 e;
b0 #=
0s7
0%8
0S7
0c7
#1450
08!
05!
#1500
18!
15!
1F&
18*
0X*
0Z*
0\*
1^*
0|4
0~4
0"5
1$5
1JB
0hB
0jB
0lB
02C
1JC
0RC
0VC
b10000 ^C
b10000 :!
b110 .!
#1501
0B%
0G%
1C%
0y$
0=%
0>%
0?%
1.%
1+$
0,$
0-$
0.$
1]#
0^#
0_#
0`#
1P#
1."
0l'
0p'
0q&
1W*
0D3
1m2
1{4
0IB
0KB
0MB
1OB
1dC
0LD
1jD
1\C
0lD
0[C
1A3
1o'
1k'
1_'
1p&
0U
1}2
0N"
1M"
1/
12+
0v
0u
0t
0b
19*
07*
1>"
00&
1/&
1G&
0E&
#1550
08!
05!
#1600
18!
15!
0F&
1H&
08*
1:*
1X*
1|4
0JB
0LB
0NB
1PB
1eC
0MD
1kD
0mD
b10001 :!
#1601
0{%
1!&
0d%
1w%
1+%
0,%
0-%
0.%
1.$
1`#
1O#
0P#
1-"
0."
1l'
1p'
1q&
0W*
0v'
0{'
0p&
1Y*
1D3
0m2
0{4
0M3
1l2
1}4
1IB
0dC
0fC
0hC
1jC
1J3
0A3
1x'
1s'
0o'
0k'
0_'
1{'
1p&
0x'
1-!
0}2
1|2
1N"
0/
1.
02+
11+
0}#
0D
17*
0>"
1="
10&
1E&
0k"
0M,
0L,
0P
#1650
08!
05!
#1700
18!
15!
1F&
18*
0X*
1Z*
0|4
1~4
1JB
b10000000000000000000000000000011 _C
b0 `C
b1 `C
b10 `C
b11 `C
b100 `C
b101 `C
b110 `C
b111 `C
b1000 `C
b1001 `C
b1010 `C
b1011 `C
b1100 `C
b1101 `C
b1110 `C
b1111 `C
b10000 `C
b10001 `C
b10010 `C
0eC
0gC
0iC
1kC
b10010 :!
b111 .!
#1701
1t%
0u%
0v%
0w%
1.%
1-$
0.$
1_#
0`#
1P#
1."
0l'
0p'
0q&
1W*
0D3
1m2
1{4
0IB
1KB
1dC
1A3
1o'
1k'
1_'
0w'
0{'
0p&
1x'
1`'
1o&
1}2
0N"
0M"
1L"
1/
12+
1;*
09*
07*
1>"
00&
0/&
1.&
1I&
0G&
0E&
